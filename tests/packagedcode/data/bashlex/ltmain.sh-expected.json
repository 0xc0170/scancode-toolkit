[
  "(0, Token.Comment.Single, '# ltmain.sh - Provide generalized library-building support services.')",
  "(68, Token.Text.NewLine, '\\n')",
  "(69, Token.Comment.Single, '# NOTE: Changing this file will not affect anything until you rerun configure.')",
  "(147, Token.Text.NewLine, '\\n')",
  "(148, Token.Comment.Single, '#')",
  "(149, Token.Text.NewLine, '\\n')",
  "(150, Token.Comment.Single, '# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005')",
  "(218, Token.Text.NewLine, '\\n')",
  "(219, Token.Comment.Single, '# Free Software Foundation, Inc.')",
  "(251, Token.Text.NewLine, '\\n')",
  "(252, Token.Comment.Single, '# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996')",
  "(313, Token.Text.NewLine, '\\n')",
  "(314, Token.Comment.Single, '#')",
  "(315, Token.Text.NewLine, '\\n')",
  "(316, Token.Comment.Single, '# This program is free software; you can redistribute it and/or modify')",
  "(386, Token.Text.NewLine, '\\n')",
  "(387, Token.Comment.Single, '# it under the terms of the GNU General Public License as published by')",
  "(457, Token.Text.NewLine, '\\n')",
  "(458, Token.Comment.Single, '# the Free Software Foundation; either version 2 of the License, or')",
  "(525, Token.Text.NewLine, '\\n')",
  "(526, Token.Comment.Single, '# (at your option) any later version.')",
  "(563, Token.Text.NewLine, '\\n')",
  "(564, Token.Comment.Single, '#')",
  "(565, Token.Text.NewLine, '\\n')",
  "(566, Token.Comment.Single, '# This program is distributed in the hope that it will be useful, but')",
  "(635, Token.Text.NewLine, '\\n')",
  "(636, Token.Comment.Single, '# WITHOUT ANY WARRANTY; without even the implied warranty of')",
  "(696, Token.Text.NewLine, '\\n')",
  "(697, Token.Comment.Single, '# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU')",
  "(764, Token.Text.NewLine, '\\n')",
  "(765, Token.Comment.Single, '# General Public License for more details.')",
  "(807, Token.Text.NewLine, '\\n')",
  "(808, Token.Comment.Single, '#')",
  "(809, Token.Text.NewLine, '\\n')",
  "(810, Token.Comment.Single, '# You should have received a copy of the GNU General Public License')",
  "(877, Token.Text.NewLine, '\\n')",
  "(878, Token.Comment.Single, '# along with this program; if not, write to the Free Software')",
  "(939, Token.Text.NewLine, '\\n')",
  "(940, Token.Comment.Single, '# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.')",
  "(1020, Token.Text.NewLine, '\\n')",
  "(1021, Token.Comment.Single, '#')",
  "(1022, Token.Text.NewLine, '\\n')",
  "(1023, Token.Comment.Single, '# As a special exception to the GNU General Public License, if you')",
  "(1089, Token.Text.NewLine, '\\n')",
  "(1090, Token.Comment.Single, '# distribute this file as part of a program that contains a')",
  "(1149, Token.Text.NewLine, '\\n')",
  "(1150, Token.Comment.Single, '# configuration script generated by Autoconf, you may include it under')",
  "(1220, Token.Text.NewLine, '\\n')",
  "(1221, Token.Comment.Single, '# the same distribution terms that you use for the rest of that program.')",
  "(1293, Token.Text.NewLine, '\\n\\n')",
  "(1295, Token.Name.Variable, 'basename')",
  "(1303, Token.Operator.Equal, '=')",
  "(1304, Token.Literal.String.Double, '\"s,^.*/,,g\"')",
  "(1315, Token.Text.NewLine, '\\n\\n')",
  "(1317, Token.Comment.Single, '# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh')",
  "(1389, Token.Text.NewLine, '\\n')",
  "(1390, Token.Comment.Single, '# is ksh but when the shell is invoked as \"sh\" and the current value of')",
  "(1461, Token.Text.NewLine, '\\n')",
  "(1462, Token.Comment.Single, '# the _XPG environment variable is not equal to 1 (one), the special')",
  "(1530, Token.Text.NewLine, '\\n')",
  "(1531, Token.Comment.Single, '# positional parameter $0, within a function call, is the name of the')",
  "(1600, Token.Text.NewLine, '\\n')",
  "(1601, Token.Comment.Single, '# function.')",
  "(1612, Token.Text.NewLine, '\\n')",
  "(1613, Token.Name.Variable, 'progpath')",
  "(1621, Token.Operator.Equal, '=')",
  "(1622, Token.Literal.String.Double, '\"$0\"')",
  "(1626, Token.Text.NewLine, '\\n\\n')",
  "(1628, Token.Comment.Single, \"# define SED for historic ltconfig's generated by Libtool 1.3\")",
  "(1689, Token.Text.NewLine, '\\n')",
  "(1690, Token.Text, 'test')",
  "(1694, Token.Text.Whitespace, ' ')",
  "(1695, Token.Text, '-z')",
  "(1697, Token.Text.Whitespace, ' ')",
  "(1698, Token.Literal.String.Double, '\"$SED\"')",
  "(1704, Token.Text.Whitespace, ' ')",
  "(1705, Token.Text, '&&')",
  "(1707, Token.Text.Whitespace, ' ')",
  "(1708, Token.Text, 'SED=sed')",
  "(1715, Token.Text.NewLine, '\\n\\n')",
  "(1717, Token.Comment.Single, '# The name of this program:')",
  "(1744, Token.Text.NewLine, '\\n')",
  "(1745, Token.Name.Variable, 'progname')",
  "(1753, Token.Operator.Equal, '=')",
  "(1754, Token.Text, '`echo')",
  "(1759, Token.Text.Whitespace, ' ')",
  "(1760, Token.Literal.String.Double, '\"$progpath\"')",
  "(1771, Token.Text.Whitespace, ' ')",
  "(1772, Token.Text, '|')",
  "(1773, Token.Text.Whitespace, ' ')",
  "(1774, Token.Text, '$SED')",
  "(1778, Token.Text.Whitespace, ' ')",
  "(1779, Token.Text, '$basename`')",
  "(1789, Token.Text.NewLine, '\\n')",
  "(1790, Token.Name.Variable, 'modename')",
  "(1798, Token.Operator.Equal, '=')",
  "(1799, Token.Literal.String.Double, '\"$progname\"')",
  "(1810, Token.Text.NewLine, '\\n\\n')",
  "(1812, Token.Comment.Single, '# Global variables:')",
  "(1831, Token.Text.NewLine, '\\n')",
  "(1832, Token.Name.Variable, 'EXIT_SUCCESS')",
  "(1844, Token.Operator.Equal, '=')",
  "(1845, Token.Text, '0')",
  "(1846, Token.Text.NewLine, '\\n')",
  "(1847, Token.Name.Variable, 'EXIT_FAILURE')",
  "(1859, Token.Operator.Equal, '=')",
  "(1860, Token.Text, '1')",
  "(1861, Token.Text.NewLine, '\\n\\n')",
  "(1863, Token.Name.Variable, 'PROGRAM')",
  "(1870, Token.Operator.Equal, '=')",
  "(1871, Token.Text, 'ltmain.sh')",
  "(1880, Token.Text.NewLine, '\\n')",
  "(1881, Token.Name.Variable, 'PACKAGE')",
  "(1888, Token.Operator.Equal, '=')",
  "(1889, Token.Text, 'libtool')",
  "(1896, Token.Text.NewLine, '\\n')",
  "(1897, Token.Name.Variable, 'VERSION')",
  "(1904, Token.Operator.Equal, '=')",
  "(1905, Token.Text, '1.5.22')",
  "(1911, Token.Text.NewLine, '\\n')",
  "(1912, Token.Name.Variable, 'TIMESTAMP')",
  "(1921, Token.Operator.Equal, '=')",
  "(1922, Token.Literal.String.Double, '\" (1.1220.2.365 2005/12/18 22:14:06)\"')",
  "(1959, Token.Text.NewLine, '\\n\\n')",
  "(1961, Token.Comment.Single, '# See if we are running on zsh, and set the options which allow our')",
  "(2028, Token.Text.NewLine, '\\n')",
  "(2029, Token.Comment.Single, '# commands through without removal of \\\\ escapes.')",
  "(2077, Token.Text.NewLine, '\\n')",
  "(2078, Token.Text, 'if')",
  "(2080, Token.Text.Whitespace, ' ')",
  "(2081, Token.Text, 'test')",
  "(2085, Token.Text.Whitespace, ' ')",
  "(2086, Token.Text, '-n')",
  "(2088, Token.Text.Whitespace, ' ')",
  "(2089, Token.Literal.String.Double, '\"${ZSH_VERSION+set}\"')",
  "(2109, Token.Text.Whitespace, ' ')",
  "(2110, Token.Text, ';')",
  "(2111, Token.Text.Whitespace, ' ')",
  "(2112, Token.Text, 'then')",
  "(2116, Token.Text.NewLine, '\\n')",
  "(2117, Token.Text.Whitespace, '  ')",
  "(2119, Token.Text, 'setopt')",
  "(2125, Token.Text.Whitespace, ' ')",
  "(2126, Token.Text, 'NO_GLOB_SUBST')",
  "(2139, Token.Text.NewLine, '\\n')",
  "(2140, Token.Text, 'fi')",
  "(2142, Token.Text.NewLine, '\\n')",
  "(2143, Token.Comment.Single, '# Same for EGREP, and just to be sure, do LTCC as well')",
  "(2197, Token.Text.NewLine, '\\n')",
  "(2198, Token.Text, 'if')",
  "(2200, Token.Text.Whitespace, ' ')",
  "(2201, Token.Text, 'test')",
  "(2205, Token.Text.Whitespace, ' ')",
  "(2206, Token.Literal.String.Double, '\"X$EGREP\"')",
  "(2215, Token.Text.Whitespace, ' ')",
  "(2216, Token.Text, '=')",
  "(2217, Token.Text.Whitespace, ' ')",
  "(2218, Token.Text, 'X')",
  "(2219, Token.Text.Whitespace, ' ')",
  "(2220, Token.Text, ';')",
  "(2221, Token.Text.Whitespace, ' ')",
  "(2222, Token.Text, 'then')",
  "(2226, Token.Text.NewLine, '\\n')",
  "(2227, Token.Text.Whitespace, '    ')",
  "(2231, Token.Text, 'EGREP=egrep')",
  "(2242, Token.Text.NewLine, '\\n')",
  "(2243, Token.Text, 'fi')",
  "(2245, Token.Text.NewLine, '\\n')",
  "(2246, Token.Text, 'if')",
  "(2248, Token.Text.Whitespace, ' ')",
  "(2249, Token.Text, 'test')",
  "(2253, Token.Text.Whitespace, ' ')",
  "(2254, Token.Literal.String.Double, '\"X$LTCC\"')",
  "(2262, Token.Text.Whitespace, ' ')",
  "(2263, Token.Text, '=')",
  "(2264, Token.Text.Whitespace, ' ')",
  "(2265, Token.Text, 'X')",
  "(2266, Token.Text.Whitespace, ' ')",
  "(2267, Token.Text, ';')",
  "(2268, Token.Text.Whitespace, ' ')",
  "(2269, Token.Text, 'then')",
  "(2273, Token.Text.NewLine, '\\n')",
  "(2274, Token.Text.Whitespace, '    ')",
  "(2278, Token.Text, 'LTCC=${CC-gcc}')",
  "(2292, Token.Text.NewLine, '\\n')",
  "(2293, Token.Text, 'fi')",
  "(2295, Token.Text.NewLine, '\\n\\n')",
  "(2297, Token.Comment.Single, '# Check that we have a working $echo.')",
  "(2334, Token.Text.NewLine, '\\n')",
  "(2335, Token.Text, 'if')",
  "(2337, Token.Text.Whitespace, ' ')",
  "(2338, Token.Text, 'test')",
  "(2342, Token.Text.Whitespace, ' ')",
  "(2343, Token.Literal.String.Double, '\"X$1\"')",
  "(2348, Token.Text.Whitespace, ' ')",
  "(2349, Token.Text, '=')",
  "(2350, Token.Text.Whitespace, ' ')",
  "(2351, Token.Text, 'X--no-reexec;')",
  "(2364, Token.Text.Whitespace, ' ')",
  "(2365, Token.Text, 'then')",
  "(2369, Token.Text.NewLine, '\\n')",
  "(2370, Token.Text.Whitespace, '  ')",
  "(2372, Token.Comment.Single, '# Discard the --no-reexec flag, and continue.')",
  "(2417, Token.Text.NewLine, '\\n')",
  "(2418, Token.Text.Whitespace, '  ')",
  "(2420, Token.Text, 'shift')",
  "(2425, Token.Text.NewLine, '\\n')",
  "(2426, Token.Text, 'elif')",
  "(2430, Token.Text.Whitespace, ' ')",
  "(2431, Token.Text, 'test')",
  "(2435, Token.Text.Whitespace, ' ')",
  "(2436, Token.Literal.String.Double, '\"X$1\"')",
  "(2441, Token.Text.Whitespace, ' ')",
  "(2442, Token.Text, '=')",
  "(2443, Token.Text.Whitespace, ' ')",
  "(2444, Token.Text, 'X--fallback-echo;')",
  "(2461, Token.Text.Whitespace, ' ')",
  "(2462, Token.Text, 'then')",
  "(2466, Token.Text.NewLine, '\\n')",
  "(2467, Token.Text.Whitespace, '  ')",
  "(2469, Token.Comment.Single, '# Avoid inline document here, it may be left over')",
  "(2518, Token.Text.NewLine, '\\n')",
  "(2519, Token.Text.Whitespace, '  ')",
  "(2521, Token.Text, ':')",
  "(2522, Token.Text.NewLine, '\\n')",
  "(2523, Token.Text, 'elif')",
  "(2527, Token.Text.Whitespace, ' ')",
  "(2528, Token.Text, 'test')",
  "(2532, Token.Text.Whitespace, ' ')",
  "(2533, Token.Literal.String.Double, '\"X`($echo \\'\\\\t\\') 2>/dev/null`\"')",
  "(2562, Token.Text.Whitespace, ' ')",
  "(2563, Token.Text, '=')",
  "(2564, Token.Text.Whitespace, ' ')",
  "(2565, Token.Literal.String.Single, \"'X\\\\t'\")",
  "(2570, Token.Text, ';')",
  "(2571, Token.Text.Whitespace, ' ')",
  "(2572, Token.Text, 'then')",
  "(2576, Token.Text.NewLine, '\\n')",
  "(2577, Token.Text.Whitespace, '  ')",
  "(2579, Token.Comment.Single, '# Yippee, $echo works!')",
  "(2601, Token.Text.NewLine, '\\n')",
  "(2602, Token.Text.Whitespace, '  ')",
  "(2604, Token.Text, ':')",
  "(2605, Token.Text.NewLine, '\\n')",
  "(2606, Token.Text, 'else')",
  "(2610, Token.Text.NewLine, '\\n')",
  "(2611, Token.Text.Whitespace, '  ')",
  "(2613, Token.Comment.Single, '# Restart under the correct shell, and then maybe $echo will work.')",
  "(2679, Token.Text.NewLine, '\\n')",
  "(2680, Token.Text.Whitespace, '  ')",
  "(2682, Token.Text, 'exec')",
  "(2686, Token.Text.Whitespace, ' ')",
  "(2687, Token.Text, '$SHELL')",
  "(2693, Token.Text.Whitespace, ' ')",
  "(2694, Token.Literal.String.Double, '\"$progpath\"')",
  "(2705, Token.Text.Whitespace, ' ')",
  "(2706, Token.Text, '--no-reexec')",
  "(2717, Token.Text.Whitespace, ' ')",
  "(2718, Token.Text, '${1+\"$@\"}')",
  "(2727, Token.Text.NewLine, '\\n')",
  "(2728, Token.Text, 'fi')",
  "(2730, Token.Text.NewLine, '\\n\\n')",
  "(2732, Token.Text, 'if')",
  "(2734, Token.Text.Whitespace, ' ')",
  "(2735, Token.Text, 'test')",
  "(2739, Token.Text.Whitespace, ' ')",
  "(2740, Token.Literal.String.Double, '\"X$1\"')",
  "(2745, Token.Text.Whitespace, ' ')",
  "(2746, Token.Text, '=')",
  "(2747, Token.Text.Whitespace, ' ')",
  "(2748, Token.Text, 'X--fallback-echo;')",
  "(2765, Token.Text.Whitespace, ' ')",
  "(2766, Token.Text, 'then')",
  "(2770, Token.Text.NewLine, '\\n')",
  "(2771, Token.Text.Whitespace, '  ')",
  "(2773, Token.Comment.Single, '# used as fallback echo')",
  "(2796, Token.Text.NewLine, '\\n')",
  "(2797, Token.Text.Whitespace, '  ')",
  "(2799, Token.Text, 'shift')",
  "(2804, Token.Text.NewLine, '\\n')",
  "(2805, Token.Text.Whitespace, '  ')",
  "(2807, Token.Text, 'cat')",
  "(2810, Token.Text.Whitespace, ' ')",
  "(2811, Token.Text, '<<EOF')",
  "(2816, Token.Text.NewLine, '\\n')",
  "(2817, Token.Text, '$*')",
  "(2819, Token.Text.NewLine, '\\n')",
  "(2820, Token.Text, 'EOF')",
  "(2823, Token.Text.NewLine, '\\n')",
  "(2824, Token.Text.Whitespace, '  ')",
  "(2826, Token.Text, 'exit')",
  "(2830, Token.Text.Whitespace, ' ')",
  "(2831, Token.Text, '$EXIT_SUCCESS')",
  "(2844, Token.Text.NewLine, '\\n')",
  "(2845, Token.Text, 'fi')",
  "(2847, Token.Text.NewLine, '\\n\\n')",
  "(2849, Token.Name.Variable, 'default_mode')",
  "(2861, Token.Operator.Equal, '=')",
  "(2862, Token.Text.NewLine, '\\n')",
  "(2863, Token.Name.Variable, 'help')",
  "(2867, Token.Operator.Equal, '=')",
  "(2868, Token.Literal.String.Double, '\"Try \\\\`$progname --help\\' for more information.\"')",
  "(2915, Token.Text.NewLine, '\\n')",
  "(2916, Token.Name.Variable, 'magic')",
  "(2921, Token.Operator.Equal, '=')",
  "(2922, Token.Literal.String.Double, '\"%%%MAGIC variable%%%\"')",
  "(2944, Token.Text.NewLine, '\\n')",
  "(2945, Token.Name.Variable, 'mkdir')",
  "(2950, Token.Operator.Equal, '=')",
  "(2951, Token.Literal.String.Double, '\"mkdir\"')",
  "(2958, Token.Text.NewLine, '\\n')",
  "(2959, Token.Name.Variable, 'mv')",
  "(2961, Token.Operator.Equal, '=')",
  "(2962, Token.Literal.String.Double, '\"mv -f\"')",
  "(2969, Token.Text.NewLine, '\\n')",
  "(2970, Token.Name.Variable, 'rm')",
  "(2972, Token.Operator.Equal, '=')",
  "(2973, Token.Literal.String.Double, '\"rm -f\"')",
  "(2980, Token.Text.NewLine, '\\n\\n')",
  "(2982, Token.Comment.Single, '# Sed substitution that helps us do robust quoting.  It backslashifies')",
  "(3052, Token.Text.NewLine, '\\n')",
  "(3053, Token.Comment.Single, '# metacharacters that are still active within double-quoted strings.')",
  "(3121, Token.Text.NewLine, '\\n')",
  "(3122, Token.Name.Variable, 'Xsed')",
  "(3126, Token.Operator.Equal, '=')",
  "(3127, Token.Literal.String.Double, '\"${SED}\"')",
  "(3135, Token.Literal.String.Single, \"' -e 1s/^X//'\")",
  "(3148, Token.Text.NewLine, '\\n')",
  "(3149, Token.Name.Variable, 'sed_quote_subst')",
  "(3164, Token.Operator.Equal, '=')",
  "(3165, Token.Literal.String.Single, '\\'s/\\\\([\\\\\\\\`\\\\\\\\\"$\\\\\\\\\\\\\\\\]\\\\)/\\\\\\\\\\\\1/g\\'')",
  "(3193, Token.Text.NewLine, '\\n')",
  "(3194, Token.Comment.Single, '# test EBCDIC or ASCII')",
  "(3216, Token.Text.NewLine, '\\n')",
  "(3217, Token.Text, 'case')",
  "(3221, Token.Text.Whitespace, ' ')",
  "(3222, Token.Text, '`echo')",
  "(3227, Token.Text.Whitespace, ' ')",
  "(3228, Token.Text, 'X|tr')",
  "(3232, Token.Text.Whitespace, ' ')",
  "(3233, Token.Text, 'X')",
  "(3234, Token.Text.Whitespace, ' ')",
  "(3235, Token.Literal.String.Single, \"'\\\\101'\")",
  "(3241, Token.Text, '`')",
  "(3242, Token.Text.Whitespace, ' ')",
  "(3243, Token.Text, 'in')",
  "(3245, Token.Text.NewLine, '\\n')",
  "(3246, Token.Text.Whitespace, ' ')",
  "(3247, Token.Text, 'A)')",
  "(3249, Token.Text.Whitespace, ' ')",
  "(3250, Token.Comment.Single, '# ASCII based system')",
  "(3270, Token.Text.NewLine, '\\n')",
  "(3271, Token.Text.Whitespace, '    ')",
  "(3275, Token.Comment.Single, '# \\\\n is not interpreted correctly by Solaris 8 /usr/ucb/tr')",
  "(3333, Token.Text.NewLine, '\\n')",
  "(3334, Token.Text.Whitespace, '  ')",
  "(3336, Token.Text, \"SP2NL='tr\")",
  "(3345, Token.Text.Whitespace, ' ')",
  "(3346, Token.Text, '\\\\040')",
  "(3350, Token.Text.Whitespace, ' ')",
  "(3351, Token.Text, \"\\\\012'\")",
  "(3356, Token.Text.NewLine, '\\n')",
  "(3357, Token.Text.Whitespace, '  ')",
  "(3359, Token.Text, \"NL2SP='tr\")",
  "(3368, Token.Text.Whitespace, ' ')",
  "(3369, Token.Text, '\\\\015\\\\012')",
  "(3377, Token.Text.Whitespace, ' ')",
  "(3378, Token.Text, \"\\\\040\\\\040'\")",
  "(3387, Token.Text.NewLine, '\\n')",
  "(3388, Token.Text.Whitespace, '  ')",
  "(3390, Token.Text, ';;')",
  "(3392, Token.Text.NewLine, '\\n')",
  "(3393, Token.Text.Whitespace, ' ')",
  "(3394, Token.Text, '*)')",
  "(3396, Token.Text.Whitespace, ' ')",
  "(3397, Token.Comment.Single, '# EBCDIC based system')",
  "(3418, Token.Text.NewLine, '\\n')",
  "(3419, Token.Text.Whitespace, '  ')",
  "(3421, Token.Text, \"SP2NL='tr\")",
  "(3430, Token.Text.Whitespace, ' ')",
  "(3431, Token.Text, '\\\\100')",
  "(3435, Token.Text.Whitespace, ' ')",
  "(3436, Token.Text, \"\\\\n'\")",
  "(3439, Token.Text.NewLine, '\\n')",
  "(3440, Token.Text.Whitespace, '  ')",
  "(3442, Token.Text, \"NL2SP='tr\")",
  "(3451, Token.Text.Whitespace, ' ')",
  "(3452, Token.Text, '\\\\r\\\\n')",
  "(3456, Token.Text.Whitespace, ' ')",
  "(3457, Token.Text, \"\\\\100\\\\100'\")",
  "(3466, Token.Text.NewLine, '\\n')",
  "(3467, Token.Text.Whitespace, '  ')",
  "(3469, Token.Text, ';;')",
  "(3471, Token.Text.NewLine, '\\n')",
  "(3472, Token.Text, 'esac')",
  "(3476, Token.Text.NewLine, '\\n\\n')",
  "(3478, Token.Comment.Single, '# NLS nuisances.')",
  "(3494, Token.Text.NewLine, '\\n')",
  "(3495, Token.Comment.Single, '# Only set LANG and LC_ALL to C if already set.')",
  "(3542, Token.Text.NewLine, '\\n')",
  "(3543, Token.Comment.Single, '# These must not be set unconditionally because not all systems understand')",
  "(3617, Token.Text.NewLine, '\\n')",
  "(3618, Token.Comment.Single, '# e.g. LANG=C (notably SCO).')",
  "(3646, Token.Text.NewLine, '\\n')",
  "(3647, Token.Comment.Single, '# We save the old values to restore during execute mode.')",
  "(3703, Token.Text.NewLine, '\\n')",
  "(3704, Token.Text, 'if')",
  "(3706, Token.Text.Whitespace, ' ')",
  "(3707, Token.Text, 'test')",
  "(3711, Token.Text.Whitespace, ' ')",
  "(3712, Token.Literal.String.Double, '\"${LC_ALL+set}\"')",
  "(3727, Token.Text.Whitespace, ' ')",
  "(3728, Token.Text, '=')",
  "(3729, Token.Text.Whitespace, ' ')",
  "(3730, Token.Text, 'set;')",
  "(3734, Token.Text.Whitespace, ' ')",
  "(3735, Token.Text, 'then')",
  "(3739, Token.Text.NewLine, '\\n')",
  "(3740, Token.Text.Whitespace, '  ')",
  "(3742, Token.Text, 'save_LC_ALL=\"$LC_ALL\";')",
  "(3764, Token.Text.Whitespace, ' ')",
  "(3765, Token.Text, 'LC_ALL=C;')",
  "(3774, Token.Text.Whitespace, ' ')",
  "(3775, Token.Text, 'export')",
  "(3781, Token.Text.Whitespace, ' ')",
  "(3782, Token.Text, 'LC_ALL')",
  "(3788, Token.Text.NewLine, '\\n')",
  "(3789, Token.Text, 'fi')",
  "(3791, Token.Text.NewLine, '\\n')",
  "(3792, Token.Text, 'if')",
  "(3794, Token.Text.Whitespace, ' ')",
  "(3795, Token.Text, 'test')",
  "(3799, Token.Text.Whitespace, ' ')",
  "(3800, Token.Literal.String.Double, '\"${LANG+set}\"')",
  "(3813, Token.Text.Whitespace, ' ')",
  "(3814, Token.Text, '=')",
  "(3815, Token.Text.Whitespace, ' ')",
  "(3816, Token.Text, 'set;')",
  "(3820, Token.Text.Whitespace, ' ')",
  "(3821, Token.Text, 'then')",
  "(3825, Token.Text.NewLine, '\\n')",
  "(3826, Token.Text.Whitespace, '  ')",
  "(3828, Token.Text, 'save_LANG=\"$LANG\";')",
  "(3846, Token.Text.Whitespace, ' ')",
  "(3847, Token.Text, 'LANG=C;')",
  "(3854, Token.Text.Whitespace, ' ')",
  "(3855, Token.Text, 'export')",
  "(3861, Token.Text.Whitespace, ' ')",
  "(3862, Token.Text, 'LANG')",
  "(3866, Token.Text.NewLine, '\\n')",
  "(3867, Token.Text, 'fi')",
  "(3869, Token.Text.NewLine, '\\n\\n')",
  "(3871, Token.Comment.Single, '# Make sure IFS has a sensible default')",
  "(3909, Token.Text.NewLine, '\\n')",
  "(3910, Token.Name.Variable, 'lt_nl')",
  "(3915, Token.Operator.Equal, '=')",
  "(3916, Token.Literal.String.Single, \"'\\n'\")",
  "(3919, Token.Text.NewLine, '\\n')",
  "(3920, Token.Name.Variable, 'IFS')",
  "(3923, Token.Operator.Equal, '=')",
  "(3924, Token.Literal.String.Double, '\" \\t$lt_nl\"')",
  "(3934, Token.Text.NewLine, '\\n\\n')",
  "(3936, Token.Text, 'if')",
  "(3938, Token.Text.Whitespace, ' ')",
  "(3939, Token.Text, 'test')",
  "(3943, Token.Text.Whitespace, ' ')",
  "(3944, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(3965, Token.Text.Whitespace, ' ')",
  "(3966, Token.Text, '!=')",
  "(3968, Token.Text.Whitespace, ' ')",
  "(3969, Token.Text, 'yes')",
  "(3972, Token.Text.Whitespace, ' ')",
  "(3973, Token.Text, '&&')",
  "(3975, Token.Text.Whitespace, ' ')",
  "(3976, Token.Text, 'test')",
  "(3980, Token.Text.Whitespace, ' ')",
  "(3981, Token.Literal.String.Double, '\"$build_old_libs\"')",
  "(3998, Token.Text.Whitespace, ' ')",
  "(3999, Token.Text, '!=')",
  "(4001, Token.Text.Whitespace, ' ')",
  "(4002, Token.Text, 'yes;')",
  "(4006, Token.Text.Whitespace, ' ')",
  "(4007, Token.Text, 'then')",
  "(4011, Token.Text.NewLine, '\\n')",
  "(4012, Token.Text.Whitespace, '  ')",
  "(4014, Token.Text, '$echo')",
  "(4019, Token.Text.Whitespace, ' ')",
  "(4020, Token.Literal.String.Double, '\"$modename: not configured to build any kind of library\"')",
  "(4076, Token.Text.Whitespace, ' ')",
  "(4077, Token.Text, '1>&2')",
  "(4081, Token.Text.NewLine, '\\n')",
  "(4082, Token.Text.Whitespace, '  ')",
  "(4084, Token.Text, '$echo')",
  "(4089, Token.Text.Whitespace, ' ')",
  "(4090, Token.Literal.String.Double, '\"Fatal configuration error.  See the $PACKAGE docs for more information.\"')",
  "(4163, Token.Text.Whitespace, ' ')",
  "(4164, Token.Text, '1>&2')",
  "(4168, Token.Text.NewLine, '\\n')",
  "(4169, Token.Text.Whitespace, '  ')",
  "(4171, Token.Text, 'exit')",
  "(4175, Token.Text.Whitespace, ' ')",
  "(4176, Token.Text, '$EXIT_FAILURE')",
  "(4189, Token.Text.NewLine, '\\n')",
  "(4190, Token.Text, 'fi')",
  "(4192, Token.Text.NewLine, '\\n\\n')",
  "(4194, Token.Comment.Single, '# Global variables.')",
  "(4213, Token.Text.NewLine, '\\n')",
  "(4214, Token.Name.Variable, 'mode')",
  "(4218, Token.Operator.Equal, '=')",
  "(4219, Token.Text, '$default_mode')",
  "(4232, Token.Text.NewLine, '\\n')",
  "(4233, Token.Name.Variable, 'nonopt')",
  "(4239, Token.Operator.Equal, '=')",
  "(4240, Token.Text.NewLine, '\\n')",
  "(4241, Token.Name.Variable, 'prev')",
  "(4245, Token.Operator.Equal, '=')",
  "(4246, Token.Text.NewLine, '\\n')",
  "(4247, Token.Name.Variable, 'prevopt')",
  "(4254, Token.Operator.Equal, '=')",
  "(4255, Token.Text.NewLine, '\\n')",
  "(4256, Token.Name.Variable, 'run')",
  "(4259, Token.Operator.Equal, '=')",
  "(4260, Token.Text.NewLine, '\\n')",
  "(4261, Token.Name.Variable, 'show')",
  "(4265, Token.Operator.Equal, '=')",
  "(4266, Token.Literal.String.Double, '\"$echo\"')",
  "(4273, Token.Text.NewLine, '\\n')",
  "(4274, Token.Name.Variable, 'show_help')",
  "(4283, Token.Operator.Equal, '=')",
  "(4284, Token.Text.NewLine, '\\n')",
  "(4285, Token.Name.Variable, 'execute_dlfiles')",
  "(4300, Token.Operator.Equal, '=')",
  "(4301, Token.Text.NewLine, '\\n')",
  "(4302, Token.Name.Variable, 'duplicate_deps')",
  "(4316, Token.Operator.Equal, '=')",
  "(4317, Token.Text, 'no')",
  "(4319, Token.Text.NewLine, '\\n')",
  "(4320, Token.Name.Variable, 'preserve_args')",
  "(4333, Token.Operator.Equal, '=')",
  "(4334, Token.Text.NewLine, '\\n')",
  "(4335, Token.Name.Variable, 'lo2o')",
  "(4339, Token.Operator.Equal, '=')",
  "(4340, Token.Literal.String.Double, '\"s/\\\\\\\\.lo\\\\$/.${objext}/\"')",
  "(4363, Token.Text.NewLine, '\\n')",
  "(4364, Token.Name.Variable, 'o2lo')",
  "(4368, Token.Operator.Equal, '=')",
  "(4369, Token.Literal.String.Double, '\"s/\\\\\\\\.${objext}\\\\$/.lo/\"')",
  "(4392, Token.Text.NewLine, '\\n\\n')",
  "(4394, Token.Text, 'if')",
  "(4396, Token.Text.Whitespace, ' ')",
  "(4397, Token.Text, 'test')",
  "(4401, Token.Text.Whitespace, ' ')",
  "(4402, Token.Text, '-z')",
  "(4404, Token.Text.Whitespace, ' ')",
  "(4405, Token.Literal.String.Double, '\"$max_cmd_len\"')",
  "(4419, Token.Text, ';')",
  "(4420, Token.Text.Whitespace, ' ')",
  "(4421, Token.Text, 'then')",
  "(4425, Token.Text.NewLine, '\\n')",
  "(4426, Token.Text.Whitespace, '  ')",
  "(4428, Token.Text, 'i=0')",
  "(4431, Token.Text.NewLine, '\\n')",
  "(4432, Token.Text.Whitespace, '  ')",
  "(4434, Token.Text, 'testring=\"ABCD\"')",
  "(4449, Token.Text.NewLine, '\\n')",
  "(4450, Token.Text.Whitespace, '  ')",
  "(4452, Token.Text, 'new_result=')",
  "(4463, Token.Text.NewLine, '\\n')",
  "(4464, Token.Text.Whitespace, '  \\n  ')",
  "(4469, Token.Comment.Single, \"# If test is not a shell built-in, we'll probably end up computing a\")",
  "(4537, Token.Text.NewLine, '\\n')",
  "(4538, Token.Text.Whitespace, '  ')",
  "(4540, Token.Comment.Single, '# maximum length that is only half of the actual maximum length, but')",
  "(4608, Token.Text.NewLine, '\\n')",
  "(4609, Token.Text.Whitespace, '  ')",
  "(4611, Token.Comment.Single, \"# we can't tell.\")",
  "(4627, Token.Text.NewLine, '\\n')",
  "(4628, Token.Text.Whitespace, '  ')",
  "(4630, Token.Text, 'while')",
  "(4635, Token.Text.Whitespace, ' ')",
  "(4636, Token.Text, '(test')",
  "(4641, Token.Text.Whitespace, ' ')",
  "(4642, Token.Literal.String.Double, '\"X\"')",
  "(4645, Token.Text, '`$SHELL')",
  "(4652, Token.Text.Whitespace, ' ')",
  "(4653, Token.Text, '$0')",
  "(4655, Token.Text.Whitespace, ' ')",
  "(4656, Token.Text, '--fallback-echo')",
  "(4671, Token.Text.Whitespace, ' ')",
  "(4672, Token.Literal.String.Double, '\"X$testring\"')",
  "(4684, Token.Text.Whitespace, ' ')",
  "(4685, Token.Text, '2>/dev/null`')",
  "(4697, Token.Text.Whitespace, ' ')",
  "(4698, Token.Text, '\\\\')",
  "(4699, Token.Text.NewLine, '\\n')",
  "(4700, Token.Text.Whitespace, '             ')",
  "(4713, Token.Text, '=')",
  "(4714, Token.Text.Whitespace, ' ')",
  "(4715, Token.Literal.String.Double, '\"XX$testring\"')",
  "(4728, Token.Text, ')')",
  "(4729, Token.Text.Whitespace, ' ')",
  "(4730, Token.Text, '>/dev/null')",
  "(4740, Token.Text.Whitespace, ' ')",
  "(4741, Token.Text, '2>&1')",
  "(4745, Token.Text.Whitespace, ' ')",
  "(4746, Token.Text, '&&')",
  "(4748, Token.Text.NewLine, '\\n')",
  "(4749, Token.Text.Whitespace, '          ')",
  "(4759, Token.Text, 'new_result=`expr')",
  "(4775, Token.Text.Whitespace, ' ')",
  "(4776, Token.Literal.String.Double, '\"X$testring\"')",
  "(4788, Token.Text.Whitespace, ' ')",
  "(4789, Token.Text, ':')",
  "(4790, Token.Text.Whitespace, ' ')",
  "(4791, Token.Literal.String.Double, '\".*\"')",
  "(4795, Token.Text.Whitespace, ' ')",
  "(4796, Token.Text, '2>&1`')",
  "(4801, Token.Text.Whitespace, ' ')",
  "(4802, Token.Text, '&&')",
  "(4804, Token.Text.NewLine, '\\n')",
  "(4805, Token.Text.Whitespace, '          ')",
  "(4815, Token.Text, 'max_cmd_len=\"$new_result\"')",
  "(4840, Token.Text.Whitespace, ' ')",
  "(4841, Token.Text, '&&')",
  "(4843, Token.Text.NewLine, '\\n')",
  "(4844, Token.Text.Whitespace, '          ')",
  "(4854, Token.Text, 'test')",
  "(4858, Token.Text.Whitespace, ' ')",
  "(4859, Token.Literal.String.Double, '\"$i\"')",
  "(4863, Token.Text.Whitespace, ' ')",
  "(4864, Token.Text, '!=')",
  "(4866, Token.Text.Whitespace, ' ')",
  "(4867, Token.Text, '17')",
  "(4869, Token.Text.Whitespace, ' ')",
  "(4870, Token.Comment.Single, '# 1/2 MB should be enough')",
  "(4895, Token.Text.NewLine, '\\n')",
  "(4896, Token.Text.Whitespace, '  ')",
  "(4898, Token.Text, 'do')",
  "(4900, Token.Text.NewLine, '\\n')",
  "(4901, Token.Text.Whitespace, '    ')",
  "(4905, Token.Text, 'i=`expr')",
  "(4912, Token.Text.Whitespace, ' ')",
  "(4913, Token.Text, '$i')",
  "(4915, Token.Text.Whitespace, ' ')",
  "(4916, Token.Text, '+')",
  "(4917, Token.Text.Whitespace, ' ')",
  "(4918, Token.Text, '1`')",
  "(4920, Token.Text.NewLine, '\\n')",
  "(4921, Token.Text.Whitespace, '    ')",
  "(4925, Token.Text, 'testring=\"$testring$testring\"')",
  "(4954, Token.Text.NewLine, '\\n')",
  "(4955, Token.Text.Whitespace, '  ')",
  "(4957, Token.Text, 'done')",
  "(4961, Token.Text.NewLine, '\\n')",
  "(4962, Token.Text.Whitespace, '  ')",
  "(4964, Token.Text, 'testring=')",
  "(4973, Token.Text.NewLine, '\\n')",
  "(4974, Token.Text.Whitespace, '  ')",
  "(4976, Token.Comment.Single, '# Add a significant safety factor because C++ compilers can tack on massive')",
  "(5051, Token.Text.NewLine, '\\n')",
  "(5052, Token.Text.Whitespace, '  ')",
  "(5054, Token.Comment.Single, '# amounts of additional arguments before passing them to the linker.')",
  "(5122, Token.Text.NewLine, '\\n')",
  "(5123, Token.Text.Whitespace, '  ')",
  "(5125, Token.Comment.Single, '# It appears as though 1/2 is a usable value.')",
  "(5170, Token.Text.NewLine, '\\n')",
  "(5171, Token.Text.Whitespace, '  ')",
  "(5173, Token.Text, 'max_cmd_len=`expr')",
  "(5190, Token.Text.Whitespace, ' ')",
  "(5191, Token.Text, '$max_cmd_len')",
  "(5203, Token.Text.Whitespace, ' ')",
  "(5204, Token.Text, '\\\\/')",
  "(5206, Token.Text.Whitespace, ' ')",
  "(5207, Token.Text, '2`')",
  "(5209, Token.Text.NewLine, '\\n')",
  "(5210, Token.Text, 'fi')",
  "(5212, Token.Text.NewLine, '\\n\\n')",
  "(5214, Token.Comment.Single, '#####################################')",
  "(5251, Token.Text.NewLine, '\\n')",
  "(5252, Token.Comment.Single, '# Shell function definitions:')",
  "(5281, Token.Text.NewLine, '\\n')",
  "(5282, Token.Comment.Single, '# This seems to be the best place for them')",
  "(5324, Token.Text.NewLine, '\\n\\n')",
  "(5326, Token.Comment.Single, '# func_mktempdir [string]')",
  "(5351, Token.Text.NewLine, '\\n')",
  "(5352, Token.Comment.Single, \"# Make a temporary directory that won't clash with other running\")",
  "(5416, Token.Text.NewLine, '\\n')",
  "(5417, Token.Comment.Single, '# libtool processes, and avoids race conditions if possible.  If')",
  "(5481, Token.Text.NewLine, '\\n')",
  "(5482, Token.Comment.Single, '# given, STRING is the basename for that directory.')",
  "(5533, Token.Text.NewLine, '\\n')",
  "(5534, Token.Text, 'func_mktempdir')",
  "(5548, Token.Text.Whitespace, ' ')",
  "(5549, Token.Text, '()')",
  "(5551, Token.Text.NewLine, '\\n')",
  "(5552, Token.Text, '{')",
  "(5553, Token.Text.NewLine, '\\n')",
  "(5554, Token.Text.Whitespace, '    ')",
  "(5558, Token.Text, 'my_template=\"${TMPDIR-/tmp}/${1-$progname}\"')",
  "(5601, Token.Text.NewLine, '\\n\\n')",
  "(5603, Token.Text.Whitespace, '    ')",
  "(5607, Token.Text, 'if')",
  "(5609, Token.Text.Whitespace, ' ')",
  "(5610, Token.Text, 'test')",
  "(5614, Token.Text.Whitespace, ' ')",
  "(5615, Token.Literal.String.Double, '\"$run\"')",
  "(5621, Token.Text.Whitespace, ' ')",
  "(5622, Token.Text, '=')",
  "(5623, Token.Text.Whitespace, ' ')",
  "(5624, Token.Literal.String.Double, '\":\"')",
  "(5627, Token.Text, ';')",
  "(5628, Token.Text.Whitespace, ' ')",
  "(5629, Token.Text, 'then')",
  "(5633, Token.Text.NewLine, '\\n')",
  "(5634, Token.Text.Whitespace, '      ')",
  "(5640, Token.Comment.Single, \"# Return a directory name, but don't create it in dry-run mode\")",
  "(5702, Token.Text.NewLine, '\\n')",
  "(5703, Token.Text.Whitespace, '      ')",
  "(5709, Token.Text, 'my_tmpdir=\"${my_template}-$$\"')",
  "(5738, Token.Text.NewLine, '\\n')",
  "(5739, Token.Text.Whitespace, '    ')",
  "(5743, Token.Text, 'else')",
  "(5747, Token.Text.NewLine, '\\n\\n')",
  "(5749, Token.Text.Whitespace, '      ')",
  "(5755, Token.Comment.Single, '# If mktemp works, use that first and foremost')",
  "(5801, Token.Text.NewLine, '\\n')",
  "(5802, Token.Text.Whitespace, '      ')",
  "(5808, Token.Text, 'my_tmpdir=`mktemp')",
  "(5825, Token.Text.Whitespace, ' ')",
  "(5826, Token.Text, '-d')",
  "(5828, Token.Text.Whitespace, ' ')",
  "(5829, Token.Literal.String.Double, '\"${my_template}-XXXXXXXX\"')",
  "(5854, Token.Text.Whitespace, ' ')",
  "(5855, Token.Text, '2>/dev/null`')",
  "(5867, Token.Text.NewLine, '\\n\\n')",
  "(5869, Token.Text.Whitespace, '      ')",
  "(5875, Token.Text, 'if')",
  "(5877, Token.Text.Whitespace, ' ')",
  "(5878, Token.Text, 'test')",
  "(5882, Token.Text.Whitespace, ' ')",
  "(5883, Token.Text, '!')",
  "(5884, Token.Text.Whitespace, ' ')",
  "(5885, Token.Text, '-d')",
  "(5887, Token.Text.Whitespace, ' ')",
  "(5888, Token.Literal.String.Double, '\"$my_tmpdir\"')",
  "(5900, Token.Text, ';')",
  "(5901, Token.Text.Whitespace, ' ')",
  "(5902, Token.Text, 'then')",
  "(5906, Token.Text.NewLine, '\\n')",
  "(5907, Token.Text.Whitespace, '\\t')",
  "(5908, Token.Comment.Single, '# Failing that, at least try and use $RANDOM to avoid a race')",
  "(5968, Token.Text.NewLine, '\\n')",
  "(5969, Token.Text.Whitespace, '\\t')",
  "(5970, Token.Text, 'my_tmpdir=\"${my_template}-${RANDOM-0}$$\"')",
  "(6010, Token.Text.NewLine, '\\n\\n')",
  "(6012, Token.Text.Whitespace, '\\t')",
  "(6013, Token.Text, 'save_mktempdir_umask=`umask`')",
  "(6041, Token.Text.NewLine, '\\n')",
  "(6042, Token.Text.Whitespace, '\\t')",
  "(6043, Token.Text, 'umask')",
  "(6048, Token.Text.Whitespace, ' ')",
  "(6049, Token.Text, '0077')",
  "(6053, Token.Text.NewLine, '\\n')",
  "(6054, Token.Text.Whitespace, '\\t')",
  "(6055, Token.Text, '$mkdir')",
  "(6061, Token.Text.Whitespace, ' ')",
  "(6062, Token.Literal.String.Double, '\"$my_tmpdir\"')",
  "(6074, Token.Text.NewLine, '\\n')",
  "(6075, Token.Text.Whitespace, '\\t')",
  "(6076, Token.Text, 'umask')",
  "(6081, Token.Text.Whitespace, ' ')",
  "(6082, Token.Text, '$save_mktempdir_umask')",
  "(6103, Token.Text.NewLine, '\\n')",
  "(6104, Token.Text.Whitespace, '      ')",
  "(6110, Token.Text, 'fi')",
  "(6112, Token.Text.NewLine, '\\n\\n')",
  "(6114, Token.Text.Whitespace, '      ')",
  "(6120, Token.Comment.Single, \"# If we're not in dry-run mode, bomb out on failure\")",
  "(6171, Token.Text.NewLine, '\\n')",
  "(6172, Token.Text.Whitespace, '      ')",
  "(6178, Token.Text, 'test')",
  "(6182, Token.Text.Whitespace, ' ')",
  "(6183, Token.Text, '-d')",
  "(6185, Token.Text.Whitespace, ' ')",
  "(6186, Token.Literal.String.Double, '\"$my_tmpdir\"')",
  "(6198, Token.Text.Whitespace, ' ')",
  "(6199, Token.Text, '||')",
  "(6201, Token.Text.Whitespace, ' ')",
  "(6202, Token.Text, '{')",
  "(6203, Token.Text.NewLine, '\\n')",
  "(6204, Token.Text.Whitespace, '        ')",
  "(6212, Token.Text, '$echo')",
  "(6217, Token.Text.Whitespace, ' ')",
  "(6218, Token.Literal.String.Double, '\"cannot create temporary directory \\\\`$my_tmpdir\\'\"')",
  "(6267, Token.Text.Whitespace, ' ')",
  "(6268, Token.Text, '1>&2')",
  "(6272, Token.Text.NewLine, '\\n')",
  "(6273, Token.Text.Whitespace, '\\t')",
  "(6274, Token.Text, 'exit')",
  "(6278, Token.Text.Whitespace, ' ')",
  "(6279, Token.Text, '$EXIT_FAILURE')",
  "(6292, Token.Text.NewLine, '\\n')",
  "(6293, Token.Text.Whitespace, '      ')",
  "(6299, Token.Text, '}')",
  "(6300, Token.Text.NewLine, '\\n')",
  "(6301, Token.Text.Whitespace, '    ')",
  "(6305, Token.Text, 'fi')",
  "(6307, Token.Text.NewLine, '\\n\\n')",
  "(6309, Token.Text.Whitespace, '    ')",
  "(6313, Token.Text, '$echo')",
  "(6318, Token.Text.Whitespace, ' ')",
  "(6319, Token.Literal.String.Double, '\"X$my_tmpdir\"')",
  "(6332, Token.Text.Whitespace, ' ')",
  "(6333, Token.Text, '|')",
  "(6334, Token.Text.Whitespace, ' ')",
  "(6335, Token.Text, '$Xsed')",
  "(6340, Token.Text.NewLine, '\\n')",
  "(6341, Token.Text, '}')",
  "(6342, Token.Text.NewLine, '\\n\\n\\n')",
  "(6345, Token.Comment.Single, '# func_win32_libid arg')",
  "(6367, Token.Text.NewLine, '\\n')",
  "(6368, Token.Comment.Single, \"# return the library type of file 'arg'\")",
  "(6407, Token.Text.NewLine, '\\n')",
  "(6408, Token.Comment.Single, '#')",
  "(6409, Token.Text.NewLine, '\\n')",
  "(6410, Token.Comment.Single, '# Need a lot of goo to handle *both* DLLs and import libs')",
  "(6467, Token.Text.NewLine, '\\n')",
  "(6468, Token.Comment.Single, \"# Has to be a shell function in order to 'eat' the argument\")",
  "(6527, Token.Text.NewLine, '\\n')",
  "(6528, Token.Comment.Single, '# that is supplied when $file_magic_command is called.')",
  "(6582, Token.Text.NewLine, '\\n')",
  "(6583, Token.Text, 'func_win32_libid')",
  "(6599, Token.Text.Whitespace, ' ')",
  "(6600, Token.Text, '()')",
  "(6602, Token.Text.NewLine, '\\n')",
  "(6603, Token.Text, '{')",
  "(6604, Token.Text.NewLine, '\\n')",
  "(6605, Token.Text.Whitespace, '  ')",
  "(6607, Token.Text, 'win32_libid_type=\"unknown\"')",
  "(6633, Token.Text.NewLine, '\\n')",
  "(6634, Token.Text.Whitespace, '  ')",
  "(6636, Token.Text, 'win32_fileres=`file')",
  "(6655, Token.Text.Whitespace, ' ')",
  "(6656, Token.Text, '-L')",
  "(6658, Token.Text.Whitespace, ' ')",
  "(6659, Token.Text, '$1')",
  "(6661, Token.Text.Whitespace, ' ')",
  "(6662, Token.Text, '2>/dev/null`')",
  "(6674, Token.Text.NewLine, '\\n')",
  "(6675, Token.Text.Whitespace, '  ')",
  "(6677, Token.Text, 'case')",
  "(6681, Token.Text.Whitespace, ' ')",
  "(6682, Token.Text, '$win32_fileres')",
  "(6696, Token.Text.Whitespace, ' ')",
  "(6697, Token.Text, 'in')",
  "(6699, Token.Text.NewLine, '\\n')",
  "(6700, Token.Text.Whitespace, '  ')",
  "(6702, Token.Text, '*ar\\\\')",
  "(6706, Token.Text.Whitespace, ' ')",
  "(6707, Token.Text, 'archive\\\\')",
  "(6715, Token.Text.Whitespace, ' ')",
  "(6716, Token.Text, 'import\\\\')",
  "(6723, Token.Text.Whitespace, ' ')",
  "(6724, Token.Text, 'library*)')",
  "(6733, Token.Text.Whitespace, ' ')",
  "(6734, Token.Comment.Single, '# definitely import')",
  "(6753, Token.Text.NewLine, '\\n')",
  "(6754, Token.Text.Whitespace, '    ')",
  "(6758, Token.Text, 'win32_libid_type=\"x86')",
  "(6779, Token.Text.Whitespace, ' ')",
  "(6780, Token.Text, 'archive')",
  "(6787, Token.Text.Whitespace, ' ')",
  "(6788, Token.Text, 'import\"')",
  "(6795, Token.Text.NewLine, '\\n')",
  "(6796, Token.Text.Whitespace, '    ')",
  "(6800, Token.Text, ';;')",
  "(6802, Token.Text.NewLine, '\\n')",
  "(6803, Token.Text.Whitespace, '  ')",
  "(6805, Token.Text, '*ar\\\\')",
  "(6809, Token.Text.Whitespace, ' ')",
  "(6810, Token.Text, 'archive*)')",
  "(6819, Token.Text.Whitespace, ' ')",
  "(6820, Token.Comment.Single, '# could be an import, or static')",
  "(6851, Token.Text.NewLine, '\\n')",
  "(6852, Token.Text.Whitespace, '    ')",
  "(6856, Token.Text, 'if')",
  "(6858, Token.Text.Whitespace, ' ')",
  "(6859, Token.Text, 'eval')",
  "(6863, Token.Text.Whitespace, ' ')",
  "(6864, Token.Text, '$OBJDUMP')",
  "(6872, Token.Text.Whitespace, ' ')",
  "(6873, Token.Text, '-f')",
  "(6875, Token.Text.Whitespace, ' ')",
  "(6876, Token.Text, '$1')",
  "(6878, Token.Text.Whitespace, ' ')",
  "(6879, Token.Text, '|')",
  "(6880, Token.Text.Whitespace, ' ')",
  "(6881, Token.Text, '$SED')",
  "(6885, Token.Text.Whitespace, ' ')",
  "(6886, Token.Text, '-e')",
  "(6888, Token.Text.Whitespace, ' ')",
  "(6889, Token.Literal.String.Single, \"'10q'\")",
  "(6894, Token.Text.Whitespace, ' ')",
  "(6895, Token.Text, '2>/dev/null')",
  "(6906, Token.Text.Whitespace, ' ')",
  "(6907, Token.Text, '|')",
  "(6908, Token.Text.Whitespace, ' ')",
  "(6909, Token.Text, '\\\\')",
  "(6910, Token.Text.NewLine, '\\n')",
  "(6911, Token.Text.Whitespace, '      ')",
  "(6917, Token.Text, '$EGREP')",
  "(6923, Token.Text.Whitespace, ' ')",
  "(6924, Token.Text, '-e')",
  "(6926, Token.Text.Whitespace, ' ')",
  "(6927, Token.Literal.String.Single, \"'file format pe-i386(.*architecture: i386)?'\")",
  "(6971, Token.Text.Whitespace, ' ')",
  "(6972, Token.Text, '>/dev/null')",
  "(6982, Token.Text.Whitespace, ' ')",
  "(6983, Token.Text, ';')",
  "(6984, Token.Text.Whitespace, ' ')",
  "(6985, Token.Text, 'then')",
  "(6989, Token.Text.NewLine, '\\n')",
  "(6990, Token.Text.Whitespace, '      ')",
  "(6996, Token.Text, 'win32_nmres=`eval')",
  "(7013, Token.Text.Whitespace, ' ')",
  "(7014, Token.Text, '$NM')",
  "(7017, Token.Text.Whitespace, ' ')",
  "(7018, Token.Text, '-f')",
  "(7020, Token.Text.Whitespace, ' ')",
  "(7021, Token.Text, 'posix')",
  "(7026, Token.Text.Whitespace, ' ')",
  "(7027, Token.Text, '-A')",
  "(7029, Token.Text.Whitespace, ' ')",
  "(7030, Token.Text, '$1')",
  "(7032, Token.Text.Whitespace, ' ')",
  "(7033, Token.Text, '|')",
  "(7034, Token.Text.Whitespace, ' ')",
  "(7035, Token.Text, '\\\\')",
  "(7036, Token.Text.NewLine, '\\n')",
  "(7037, Token.Text.Whitespace, '\\t')",
  "(7038, Token.Text, '$SED')",
  "(7042, Token.Text.Whitespace, ' ')",
  "(7043, Token.Text, '-n')",
  "(7045, Token.Text.Whitespace, ' ')",
  "(7046, Token.Text, '-e')",
  "(7048, Token.Text.Whitespace, ' ')",
  "(7049, Token.Literal.String.Single, \"'1,100{/ I /{s,.*,import,;p;q;};}'\")",
  "(7083, Token.Text, '`')",
  "(7084, Token.Text.NewLine, '\\n')",
  "(7085, Token.Text.Whitespace, '      ')",
  "(7091, Token.Text, 'case')",
  "(7095, Token.Text.Whitespace, ' ')",
  "(7096, Token.Text, '$win32_nmres')",
  "(7108, Token.Text.Whitespace, ' ')",
  "(7109, Token.Text, 'in')",
  "(7111, Token.Text.NewLine, '\\n')",
  "(7112, Token.Text.Whitespace, '      ')",
  "(7118, Token.Text, 'import*)')",
  "(7126, Token.Text.Whitespace, '  ')",
  "(7128, Token.Text, 'win32_libid_type=\"x86')",
  "(7149, Token.Text.Whitespace, ' ')",
  "(7150, Token.Text, 'archive')",
  "(7157, Token.Text.Whitespace, ' ')",
  "(7158, Token.Text, 'import\";;')",
  "(7167, Token.Text.NewLine, '\\n')",
  "(7168, Token.Text.Whitespace, '      ')",
  "(7174, Token.Text, '*)')",
  "(7176, Token.Text.Whitespace, '        ')",
  "(7184, Token.Text, 'win32_libid_type=\"x86')",
  "(7205, Token.Text.Whitespace, ' ')",
  "(7206, Token.Text, 'archive')",
  "(7213, Token.Text.Whitespace, ' ')",
  "(7214, Token.Text, 'static\";;')",
  "(7223, Token.Text.NewLine, '\\n')",
  "(7224, Token.Text.Whitespace, '      ')",
  "(7230, Token.Text, 'esac')",
  "(7234, Token.Text.NewLine, '\\n')",
  "(7235, Token.Text.Whitespace, '    ')",
  "(7239, Token.Text, 'fi')",
  "(7241, Token.Text.NewLine, '\\n')",
  "(7242, Token.Text.Whitespace, '    ')",
  "(7246, Token.Text, ';;')",
  "(7248, Token.Text.NewLine, '\\n')",
  "(7249, Token.Text.Whitespace, '  ')",
  "(7251, Token.Text, '*DLL*)')",
  "(7257, Token.Text.NewLine, '\\n')",
  "(7258, Token.Text.Whitespace, '    ')",
  "(7262, Token.Text, 'win32_libid_type=\"x86')",
  "(7283, Token.Text.Whitespace, ' ')",
  "(7284, Token.Text, 'DLL\"')",
  "(7288, Token.Text.NewLine, '\\n')",
  "(7289, Token.Text.Whitespace, '    ')",
  "(7293, Token.Text, ';;')",
  "(7295, Token.Text.NewLine, '\\n')",
  "(7296, Token.Text.Whitespace, '  ')",
  "(7298, Token.Text, '*executable*)')",
  "(7311, Token.Text.Whitespace, ' ')",
  "(7312, Token.Comment.Single, '# but shell scripts are \"executable\" too...')",
  "(7355, Token.Text.NewLine, '\\n')",
  "(7356, Token.Text.Whitespace, '    ')",
  "(7360, Token.Text, 'case')",
  "(7364, Token.Text.Whitespace, ' ')",
  "(7365, Token.Text, '$win32_fileres')",
  "(7379, Token.Text.Whitespace, ' ')",
  "(7380, Token.Text, 'in')",
  "(7382, Token.Text.NewLine, '\\n')",
  "(7383, Token.Text.Whitespace, '    ')",
  "(7387, Token.Text, '*MS\\\\')",
  "(7391, Token.Text.Whitespace, ' ')",
  "(7392, Token.Text, 'Windows\\\\')",
  "(7400, Token.Text.Whitespace, ' ')",
  "(7401, Token.Text, 'PE\\\\')",
  "(7404, Token.Text.Whitespace, ' ')",
  "(7405, Token.Text, 'Intel*)')",
  "(7412, Token.Text.NewLine, '\\n')",
  "(7413, Token.Text.Whitespace, '      ')",
  "(7419, Token.Text, 'win32_libid_type=\"x86')",
  "(7440, Token.Text.Whitespace, ' ')",
  "(7441, Token.Text, 'DLL\"')",
  "(7445, Token.Text.NewLine, '\\n')",
  "(7446, Token.Text.Whitespace, '      ')",
  "(7452, Token.Text, ';;')",
  "(7454, Token.Text.NewLine, '\\n')",
  "(7455, Token.Text.Whitespace, '    ')",
  "(7459, Token.Text, 'esac')",
  "(7463, Token.Text.NewLine, '\\n')",
  "(7464, Token.Text.Whitespace, '    ')",
  "(7468, Token.Text, ';;')",
  "(7470, Token.Text.NewLine, '\\n')",
  "(7471, Token.Text.Whitespace, '  ')",
  "(7473, Token.Text, 'esac')",
  "(7477, Token.Text.NewLine, '\\n')",
  "(7478, Token.Text.Whitespace, '  ')",
  "(7480, Token.Text, '$echo')",
  "(7485, Token.Text.Whitespace, ' ')",
  "(7486, Token.Text, '$win32_libid_type')",
  "(7503, Token.Text.NewLine, '\\n')",
  "(7504, Token.Text, '}')",
  "(7505, Token.Text.NewLine, '\\n\\n\\n')",
  "(7508, Token.Comment.Single, '# func_infer_tag arg')",
  "(7528, Token.Text.NewLine, '\\n')",
  "(7529, Token.Comment.Single, '# Infer tagged configuration to use if any are available and')",
  "(7589, Token.Text.NewLine, '\\n')",
  "(7590, Token.Comment.Single, '# if one wasn\\'t chosen via the \"--tag\" command line option.')",
  "(7649, Token.Text.NewLine, '\\n')",
  "(7650, Token.Comment.Single, '# Only attempt this if the compiler in the base compile')",
  "(7705, Token.Text.NewLine, '\\n')",
  "(7706, Token.Comment.Single, \"# command doesn't match the default compiler.\")",
  "(7751, Token.Text.NewLine, '\\n')",
  "(7752, Token.Comment.Single, \"# arg is usually of the form 'gcc ...'\")",
  "(7790, Token.Text.NewLine, '\\n')",
  "(7791, Token.Text, 'func_infer_tag')",
  "(7805, Token.Text.Whitespace, ' ')",
  "(7806, Token.Text, '()')",
  "(7808, Token.Text.NewLine, '\\n')",
  "(7809, Token.Text, '{')",
  "(7810, Token.Text.NewLine, '\\n')",
  "(7811, Token.Text.Whitespace, '    ')",
  "(7815, Token.Text, 'if')",
  "(7817, Token.Text.Whitespace, ' ')",
  "(7818, Token.Text, 'test')",
  "(7822, Token.Text.Whitespace, ' ')",
  "(7823, Token.Text, '-n')",
  "(7825, Token.Text.Whitespace, ' ')",
  "(7826, Token.Literal.String.Double, '\"$available_tags\"')",
  "(7843, Token.Text.Whitespace, ' ')",
  "(7844, Token.Text, '&&')",
  "(7846, Token.Text.Whitespace, ' ')",
  "(7847, Token.Text, 'test')",
  "(7851, Token.Text.Whitespace, ' ')",
  "(7852, Token.Text, '-z')",
  "(7854, Token.Text.Whitespace, ' ')",
  "(7855, Token.Literal.String.Double, '\"$tagname\"')",
  "(7865, Token.Text, ';')",
  "(7866, Token.Text.Whitespace, ' ')",
  "(7867, Token.Text, 'then')",
  "(7871, Token.Text.NewLine, '\\n')",
  "(7872, Token.Text.Whitespace, '      ')",
  "(7878, Token.Text, 'CC_quoted=')",
  "(7888, Token.Text.NewLine, '\\n')",
  "(7889, Token.Text.Whitespace, '      ')",
  "(7895, Token.Text, 'for')",
  "(7898, Token.Text.Whitespace, ' ')",
  "(7899, Token.Text, 'arg')",
  "(7902, Token.Text.Whitespace, ' ')",
  "(7903, Token.Text, 'in')",
  "(7905, Token.Text.Whitespace, ' ')",
  "(7906, Token.Text, '$CC;')",
  "(7910, Token.Text.Whitespace, ' ')",
  "(7911, Token.Text, 'do')",
  "(7913, Token.Text.NewLine, '\\n')",
  "(7914, Token.Text.Whitespace, '\\t')",
  "(7915, Token.Text, 'case')",
  "(7919, Token.Text.Whitespace, ' ')",
  "(7920, Token.Text, '$arg')",
  "(7924, Token.Text.Whitespace, ' ')",
  "(7925, Token.Text, 'in')",
  "(7927, Token.Text.NewLine, '\\n')",
  "(7928, Token.Text.Whitespace, '\\t  ')",
  "(7931, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(7966, Token.Text.Whitespace, ' ')",
  "(7967, Token.Text, '\\\\')",
  "(7968, Token.Text.Whitespace, '\\t')",
  "(7969, Token.Text, ']*|*]*|\"\")')",
  "(7979, Token.Text.NewLine, '\\n')",
  "(7980, Token.Text.Whitespace, '\\t  ')",
  "(7983, Token.Text, 'arg=\"\\\\\"$arg\\\\\"\"')",
  "(7997, Token.Text.NewLine, '\\n')",
  "(7998, Token.Text.Whitespace, '\\t  ')",
  "(8001, Token.Text, ';;')",
  "(8003, Token.Text.NewLine, '\\n')",
  "(8004, Token.Text.Whitespace, '\\t')",
  "(8005, Token.Text, 'esac')",
  "(8009, Token.Text.NewLine, '\\n')",
  "(8010, Token.Text.Whitespace, '\\t')",
  "(8011, Token.Text, 'CC_quoted=\"$CC_quoted')",
  "(8032, Token.Text.Whitespace, ' ')",
  "(8033, Token.Text, '$arg\"')",
  "(8038, Token.Text.NewLine, '\\n')",
  "(8039, Token.Text.Whitespace, '      ')",
  "(8045, Token.Text, 'done')",
  "(8049, Token.Text.NewLine, '\\n')",
  "(8050, Token.Text.Whitespace, '      ')",
  "(8056, Token.Text, 'case')",
  "(8060, Token.Text.Whitespace, ' ')",
  "(8061, Token.Text, '$@')",
  "(8063, Token.Text.Whitespace, ' ')",
  "(8064, Token.Text, 'in')",
  "(8066, Token.Text.NewLine, '\\n')",
  "(8067, Token.Text.Whitespace, '      ')",
  "(8073, Token.Comment.Single, '# Blanks in the command may have been stripped by the calling shell,')",
  "(8141, Token.Text.NewLine, '\\n')",
  "(8142, Token.Text.Whitespace, '      ')",
  "(8148, Token.Comment.Single, '# but not from the CC environment variable when configure was run.')",
  "(8214, Token.Text.NewLine, '\\n')",
  "(8215, Token.Text.Whitespace, '      ')",
  "(8221, Token.Literal.String.Double, '\" $CC \"')",
  "(8228, Token.Text, '*')",
  "(8229, Token.Text.Whitespace, ' ')",
  "(8230, Token.Text, '|')",
  "(8231, Token.Text.Whitespace, ' ')",
  "(8232, Token.Literal.String.Double, '\"$CC \"')",
  "(8238, Token.Text, '*')",
  "(8239, Token.Text.Whitespace, ' ')",
  "(8240, Token.Text, '|')",
  "(8241, Token.Text.Whitespace, ' ')",
  "(8242, Token.Literal.String.Double, '\" `$echo $CC` \"')",
  "(8257, Token.Text, '*')",
  "(8258, Token.Text.Whitespace, ' ')",
  "(8259, Token.Text, '|')",
  "(8260, Token.Text.Whitespace, ' ')",
  "(8261, Token.Literal.String.Double, '\"`$echo $CC` \"')",
  "(8275, Token.Text, '*')",
  "(8276, Token.Text.Whitespace, ' ')",
  "(8277, Token.Text, '|')",
  "(8278, Token.Text.Whitespace, ' ')",
  "(8279, Token.Literal.String.Double, '\" $CC_quoted\"')",
  "(8292, Token.Text, '*')",
  "(8293, Token.Text.Whitespace, ' ')",
  "(8294, Token.Text, '|')",
  "(8295, Token.Text.Whitespace, ' ')",
  "(8296, Token.Literal.String.Double, '\"$CC_quoted \"')",
  "(8309, Token.Text, '*')",
  "(8310, Token.Text.Whitespace, ' ')",
  "(8311, Token.Text, '|')",
  "(8312, Token.Text.Whitespace, ' ')",
  "(8313, Token.Literal.String.Double, '\" `$echo $CC_quoted` \"')",
  "(8335, Token.Text, '*')",
  "(8336, Token.Text.Whitespace, ' ')",
  "(8337, Token.Text, '|')",
  "(8338, Token.Text.Whitespace, ' ')",
  "(8339, Token.Literal.String.Double, '\"`$echo $CC_quoted` \"')",
  "(8360, Token.Text, '*)')",
  "(8362, Token.Text.Whitespace, ' ')",
  "(8363, Token.Text, ';;')",
  "(8365, Token.Text.NewLine, '\\n')",
  "(8366, Token.Text.Whitespace, '      ')",
  "(8372, Token.Comment.Single, '# Blanks at the start of $base_compile will cause this to fail')",
  "(8434, Token.Text.NewLine, '\\n')",
  "(8435, Token.Text.Whitespace, '      ')",
  "(8441, Token.Comment.Single, \"# if we don't check for them as well.\")",
  "(8478, Token.Text.NewLine, '\\n')",
  "(8479, Token.Text.Whitespace, '      ')",
  "(8485, Token.Text, '*)')",
  "(8487, Token.Text.NewLine, '\\n')",
  "(8488, Token.Text.Whitespace, '\\t')",
  "(8489, Token.Text, 'for')",
  "(8492, Token.Text.Whitespace, ' ')",
  "(8493, Token.Text, 'z')",
  "(8494, Token.Text.Whitespace, ' ')",
  "(8495, Token.Text, 'in')",
  "(8497, Token.Text.Whitespace, ' ')",
  "(8498, Token.Text, '$available_tags;')",
  "(8514, Token.Text.Whitespace, ' ')",
  "(8515, Token.Text, 'do')",
  "(8517, Token.Text.NewLine, '\\n')",
  "(8518, Token.Text.Whitespace, '\\t  ')",
  "(8521, Token.Text, 'if')",
  "(8523, Token.Text.Whitespace, ' ')",
  "(8524, Token.Text, 'grep')",
  "(8528, Token.Text.Whitespace, ' ')",
  "(8529, Token.Literal.String.Double, '\"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\"')",
  "(8567, Token.Text.Whitespace, ' ')",
  "(8568, Token.Text, '<')",
  "(8569, Token.Text.Whitespace, ' ')",
  "(8570, Token.Literal.String.Double, '\"$progpath\"')",
  "(8581, Token.Text.Whitespace, ' ')",
  "(8582, Token.Text, '>')",
  "(8583, Token.Text.Whitespace, ' ')",
  "(8584, Token.Text, '/dev/null;')",
  "(8594, Token.Text.Whitespace, ' ')",
  "(8595, Token.Text, 'then')",
  "(8599, Token.Text.NewLine, '\\n')",
  "(8600, Token.Text.Whitespace, '\\t    ')",
  "(8605, Token.Comment.Single, '# Evaluate the configuration.')",
  "(8634, Token.Text.NewLine, '\\n')",
  "(8635, Token.Text.Whitespace, '\\t    ')",
  "(8640, Token.Text, 'eval')",
  "(8644, Token.Text.Whitespace, ' ')",
  "(8645, Token.Literal.String.Double, '\"`${SED} -n -e \\'/^# ### BEGIN LIBTOOL TAG CONFIG: \\'$z\\'$/,/^# ### END LIBTOOL TAG CONFIG: \\'$z\\'$/p\\' < $progpath`\"')",
  "(8756, Token.Text.NewLine, '\\n')",
  "(8757, Token.Text.Whitespace, '\\t    ')",
  "(8762, Token.Text, 'CC_quoted=')",
  "(8772, Token.Text.NewLine, '\\n')",
  "(8773, Token.Text.Whitespace, '\\t    ')",
  "(8778, Token.Text, 'for')",
  "(8781, Token.Text.Whitespace, ' ')",
  "(8782, Token.Text, 'arg')",
  "(8785, Token.Text.Whitespace, ' ')",
  "(8786, Token.Text, 'in')",
  "(8788, Token.Text.Whitespace, ' ')",
  "(8789, Token.Text, '$CC;')",
  "(8793, Token.Text.Whitespace, ' ')",
  "(8794, Token.Text, 'do')",
  "(8796, Token.Text.NewLine, '\\n')",
  "(8797, Token.Text.Whitespace, '\\t    ')",
  "(8802, Token.Comment.Single, '# Double-quote args containing other shell metacharacters.')",
  "(8860, Token.Text.NewLine, '\\n')",
  "(8861, Token.Text.Whitespace, '\\t    ')",
  "(8866, Token.Text, 'case')",
  "(8870, Token.Text.Whitespace, ' ')",
  "(8871, Token.Text, '$arg')",
  "(8875, Token.Text.Whitespace, ' ')",
  "(8876, Token.Text, 'in')",
  "(8878, Token.Text.NewLine, '\\n')",
  "(8879, Token.Text.Whitespace, '\\t      ')",
  "(8886, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(8921, Token.Text.Whitespace, ' ')",
  "(8922, Token.Text, '\\\\')",
  "(8923, Token.Text.Whitespace, '\\t')",
  "(8924, Token.Text, ']*|*]*|\"\")')",
  "(8934, Token.Text.NewLine, '\\n')",
  "(8935, Token.Text.Whitespace, '\\t      ')",
  "(8942, Token.Text, 'arg=\"\\\\\"$arg\\\\\"\"')",
  "(8956, Token.Text.NewLine, '\\n')",
  "(8957, Token.Text.Whitespace, '\\t      ')",
  "(8964, Token.Text, ';;')",
  "(8966, Token.Text.NewLine, '\\n')",
  "(8967, Token.Text.Whitespace, '\\t    ')",
  "(8972, Token.Text, 'esac')",
  "(8976, Token.Text.NewLine, '\\n')",
  "(8977, Token.Text.Whitespace, '\\t    ')",
  "(8982, Token.Text, 'CC_quoted=\"$CC_quoted')",
  "(9003, Token.Text.Whitespace, ' ')",
  "(9004, Token.Text, '$arg\"')",
  "(9009, Token.Text.NewLine, '\\n')",
  "(9010, Token.Text.Whitespace, '\\t  ')",
  "(9013, Token.Text, 'done')",
  "(9017, Token.Text.NewLine, '\\n')",
  "(9018, Token.Text.Whitespace, '\\t    ')",
  "(9023, Token.Comment.Single, \"# user sometimes does CC=<HOST>-gcc so we need to match that to 'gcc'\")",
  "(9092, Token.Text.NewLine, '\\n')",
  "(9093, Token.Text.Whitespace, '\\t    ')",
  "(9098, Token.Text, 'trimedcc=`echo')",
  "(9112, Token.Text.Whitespace, ' ')",
  "(9113, Token.Text, '${CC}')",
  "(9118, Token.Text.Whitespace, ' ')",
  "(9119, Token.Text, '|')",
  "(9120, Token.Text.Whitespace, ' ')",
  "(9121, Token.Text, '$SED')",
  "(9125, Token.Text.Whitespace, ' ')",
  "(9126, Token.Text, '-e')",
  "(9128, Token.Text.Whitespace, ' ')",
  "(9129, Token.Literal.String.Double, '\"s/${host}-//g\"')",
  "(9144, Token.Text, '`')",
  "(9145, Token.Text.NewLine, '\\n')",
  "(9146, Token.Text.Whitespace, '\\t    ')",
  "(9151, Token.Comment.Single, '# and sometimes libtool has CC=<HOST>-gcc but user does CC=gcc')",
  "(9213, Token.Text.NewLine, '\\n')",
  "(9214, Token.Text.Whitespace, '\\t    ')",
  "(9219, Token.Text, 'extendcc=${host}-${CC}')",
  "(9241, Token.Text.NewLine, '\\n')",
  "(9242, Token.Text.Whitespace, '\\t    ')",
  "(9247, Token.Comment.Single, '# and sometimes libtool has CC=<OLDHOST>-gcc but user has CC=<NEWHOST>-gcc  ')",
  "(9323, Token.Text.NewLine, '\\n')",
  "(9324, Token.Text.Whitespace, '\\t    ')",
  "(9329, Token.Comment.Single, '# (Gentoo-specific hack because we always export $CHOST)')",
  "(9385, Token.Text.NewLine, '\\n')",
  "(9386, Token.Text.Whitespace, '\\t    ')",
  "(9391, Token.Text, 'mungedcc=${CHOST-${host}}-${trimedcc}')",
  "(9428, Token.Text.NewLine, '\\n')",
  "(9429, Token.Text.Whitespace, '\\t    ')",
  "(9434, Token.Text, 'case')",
  "(9438, Token.Text.Whitespace, ' ')",
  "(9439, Token.Literal.String.Double, '\"$@ \"')",
  "(9444, Token.Text.Whitespace, ' ')",
  "(9445, Token.Text, 'in')",
  "(9447, Token.Text.NewLine, '\\n')",
  "(9448, Token.Text.Whitespace, '\\t      ')",
  "(9455, Token.Literal.String.Double, '\"cc \"')",
  "(9460, Token.Text, '*')",
  "(9461, Token.Text.Whitespace, ' ')",
  "(9462, Token.Text, '|')",
  "(9463, Token.Text.Whitespace, ' ')",
  "(9464, Token.Literal.String.Double, '\" cc \"')",
  "(9470, Token.Text, '*')",
  "(9471, Token.Text.Whitespace, ' ')",
  "(9472, Token.Text, '|')",
  "(9473, Token.Text.Whitespace, ' ')",
  "(9474, Token.Literal.String.Double, '\"${host}-cc \"')",
  "(9487, Token.Text, '*')",
  "(9488, Token.Text.Whitespace, ' ')",
  "(9489, Token.Text, '|')",
  "(9490, Token.Text.Whitespace, ' ')",
  "(9491, Token.Literal.String.Double, '\" ${host}-cc \"')",
  "(9505, Token.Text, '*|\\\\')",
  "(9508, Token.Text.NewLine, '\\n')",
  "(9509, Token.Text.Whitespace, '\\t      ')",
  "(9516, Token.Literal.String.Double, '\"gcc \"')",
  "(9522, Token.Text, '*')",
  "(9523, Token.Text.Whitespace, ' ')",
  "(9524, Token.Text, '|')",
  "(9525, Token.Text.Whitespace, ' ')",
  "(9526, Token.Literal.String.Double, '\" gcc \"')",
  "(9533, Token.Text, '*')",
  "(9534, Token.Text.Whitespace, ' ')",
  "(9535, Token.Text, '|')",
  "(9536, Token.Text.Whitespace, ' ')",
  "(9537, Token.Literal.String.Double, '\"${host}-gcc \"')",
  "(9551, Token.Text, '*')",
  "(9552, Token.Text.Whitespace, ' ')",
  "(9553, Token.Text, '|')",
  "(9554, Token.Text.Whitespace, ' ')",
  "(9555, Token.Literal.String.Double, '\" ${host}-gcc \"')",
  "(9570, Token.Text, '*)')",
  "(9572, Token.Text.NewLine, '\\n')",
  "(9573, Token.Text.Whitespace, '\\t      ')",
  "(9580, Token.Text, 'tagname=CC')",
  "(9590, Token.Text.NewLine, '\\n')",
  "(9591, Token.Text.Whitespace, '\\t      ')",
  "(9598, Token.Text, 'break')",
  "(9603, Token.Text.Whitespace, ' ')",
  "(9604, Token.Text, ';;')",
  "(9606, Token.Text.NewLine, '\\n')",
  "(9607, Token.Text.Whitespace, '\\t      ')",
  "(9614, Token.Literal.String.Double, '\"$trimedcc \"')",
  "(9626, Token.Text, '*')",
  "(9627, Token.Text.Whitespace, ' ')",
  "(9628, Token.Text, '|')",
  "(9629, Token.Text.Whitespace, ' ')",
  "(9630, Token.Literal.String.Double, '\" $trimedcc \"')",
  "(9643, Token.Text, '*')",
  "(9644, Token.Text.Whitespace, ' ')",
  "(9645, Token.Text, '|')",
  "(9646, Token.Text.Whitespace, ' ')",
  "(9647, Token.Literal.String.Double, '\"`$echo $trimedcc` \"')",
  "(9667, Token.Text, '*')",
  "(9668, Token.Text.Whitespace, ' ')",
  "(9669, Token.Text, '|')",
  "(9670, Token.Text.Whitespace, ' ')",
  "(9671, Token.Literal.String.Double, '\" `$echo $trimedcc` \"')",
  "(9692, Token.Text, '*|\\\\')",
  "(9695, Token.Text.NewLine, '\\n')",
  "(9696, Token.Text.Whitespace, '\\t      ')",
  "(9703, Token.Literal.String.Double, '\"$extendcc \"')",
  "(9715, Token.Text, '*')",
  "(9716, Token.Text.Whitespace, ' ')",
  "(9717, Token.Text, '|')",
  "(9718, Token.Text.Whitespace, ' ')",
  "(9719, Token.Literal.String.Double, '\" $extendcc \"')",
  "(9732, Token.Text, '*')",
  "(9733, Token.Text.Whitespace, ' ')",
  "(9734, Token.Text, '|')",
  "(9735, Token.Text.Whitespace, ' ')",
  "(9736, Token.Literal.String.Double, '\"`$echo $extendcc` \"')",
  "(9756, Token.Text, '*')",
  "(9757, Token.Text.Whitespace, ' ')",
  "(9758, Token.Text, '|')",
  "(9759, Token.Text.Whitespace, ' ')",
  "(9760, Token.Literal.String.Double, '\" `$echo $extendcc` \"')",
  "(9781, Token.Text, '*|\\\\')",
  "(9784, Token.Text.NewLine, '\\n')",
  "(9785, Token.Text.Whitespace, '\\t      ')",
  "(9792, Token.Literal.String.Double, '\"$mungedcc \"')",
  "(9804, Token.Text, '*')",
  "(9805, Token.Text.Whitespace, ' ')",
  "(9806, Token.Text, '|')",
  "(9807, Token.Text.Whitespace, ' ')",
  "(9808, Token.Literal.String.Double, '\" $mungedcc \"')",
  "(9821, Token.Text, '*')",
  "(9822, Token.Text.Whitespace, ' ')",
  "(9823, Token.Text, '|')",
  "(9824, Token.Text.Whitespace, ' ')",
  "(9825, Token.Literal.String.Double, '\"`$echo $mungedcc` \"')",
  "(9845, Token.Text, '*')",
  "(9846, Token.Text.Whitespace, ' ')",
  "(9847, Token.Text, '|')",
  "(9848, Token.Text.Whitespace, ' ')",
  "(9849, Token.Literal.String.Double, '\" `$echo $mungedcc` \"')",
  "(9870, Token.Text, '*|\\\\')",
  "(9873, Token.Text.NewLine, '\\n')",
  "(9874, Token.Text.Whitespace, '\\t      ')",
  "(9881, Token.Literal.String.Double, '\" $CC \"')",
  "(9888, Token.Text, '*')",
  "(9889, Token.Text.Whitespace, ' ')",
  "(9890, Token.Text, '|')",
  "(9891, Token.Text.Whitespace, ' ')",
  "(9892, Token.Literal.String.Double, '\"$CC \"')",
  "(9898, Token.Text, '*')",
  "(9899, Token.Text.Whitespace, ' ')",
  "(9900, Token.Text, '|')",
  "(9901, Token.Text.Whitespace, ' ')",
  "(9902, Token.Literal.String.Double, '\" `$echo $CC` \"')",
  "(9917, Token.Text, '*')",
  "(9918, Token.Text.Whitespace, ' ')",
  "(9919, Token.Text, '|')",
  "(9920, Token.Text.Whitespace, ' ')",
  "(9921, Token.Literal.String.Double, '\"`$echo $CC` \"')",
  "(9935, Token.Text, '*')",
  "(9936, Token.Text.Whitespace, ' ')",
  "(9937, Token.Text, '|')",
  "(9938, Token.Text.Whitespace, ' ')",
  "(9939, Token.Literal.String.Double, '\" $CC_quoted\"')",
  "(9952, Token.Text, '*')",
  "(9953, Token.Text.Whitespace, ' ')",
  "(9954, Token.Text, '|')",
  "(9955, Token.Text.Whitespace, ' ')",
  "(9956, Token.Literal.String.Double, '\"$CC_quoted \"')",
  "(9969, Token.Text, '*')",
  "(9970, Token.Text.Whitespace, ' ')",
  "(9971, Token.Text, '|')",
  "(9972, Token.Text.Whitespace, ' ')",
  "(9973, Token.Literal.String.Double, '\" `$echo $CC_quoted` \"')",
  "(9995, Token.Text, '*')",
  "(9996, Token.Text.Whitespace, ' ')",
  "(9997, Token.Text, '|')",
  "(9998, Token.Text.Whitespace, ' ')",
  "(9999, Token.Literal.String.Double, '\"`$echo $CC_quoted` \"')",
  "(10020, Token.Text, '*)')",
  "(10022, Token.Text.NewLine, '\\n')",
  "(10023, Token.Text.Whitespace, '\\t      ')",
  "(10030, Token.Comment.Single, '# The compiler in the base compile command matches')",
  "(10080, Token.Text.NewLine, '\\n')",
  "(10081, Token.Text.Whitespace, '\\t      ')",
  "(10088, Token.Comment.Single, '# the one in the tagged configuration.')",
  "(10126, Token.Text.NewLine, '\\n')",
  "(10127, Token.Text.Whitespace, '\\t      ')",
  "(10134, Token.Comment.Single, '# Assume this is the tagged configuration we want.')",
  "(10184, Token.Text.NewLine, '\\n')",
  "(10185, Token.Text.Whitespace, '\\t      ')",
  "(10192, Token.Text, 'tagname=$z')",
  "(10202, Token.Text.NewLine, '\\n')",
  "(10203, Token.Text.Whitespace, '\\t      ')",
  "(10210, Token.Text, 'break')",
  "(10215, Token.Text.NewLine, '\\n')",
  "(10216, Token.Text.Whitespace, '\\t      ')",
  "(10223, Token.Text, ';;')",
  "(10225, Token.Text.NewLine, '\\n')",
  "(10226, Token.Text.Whitespace, '\\t    ')",
  "(10231, Token.Text, 'esac')",
  "(10235, Token.Text.NewLine, '\\n')",
  "(10236, Token.Text.Whitespace, '\\t  ')",
  "(10239, Token.Text, 'fi')",
  "(10241, Token.Text.NewLine, '\\n')",
  "(10242, Token.Text.Whitespace, '\\t')",
  "(10243, Token.Text, 'done')",
  "(10247, Token.Text.NewLine, '\\n')",
  "(10248, Token.Text.Whitespace, '\\t')",
  "(10249, Token.Comment.Single, \"# If $tagname still isn't set, then no tagged configuration\")",
  "(10308, Token.Text.NewLine, '\\n')",
  "(10309, Token.Text.Whitespace, '\\t')",
  "(10310, Token.Comment.Single, '# was found and let the user know that the \"--tag\" command')",
  "(10368, Token.Text.NewLine, '\\n')",
  "(10369, Token.Text.Whitespace, '\\t')",
  "(10370, Token.Comment.Single, '# line option must be used.')",
  "(10397, Token.Text.NewLine, '\\n')",
  "(10398, Token.Text.Whitespace, '\\t')",
  "(10399, Token.Text, 'if')",
  "(10401, Token.Text.Whitespace, ' ')",
  "(10402, Token.Text, 'test')",
  "(10406, Token.Text.Whitespace, ' ')",
  "(10407, Token.Text, '-z')",
  "(10409, Token.Text.Whitespace, ' ')",
  "(10410, Token.Literal.String.Double, '\"$tagname\"')",
  "(10420, Token.Text, ';')",
  "(10421, Token.Text.Whitespace, ' ')",
  "(10422, Token.Text, 'then')",
  "(10426, Token.Text.NewLine, '\\n')",
  "(10427, Token.Text.Whitespace, '\\t  ')",
  "(10430, Token.Text, '$echo')",
  "(10435, Token.Text.Whitespace, ' ')",
  "(10436, Token.Literal.String.Double, '\"$modename: unable to infer tagged configuration\"')",
  "(10485, Token.Text.NewLine, '\\n')",
  "(10486, Token.Text.Whitespace, '\\t  ')",
  "(10489, Token.Text, '$echo')",
  "(10494, Token.Text.Whitespace, ' ')",
  "(10495, Token.Literal.String.Double, '\"$modename: specify a tag with \\\\`--tag\\'\"')",
  "(10535, Token.Text.Whitespace, ' ')",
  "(10536, Token.Text, '1>&2')",
  "(10540, Token.Text.NewLine, '\\n')",
  "(10541, Token.Text.Whitespace, '\\t  ')",
  "(10544, Token.Text, 'exit')",
  "(10548, Token.Text.Whitespace, ' ')",
  "(10549, Token.Text, '$EXIT_FAILURE')",
  "(10562, Token.Text.NewLine, '\\n')",
  "(10563, Token.Comment.Single, '#        else')",
  "(10576, Token.Text.NewLine, '\\n')",
  "(10577, Token.Comment.Single, '#          $echo \"$modename: using $tagname tagged configuration\"')",
  "(10642, Token.Text.NewLine, '\\n')",
  "(10643, Token.Text.Whitespace, '\\t')",
  "(10644, Token.Text, 'fi')",
  "(10646, Token.Text.NewLine, '\\n')",
  "(10647, Token.Text.Whitespace, '\\t')",
  "(10648, Token.Text, ';;')",
  "(10650, Token.Text.NewLine, '\\n')",
  "(10651, Token.Text.Whitespace, '      ')",
  "(10657, Token.Text, 'esac')",
  "(10661, Token.Text.NewLine, '\\n')",
  "(10662, Token.Text.Whitespace, '    ')",
  "(10666, Token.Text, 'fi')",
  "(10668, Token.Text.NewLine, '\\n')",
  "(10669, Token.Text, '}')",
  "(10670, Token.Text.NewLine, '\\n\\n\\n')",
  "(10673, Token.Comment.Single, '# func_extract_an_archive dir oldlib')",
  "(10709, Token.Text.NewLine, '\\n')",
  "(10710, Token.Text, 'func_extract_an_archive')",
  "(10733, Token.Text.Whitespace, ' ')",
  "(10734, Token.Text, '()')",
  "(10736, Token.Text.NewLine, '\\n')",
  "(10737, Token.Text, '{')",
  "(10738, Token.Text.NewLine, '\\n')",
  "(10739, Token.Text.Whitespace, '    ')",
  "(10743, Token.Text, 'f_ex_an_ar_dir=\"$1\";')",
  "(10763, Token.Text.Whitespace, ' ')",
  "(10764, Token.Text, 'shift')",
  "(10769, Token.Text.NewLine, '\\n')",
  "(10770, Token.Text.Whitespace, '    ')",
  "(10774, Token.Text, 'f_ex_an_ar_oldlib=\"$1\"')",
  "(10796, Token.Text.NewLine, '\\n\\n')",
  "(10798, Token.Text.Whitespace, '    ')",
  "(10802, Token.Text, '$show')",
  "(10807, Token.Text.Whitespace, ' ')",
  "(10808, Token.Literal.String.Double, '\"(cd $f_ex_an_ar_dir && $AR x $f_ex_an_ar_oldlib)\"')",
  "(10858, Token.Text.NewLine, '\\n')",
  "(10859, Token.Text.Whitespace, '    ')",
  "(10863, Token.Text, '$run')",
  "(10867, Token.Text.Whitespace, ' ')",
  "(10868, Token.Text, 'eval')",
  "(10872, Token.Text.Whitespace, ' ')",
  "(10873, Token.Literal.String.Double, '\"(cd \\\\$f_ex_an_ar_dir && $AR x \\\\$f_ex_an_ar_oldlib)\"')",
  "(10925, Token.Text.Whitespace, ' ')",
  "(10926, Token.Text, '||')",
  "(10928, Token.Text.Whitespace, ' ')",
  "(10929, Token.Text, 'exit')",
  "(10933, Token.Text.Whitespace, ' ')",
  "(10934, Token.Text, '$?')",
  "(10936, Token.Text.NewLine, '\\n')",
  "(10937, Token.Text.Whitespace, '    ')",
  "(10941, Token.Text, 'if')",
  "(10943, Token.Text.Whitespace, ' ')",
  "(10944, Token.Text, '($AR')",
  "(10948, Token.Text.Whitespace, ' ')",
  "(10949, Token.Text, 't')",
  "(10950, Token.Text.Whitespace, ' ')",
  "(10951, Token.Literal.String.Double, '\"$f_ex_an_ar_oldlib\"')",
  "(10971, Token.Text.Whitespace, ' ')",
  "(10972, Token.Text, '|')",
  "(10973, Token.Text.Whitespace, ' ')",
  "(10974, Token.Text, 'sort')",
  "(10978, Token.Text.Whitespace, ' ')",
  "(10979, Token.Text, '|')",
  "(10980, Token.Text.Whitespace, ' ')",
  "(10981, Token.Text, 'sort')",
  "(10985, Token.Text.Whitespace, ' ')",
  "(10986, Token.Text, '-uc')",
  "(10989, Token.Text.Whitespace, ' ')",
  "(10990, Token.Text, '>/dev/null')",
  "(11000, Token.Text.Whitespace, ' ')",
  "(11001, Token.Text, '2>&1);')",
  "(11007, Token.Text.Whitespace, ' ')",
  "(11008, Token.Text, 'then')",
  "(11012, Token.Text.NewLine, '\\n')",
  "(11013, Token.Text.Whitespace, '     ')",
  "(11018, Token.Text, ':')",
  "(11019, Token.Text.NewLine, '\\n')",
  "(11020, Token.Text.Whitespace, '    ')",
  "(11024, Token.Text, 'else')",
  "(11028, Token.Text.NewLine, '\\n')",
  "(11029, Token.Text.Whitespace, '      ')",
  "(11035, Token.Text, '$echo')",
  "(11040, Token.Text.Whitespace, ' ')",
  "(11041, Token.Literal.String.Double, '\"$modename: ERROR: object name conflicts: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"')",
  "(11118, Token.Text.Whitespace, ' ')",
  "(11119, Token.Text, '1>&2')",
  "(11123, Token.Text.NewLine, '\\n')",
  "(11124, Token.Text.Whitespace, '      ')",
  "(11130, Token.Text, 'exit')",
  "(11134, Token.Text.Whitespace, ' ')",
  "(11135, Token.Text, '$EXIT_FAILURE')",
  "(11148, Token.Text.NewLine, '\\n')",
  "(11149, Token.Text.Whitespace, '    ')",
  "(11153, Token.Text, 'fi')",
  "(11155, Token.Text.NewLine, '\\n')",
  "(11156, Token.Text, '}')",
  "(11157, Token.Text.NewLine, '\\n\\n')",
  "(11159, Token.Comment.Single, '# func_extract_archives gentop oldlib ...')",
  "(11200, Token.Text.NewLine, '\\n')",
  "(11201, Token.Text, 'func_extract_archives')",
  "(11222, Token.Text.Whitespace, ' ')",
  "(11223, Token.Text, '()')",
  "(11225, Token.Text.NewLine, '\\n')",
  "(11226, Token.Text, '{')",
  "(11227, Token.Text.NewLine, '\\n')",
  "(11228, Token.Text.Whitespace, '    ')",
  "(11232, Token.Text, 'my_gentop=\"$1\";')",
  "(11247, Token.Text.Whitespace, ' ')",
  "(11248, Token.Text, 'shift')",
  "(11253, Token.Text.NewLine, '\\n')",
  "(11254, Token.Text.Whitespace, '    ')",
  "(11258, Token.Text, 'my_oldlibs=${1+\"$@\"}')",
  "(11278, Token.Text.NewLine, '\\n')",
  "(11279, Token.Text.Whitespace, '    ')",
  "(11283, Token.Text, 'my_oldobjs=\"\"')",
  "(11296, Token.Text.NewLine, '\\n')",
  "(11297, Token.Text.Whitespace, '    ')",
  "(11301, Token.Text, 'my_xlib=\"\"')",
  "(11311, Token.Text.NewLine, '\\n')",
  "(11312, Token.Text.Whitespace, '    ')",
  "(11316, Token.Text, 'my_xabs=\"\"')",
  "(11326, Token.Text.NewLine, '\\n')",
  "(11327, Token.Text.Whitespace, '    ')",
  "(11331, Token.Text, 'my_xdir=\"\"')",
  "(11341, Token.Text.NewLine, '\\n')",
  "(11342, Token.Text.Whitespace, '    ')",
  "(11346, Token.Text, 'my_status=\"\"')",
  "(11358, Token.Text.NewLine, '\\n\\n')",
  "(11360, Token.Text.Whitespace, '    ')",
  "(11364, Token.Text, '$show')",
  "(11369, Token.Text.Whitespace, ' ')",
  "(11370, Token.Literal.String.Double, '\"${rm}r $my_gentop\"')",
  "(11389, Token.Text.NewLine, '\\n')",
  "(11390, Token.Text.Whitespace, '    ')",
  "(11394, Token.Text, '$run')",
  "(11398, Token.Text.Whitespace, ' ')",
  "(11399, Token.Text, '${rm}r')",
  "(11405, Token.Text.Whitespace, ' ')",
  "(11406, Token.Literal.String.Double, '\"$my_gentop\"')",
  "(11418, Token.Text.NewLine, '\\n')",
  "(11419, Token.Text.Whitespace, '    ')",
  "(11423, Token.Text, '$show')",
  "(11428, Token.Text.Whitespace, ' ')",
  "(11429, Token.Literal.String.Double, '\"$mkdir $my_gentop\"')",
  "(11448, Token.Text.NewLine, '\\n')",
  "(11449, Token.Text.Whitespace, '    ')",
  "(11453, Token.Text, '$run')",
  "(11457, Token.Text.Whitespace, ' ')",
  "(11458, Token.Text, '$mkdir')",
  "(11464, Token.Text.Whitespace, ' ')",
  "(11465, Token.Literal.String.Double, '\"$my_gentop\"')",
  "(11477, Token.Text.NewLine, '\\n')",
  "(11478, Token.Text.Whitespace, '    ')",
  "(11482, Token.Text, 'my_status=$?')",
  "(11494, Token.Text.NewLine, '\\n')",
  "(11495, Token.Text.Whitespace, '    ')",
  "(11499, Token.Text, 'if')",
  "(11501, Token.Text.Whitespace, ' ')",
  "(11502, Token.Text, 'test')",
  "(11506, Token.Text.Whitespace, ' ')",
  "(11507, Token.Literal.String.Double, '\"$my_status\"')",
  "(11519, Token.Text.Whitespace, ' ')",
  "(11520, Token.Text, '-ne')",
  "(11523, Token.Text.Whitespace, ' ')",
  "(11524, Token.Text, '0')",
  "(11525, Token.Text.Whitespace, ' ')",
  "(11526, Token.Text, '&&')",
  "(11528, Token.Text.Whitespace, ' ')",
  "(11529, Token.Text, 'test')",
  "(11533, Token.Text.Whitespace, ' ')",
  "(11534, Token.Text, '!')",
  "(11535, Token.Text.Whitespace, ' ')",
  "(11536, Token.Text, '-d')",
  "(11538, Token.Text.Whitespace, ' ')",
  "(11539, Token.Literal.String.Double, '\"$my_gentop\"')",
  "(11551, Token.Text, ';')",
  "(11552, Token.Text.Whitespace, ' ')",
  "(11553, Token.Text, 'then')",
  "(11557, Token.Text.NewLine, '\\n')",
  "(11558, Token.Text.Whitespace, '      ')",
  "(11564, Token.Text, 'exit')",
  "(11568, Token.Text.Whitespace, ' ')",
  "(11569, Token.Text, '$my_status')",
  "(11579, Token.Text.NewLine, '\\n')",
  "(11580, Token.Text.Whitespace, '    ')",
  "(11584, Token.Text, 'fi')",
  "(11586, Token.Text.NewLine, '\\n\\n')",
  "(11588, Token.Text.Whitespace, '    ')",
  "(11592, Token.Text, 'for')",
  "(11595, Token.Text.Whitespace, ' ')",
  "(11596, Token.Text, 'my_xlib')",
  "(11603, Token.Text.Whitespace, ' ')",
  "(11604, Token.Text, 'in')",
  "(11606, Token.Text.Whitespace, ' ')",
  "(11607, Token.Text, '$my_oldlibs;')",
  "(11619, Token.Text.Whitespace, ' ')",
  "(11620, Token.Text, 'do')",
  "(11622, Token.Text.NewLine, '\\n')",
  "(11623, Token.Text.Whitespace, '      ')",
  "(11629, Token.Comment.Single, '# Extract the objects.')",
  "(11651, Token.Text.NewLine, '\\n')",
  "(11652, Token.Text.Whitespace, '      ')",
  "(11658, Token.Text, 'case')",
  "(11662, Token.Text.Whitespace, ' ')",
  "(11663, Token.Text, '$my_xlib')",
  "(11671, Token.Text.Whitespace, ' ')",
  "(11672, Token.Text, 'in')",
  "(11674, Token.Text.NewLine, '\\n')",
  "(11675, Token.Text.Whitespace, '\\t')",
  "(11676, Token.Text, '[\\\\\\\\/]*')",
  "(11682, Token.Text.Whitespace, ' ')",
  "(11683, Token.Text, '|')",
  "(11684, Token.Text.Whitespace, ' ')",
  "(11685, Token.Text, '[A-Za-z]:[\\\\\\\\/]*)')",
  "(11701, Token.Text.Whitespace, ' ')",
  "(11702, Token.Text, 'my_xabs=\"$my_xlib\"')",
  "(11720, Token.Text.Whitespace, ' ')",
  "(11721, Token.Text, ';;')",
  "(11723, Token.Text.NewLine, '\\n')",
  "(11724, Token.Text.Whitespace, '\\t')",
  "(11725, Token.Text, '*)')",
  "(11727, Token.Text.Whitespace, ' ')",
  "(11728, Token.Text, 'my_xabs=`pwd`\"/$my_xlib\"')",
  "(11752, Token.Text.Whitespace, ' ')",
  "(11753, Token.Text, ';;')",
  "(11755, Token.Text.NewLine, '\\n')",
  "(11756, Token.Text.Whitespace, '      ')",
  "(11762, Token.Text, 'esac')",
  "(11766, Token.Text.NewLine, '\\n')",
  "(11767, Token.Text.Whitespace, '      ')",
  "(11773, Token.Text, 'my_xlib=`$echo')",
  "(11787, Token.Text.Whitespace, ' ')",
  "(11788, Token.Literal.String.Double, '\"X$my_xlib\"')",
  "(11799, Token.Text.Whitespace, ' ')",
  "(11800, Token.Text, '|')",
  "(11801, Token.Text.Whitespace, ' ')",
  "(11802, Token.Text, '$Xsed')",
  "(11807, Token.Text.Whitespace, ' ')",
  "(11808, Token.Text, '-e')",
  "(11810, Token.Text.Whitespace, ' ')",
  "(11811, Token.Literal.String.Single, \"'s%^.*/%%'\")",
  "(11821, Token.Text, '`')",
  "(11822, Token.Text.NewLine, '\\n')",
  "(11823, Token.Text.Whitespace, '      ')",
  "(11829, Token.Text, 'my_xdir=\"$my_gentop/$my_xlib\"')",
  "(11858, Token.Text.NewLine, '\\n\\n')",
  "(11860, Token.Text.Whitespace, '      ')",
  "(11866, Token.Text, '$show')",
  "(11871, Token.Text.Whitespace, ' ')",
  "(11872, Token.Literal.String.Double, '\"${rm}r $my_xdir\"')",
  "(11889, Token.Text.NewLine, '\\n')",
  "(11890, Token.Text.Whitespace, '      ')",
  "(11896, Token.Text, '$run')",
  "(11900, Token.Text.Whitespace, ' ')",
  "(11901, Token.Text, '${rm}r')",
  "(11907, Token.Text.Whitespace, ' ')",
  "(11908, Token.Literal.String.Double, '\"$my_xdir\"')",
  "(11918, Token.Text.NewLine, '\\n')",
  "(11919, Token.Text.Whitespace, '      ')",
  "(11925, Token.Text, '$show')",
  "(11930, Token.Text.Whitespace, ' ')",
  "(11931, Token.Literal.String.Double, '\"$mkdir $my_xdir\"')",
  "(11948, Token.Text.NewLine, '\\n')",
  "(11949, Token.Text.Whitespace, '      ')",
  "(11955, Token.Text, '$run')",
  "(11959, Token.Text.Whitespace, ' ')",
  "(11960, Token.Text, '$mkdir')",
  "(11966, Token.Text.Whitespace, ' ')",
  "(11967, Token.Literal.String.Double, '\"$my_xdir\"')",
  "(11977, Token.Text.NewLine, '\\n')",
  "(11978, Token.Text.Whitespace, '      ')",
  "(11984, Token.Text, 'exit_status=$?')",
  "(11998, Token.Text.NewLine, '\\n')",
  "(11999, Token.Text.Whitespace, '      ')",
  "(12005, Token.Text, 'if')",
  "(12007, Token.Text.Whitespace, ' ')",
  "(12008, Token.Text, 'test')",
  "(12012, Token.Text.Whitespace, ' ')",
  "(12013, Token.Literal.String.Double, '\"$exit_status\"')",
  "(12027, Token.Text.Whitespace, ' ')",
  "(12028, Token.Text, '-ne')",
  "(12031, Token.Text.Whitespace, ' ')",
  "(12032, Token.Text, '0')",
  "(12033, Token.Text.Whitespace, ' ')",
  "(12034, Token.Text, '&&')",
  "(12036, Token.Text.Whitespace, ' ')",
  "(12037, Token.Text, 'test')",
  "(12041, Token.Text.Whitespace, ' ')",
  "(12042, Token.Text, '!')",
  "(12043, Token.Text.Whitespace, ' ')",
  "(12044, Token.Text, '-d')",
  "(12046, Token.Text.Whitespace, ' ')",
  "(12047, Token.Literal.String.Double, '\"$my_xdir\"')",
  "(12057, Token.Text, ';')",
  "(12058, Token.Text.Whitespace, ' ')",
  "(12059, Token.Text, 'then')",
  "(12063, Token.Text.NewLine, '\\n')",
  "(12064, Token.Text.Whitespace, '\\t')",
  "(12065, Token.Text, 'exit')",
  "(12069, Token.Text.Whitespace, ' ')",
  "(12070, Token.Text, '$exit_status')",
  "(12082, Token.Text.NewLine, '\\n')",
  "(12083, Token.Text.Whitespace, '      ')",
  "(12089, Token.Text, 'fi')",
  "(12091, Token.Text.NewLine, '\\n')",
  "(12092, Token.Text.Whitespace, '      ')",
  "(12098, Token.Text, 'case')",
  "(12102, Token.Text.Whitespace, ' ')",
  "(12103, Token.Text, '$host')",
  "(12108, Token.Text.Whitespace, ' ')",
  "(12109, Token.Text, 'in')",
  "(12111, Token.Text.NewLine, '\\n')",
  "(12112, Token.Text.Whitespace, '      ')",
  "(12118, Token.Text, '*-darwin*)')",
  "(12128, Token.Text.NewLine, '\\n')",
  "(12129, Token.Text.Whitespace, '\\t')",
  "(12130, Token.Text, '$show')",
  "(12135, Token.Text.Whitespace, ' ')",
  "(12136, Token.Literal.String.Double, '\"Extracting $my_xabs\"')",
  "(12157, Token.Text.NewLine, '\\n')",
  "(12158, Token.Text.Whitespace, '\\t')",
  "(12159, Token.Comment.Single, '# Do not bother doing anything if just a dry run')",
  "(12207, Token.Text.NewLine, '\\n')",
  "(12208, Token.Text.Whitespace, '\\t')",
  "(12209, Token.Text, 'if')",
  "(12211, Token.Text.Whitespace, ' ')",
  "(12212, Token.Text, 'test')",
  "(12216, Token.Text.Whitespace, ' ')",
  "(12217, Token.Text, '-z')",
  "(12219, Token.Text.Whitespace, ' ')",
  "(12220, Token.Literal.String.Double, '\"$run\"')",
  "(12226, Token.Text, ';')",
  "(12227, Token.Text.Whitespace, ' ')",
  "(12228, Token.Text, 'then')",
  "(12232, Token.Text.NewLine, '\\n')",
  "(12233, Token.Text.Whitespace, '\\t  ')",
  "(12236, Token.Text, 'darwin_orig_dir=`pwd`')",
  "(12257, Token.Text.NewLine, '\\n')",
  "(12258, Token.Text.Whitespace, '\\t  ')",
  "(12261, Token.Text, 'cd')",
  "(12263, Token.Text.Whitespace, ' ')",
  "(12264, Token.Text, '$my_xdir')",
  "(12272, Token.Text.Whitespace, ' ')",
  "(12273, Token.Text, '||')",
  "(12275, Token.Text.Whitespace, ' ')",
  "(12276, Token.Text, 'exit')",
  "(12280, Token.Text.Whitespace, ' ')",
  "(12281, Token.Text, '$?')",
  "(12283, Token.Text.NewLine, '\\n')",
  "(12284, Token.Text.Whitespace, '\\t  ')",
  "(12287, Token.Text, 'darwin_archive=$my_xabs')",
  "(12310, Token.Text.NewLine, '\\n')",
  "(12311, Token.Text.Whitespace, '\\t  ')",
  "(12314, Token.Text, 'darwin_curdir=`pwd`')",
  "(12333, Token.Text.NewLine, '\\n')",
  "(12334, Token.Text.Whitespace, '\\t  ')",
  "(12337, Token.Text, 'darwin_base_archive=`$echo')",
  "(12363, Token.Text.Whitespace, ' ')",
  "(12364, Token.Literal.String.Double, '\"X$darwin_archive\"')",
  "(12382, Token.Text.Whitespace, ' ')",
  "(12383, Token.Text, '|')",
  "(12384, Token.Text.Whitespace, ' ')",
  "(12385, Token.Text, '$Xsed')",
  "(12390, Token.Text.Whitespace, ' ')",
  "(12391, Token.Text, '-e')",
  "(12393, Token.Text.Whitespace, ' ')",
  "(12394, Token.Literal.String.Single, \"'s%^.*/%%'\")",
  "(12404, Token.Text, '`')",
  "(12405, Token.Text.NewLine, '\\n')",
  "(12406, Token.Text.Whitespace, '\\t  ')",
  "(12409, Token.Text, 'darwin_arches=`lipo')",
  "(12428, Token.Text.Whitespace, ' ')",
  "(12429, Token.Text, '-info')",
  "(12434, Token.Text.Whitespace, ' ')",
  "(12435, Token.Literal.String.Double, '\"$darwin_archive\"')",
  "(12452, Token.Text.Whitespace, ' ')",
  "(12453, Token.Text, '2>/dev/null')",
  "(12464, Token.Text.Whitespace, ' ')",
  "(12465, Token.Text, '|')",
  "(12466, Token.Text.Whitespace, ' ')",
  "(12467, Token.Text, '$EGREP')",
  "(12473, Token.Text.Whitespace, ' ')",
  "(12474, Token.Text, 'Architectures')",
  "(12487, Token.Text.Whitespace, ' ')",
  "(12488, Token.Text, '2>/dev/null`')",
  "(12500, Token.Text.NewLine, '\\n')",
  "(12501, Token.Text.Whitespace, '\\t  ')",
  "(12504, Token.Text, 'if')",
  "(12506, Token.Text.Whitespace, ' ')",
  "(12507, Token.Text, 'test')",
  "(12511, Token.Text.Whitespace, ' ')",
  "(12512, Token.Text, '-n')",
  "(12514, Token.Text.Whitespace, ' ')",
  "(12515, Token.Literal.String.Double, '\"$darwin_arches\"')",
  "(12531, Token.Text, ';')",
  "(12532, Token.Text.Whitespace, ' ')",
  "(12533, Token.Text, 'then')",
  "(12537, Token.Text.Whitespace, ' \\n\\t    ')",
  "(12544, Token.Text, 'darwin_arches=`echo')",
  "(12563, Token.Text.Whitespace, ' ')",
  "(12564, Token.Literal.String.Double, '\"$darwin_arches\"')",
  "(12580, Token.Text.Whitespace, ' ')",
  "(12581, Token.Text, '|')",
  "(12582, Token.Text.Whitespace, ' ')",
  "(12583, Token.Text, '$SED')",
  "(12587, Token.Text.Whitespace, ' ')",
  "(12588, Token.Text, '-e')",
  "(12590, Token.Text.Whitespace, ' ')",
  "(12591, Token.Literal.String.Single, \"'s/.*are://'\")",
  "(12603, Token.Text, '`')",
  "(12604, Token.Text.NewLine, '\\n')",
  "(12605, Token.Text.Whitespace, '\\t    ')",
  "(12610, Token.Text, 'darwin_arch=')",
  "(12622, Token.Text.NewLine, '\\n')",
  "(12623, Token.Text.Whitespace, '\\t    ')",
  "(12628, Token.Text, '$show')",
  "(12633, Token.Text.Whitespace, ' ')",
  "(12634, Token.Literal.String.Double, '\"$darwin_base_archive has multiple architectures $darwin_arches\"')",
  "(12698, Token.Text.NewLine, '\\n')",
  "(12699, Token.Text.Whitespace, '\\t    ')",
  "(12704, Token.Text, 'for')",
  "(12707, Token.Text.Whitespace, ' ')",
  "(12708, Token.Text, 'darwin_arch')",
  "(12719, Token.Text.Whitespace, ' ')",
  "(12720, Token.Text, 'in')",
  "(12722, Token.Text.Whitespace, '  ')",
  "(12724, Token.Text, '$darwin_arches')",
  "(12738, Token.Text.Whitespace, ' ')",
  "(12739, Token.Text, ';')",
  "(12740, Token.Text.Whitespace, ' ')",
  "(12741, Token.Text, 'do')",
  "(12743, Token.Text.NewLine, '\\n')",
  "(12744, Token.Text.Whitespace, '\\t      ')",
  "(12751, Token.Text, 'mkdir')",
  "(12756, Token.Text.Whitespace, ' ')",
  "(12757, Token.Text, '-p')",
  "(12759, Token.Text.Whitespace, ' ')",
  "(12760, Token.Literal.String.Double, '\"unfat-$$/${darwin_base_archive}-${darwin_arch}\"')",
  "(12808, Token.Text.NewLine, '\\n')",
  "(12809, Token.Text.Whitespace, '\\t      ')",
  "(12816, Token.Text, 'lipo')",
  "(12820, Token.Text.Whitespace, ' ')",
  "(12821, Token.Text, '-thin')",
  "(12826, Token.Text.Whitespace, ' ')",
  "(12827, Token.Text, '$darwin_arch')",
  "(12839, Token.Text.Whitespace, ' ')",
  "(12840, Token.Text, '-output')",
  "(12847, Token.Text.Whitespace, ' ')",
  "(12848, Token.Literal.String.Double, '\"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"')",
  "(12919, Token.Text.Whitespace, ' ')",
  "(12920, Token.Literal.String.Double, '\"${darwin_archive}\"')",
  "(12939, Token.Text.NewLine, '\\n')",
  "(12940, Token.Text.Whitespace, '\\t      ')",
  "(12947, Token.Text, 'cd')",
  "(12949, Token.Text.Whitespace, ' ')",
  "(12950, Token.Literal.String.Double, '\"unfat-$$/${darwin_base_archive}-${darwin_arch}\"')",
  "(12998, Token.Text.NewLine, '\\n')",
  "(12999, Token.Text.Whitespace, '\\t      ')",
  "(13006, Token.Text, 'func_extract_an_archive')",
  "(13029, Token.Text.Whitespace, ' ')",
  "(13030, Token.Literal.String.Double, '\"`pwd`\"')",
  "(13037, Token.Text.Whitespace, ' ')",
  "(13038, Token.Literal.String.Double, '\"${darwin_base_archive}\"')",
  "(13062, Token.Text.NewLine, '\\n')",
  "(13063, Token.Text.Whitespace, '\\t      ')",
  "(13070, Token.Text, 'cd')",
  "(13072, Token.Text.Whitespace, ' ')",
  "(13073, Token.Literal.String.Double, '\"$darwin_curdir\"')",
  "(13089, Token.Text.NewLine, '\\n')",
  "(13090, Token.Text.Whitespace, '\\t      ')",
  "(13097, Token.Text, '$rm')",
  "(13100, Token.Text.Whitespace, ' ')",
  "(13101, Token.Literal.String.Double, '\"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"')",
  "(13172, Token.Text.NewLine, '\\n')",
  "(13173, Token.Text.Whitespace, '\\t    ')",
  "(13178, Token.Text, 'done')",
  "(13182, Token.Text.Whitespace, ' ')",
  "(13183, Token.Comment.Single, '# $darwin_arches')",
  "(13199, Token.Text.NewLine, '\\n')",
  "(13200, Token.Text.Whitespace, '      ')",
  "(13206, Token.Comment.Single, '## Okay now we have a bunch of thin objects, gotta fatten them up :)')",
  "(13274, Token.Text.NewLine, '\\n')",
  "(13275, Token.Text.Whitespace, '\\t    ')",
  "(13280, Token.Text, 'darwin_filelist=`find')",
  "(13301, Token.Text.Whitespace, ' ')",
  "(13302, Token.Text, 'unfat-$$')",
  "(13310, Token.Text.Whitespace, ' ')",
  "(13311, Token.Text, '-type')",
  "(13316, Token.Text.Whitespace, ' ')",
  "(13317, Token.Text, 'f')",
  "(13318, Token.Text.Whitespace, ' ')",
  "(13319, Token.Text, '-name')",
  "(13324, Token.Text.Whitespace, ' ')",
  "(13325, Token.Text, '\\\\*.o')",
  "(13329, Token.Text.Whitespace, ' ')",
  "(13330, Token.Text, '-print')",
  "(13336, Token.Text.Whitespace, ' ')",
  "(13337, Token.Text, '-o')",
  "(13339, Token.Text.Whitespace, ' ')",
  "(13340, Token.Text, '-name')",
  "(13345, Token.Text.Whitespace, ' ')",
  "(13346, Token.Text, '\\\\*.lo')",
  "(13351, Token.Text.Whitespace, ' ')",
  "(13352, Token.Text, '-print|')",
  "(13359, Token.Text.Whitespace, ' ')",
  "(13360, Token.Text, 'xargs')",
  "(13365, Token.Text.Whitespace, ' ')",
  "(13366, Token.Text, 'basename')",
  "(13374, Token.Text.Whitespace, ' ')",
  "(13375, Token.Text, '|')",
  "(13376, Token.Text.Whitespace, ' ')",
  "(13377, Token.Text, 'sort')",
  "(13381, Token.Text.Whitespace, ' ')",
  "(13382, Token.Text, '-u')",
  "(13384, Token.Text.Whitespace, ' ')",
  "(13385, Token.Text, '|')",
  "(13386, Token.Text.Whitespace, ' ')",
  "(13387, Token.Text, '$NL2SP`')",
  "(13394, Token.Text.NewLine, '\\n')",
  "(13395, Token.Text.Whitespace, '\\t    ')",
  "(13400, Token.Text, 'darwin_file=')",
  "(13412, Token.Text.NewLine, '\\n')",
  "(13413, Token.Text.Whitespace, '\\t    ')",
  "(13418, Token.Text, 'darwin_files=')",
  "(13431, Token.Text.NewLine, '\\n')",
  "(13432, Token.Text.Whitespace, '\\t    ')",
  "(13437, Token.Text, 'for')",
  "(13440, Token.Text.Whitespace, ' ')",
  "(13441, Token.Text, 'darwin_file')",
  "(13452, Token.Text.Whitespace, ' ')",
  "(13453, Token.Text, 'in')",
  "(13455, Token.Text.Whitespace, ' ')",
  "(13456, Token.Text, '$darwin_filelist;')",
  "(13473, Token.Text.Whitespace, ' ')",
  "(13474, Token.Text, 'do')",
  "(13476, Token.Text.NewLine, '\\n')",
  "(13477, Token.Text.Whitespace, '\\t      ')",
  "(13484, Token.Text, 'darwin_files=`find')",
  "(13502, Token.Text.Whitespace, ' ')",
  "(13503, Token.Text, 'unfat-$$')",
  "(13511, Token.Text.Whitespace, ' ')",
  "(13512, Token.Text, '-name')",
  "(13517, Token.Text.Whitespace, ' ')",
  "(13518, Token.Text, '$darwin_file')",
  "(13530, Token.Text.Whitespace, ' ')",
  "(13531, Token.Text, '-print')",
  "(13537, Token.Text.Whitespace, ' ')",
  "(13538, Token.Text, '|')",
  "(13539, Token.Text.Whitespace, ' ')",
  "(13540, Token.Text, '$NL2SP`')",
  "(13547, Token.Text.NewLine, '\\n')",
  "(13548, Token.Text.Whitespace, '\\t      ')",
  "(13555, Token.Text, 'lipo')",
  "(13559, Token.Text.Whitespace, ' ')",
  "(13560, Token.Text, '-create')",
  "(13567, Token.Text.Whitespace, ' ')",
  "(13568, Token.Text, '-output')",
  "(13575, Token.Text.Whitespace, ' ')",
  "(13576, Token.Literal.String.Double, '\"$darwin_file\"')",
  "(13590, Token.Text.Whitespace, ' ')",
  "(13591, Token.Text, '$darwin_files')",
  "(13604, Token.Text.NewLine, '\\n')",
  "(13605, Token.Text.Whitespace, '\\t    ')",
  "(13610, Token.Text, 'done')",
  "(13614, Token.Text.Whitespace, ' ')",
  "(13615, Token.Comment.Single, '# $darwin_filelist')",
  "(13633, Token.Text.NewLine, '\\n')",
  "(13634, Token.Text.Whitespace, '\\t    ')",
  "(13639, Token.Text, '${rm}r')",
  "(13645, Token.Text.Whitespace, ' ')",
  "(13646, Token.Text, 'unfat-$$')",
  "(13654, Token.Text.NewLine, '\\n')",
  "(13655, Token.Text.Whitespace, '\\t    ')",
  "(13660, Token.Text, 'cd')",
  "(13662, Token.Text.Whitespace, ' ')",
  "(13663, Token.Literal.String.Double, '\"$darwin_orig_dir\"')",
  "(13681, Token.Text.NewLine, '\\n')",
  "(13682, Token.Text.Whitespace, '\\t  ')",
  "(13685, Token.Text, 'else')",
  "(13689, Token.Text.NewLine, '\\n')",
  "(13690, Token.Text.Whitespace, '\\t    ')",
  "(13695, Token.Text, 'cd')",
  "(13697, Token.Text.Whitespace, ' ')",
  "(13698, Token.Literal.String.Double, '\"$darwin_orig_dir\"')",
  "(13716, Token.Text.NewLine, '\\n')",
  "(13717, Token.Text.Whitespace, ' \\t    ')",
  "(13723, Token.Text, 'func_extract_an_archive')",
  "(13746, Token.Text.Whitespace, ' ')",
  "(13747, Token.Literal.String.Double, '\"$my_xdir\"')",
  "(13757, Token.Text.Whitespace, ' ')",
  "(13758, Token.Literal.String.Double, '\"$my_xabs\"')",
  "(13768, Token.Text.NewLine, '\\n')",
  "(13769, Token.Text.Whitespace, '\\t  ')",
  "(13772, Token.Text, 'fi')",
  "(13774, Token.Text.Whitespace, ' ')",
  "(13775, Token.Comment.Single, '# $darwin_arches')",
  "(13791, Token.Text.NewLine, '\\n')",
  "(13792, Token.Text.Whitespace, '\\t')",
  "(13793, Token.Text, 'fi')",
  "(13795, Token.Text.Whitespace, ' ')",
  "(13796, Token.Comment.Single, '# $run')",
  "(13802, Token.Text.NewLine, '\\n')",
  "(13803, Token.Text.Whitespace, '\\t')",
  "(13804, Token.Text, ';;')",
  "(13806, Token.Text.NewLine, '\\n')",
  "(13807, Token.Text.Whitespace, '      ')",
  "(13813, Token.Text, '*)')",
  "(13815, Token.Text.NewLine, '\\n')",
  "(13816, Token.Text.Whitespace, '        ')",
  "(13824, Token.Text, 'func_extract_an_archive')",
  "(13847, Token.Text.Whitespace, ' ')",
  "(13848, Token.Literal.String.Double, '\"$my_xdir\"')",
  "(13858, Token.Text.Whitespace, ' ')",
  "(13859, Token.Literal.String.Double, '\"$my_xabs\"')",
  "(13869, Token.Text.NewLine, '\\n')",
  "(13870, Token.Text.Whitespace, '        ')",
  "(13878, Token.Text, ';;')",
  "(13880, Token.Text.NewLine, '\\n')",
  "(13881, Token.Text.Whitespace, '      ')",
  "(13887, Token.Text, 'esac')",
  "(13891, Token.Text.NewLine, '\\n')",
  "(13892, Token.Text.Whitespace, '      ')",
  "(13898, Token.Text, 'my_oldobjs=\"$my_oldobjs')",
  "(13921, Token.Text.Whitespace, ' ')",
  "(13922, Token.Literal.String.Double, '\"`find $my_xdir -name \\\\*.$objext -print -o -name \\\\*.lo -print | $NL2SP`\\n    done\\n    func_extract_archives_result=\"')",
  "(14037, Token.Text, '$my_oldobjs\"')",
  "(14049, Token.Text.NewLine, '\\n')",
  "(14050, Token.Text, '}')",
  "(14051, Token.Text.NewLine, '\\n')",
  "(14052, Token.Comment.Single, '# End of Shell function definitions')",
  "(14087, Token.Text.NewLine, '\\n')",
  "(14088, Token.Comment.Single, '#####################################')",
  "(14125, Token.Text.NewLine, '\\n\\n')",
  "(14127, Token.Comment.Single, '# Darwin sucks')",
  "(14141, Token.Text.NewLine, '\\n')",
  "(14142, Token.Text, 'eval')",
  "(14146, Token.Text.Whitespace, ' ')",
  "(14147, Token.Text, 'std_shrext=\\\\\"$shrext_cmds\\\\\"')",
  "(14174, Token.Text.NewLine, '\\n\\n')",
  "(14176, Token.Name.Variable, 'disable_libs')",
  "(14188, Token.Operator.Equal, '=')",
  "(14189, Token.Text, 'no')",
  "(14191, Token.Text.NewLine, '\\n\\n')",
  "(14193, Token.Comment.Single, '# Parse our command line options once, thoroughly.')",
  "(14243, Token.Text.NewLine, '\\n')",
  "(14244, Token.Text, 'while')",
  "(14249, Token.Text.Whitespace, ' ')",
  "(14250, Token.Text, 'test')",
  "(14254, Token.Text.Whitespace, ' ')",
  "(14255, Token.Literal.String.Double, '\"$#\"')",
  "(14259, Token.Text.Whitespace, ' ')",
  "(14260, Token.Text, '-gt')",
  "(14263, Token.Text.Whitespace, ' ')",
  "(14264, Token.Text, '0')",
  "(14265, Token.Text.NewLine, '\\n')",
  "(14266, Token.Text, 'do')",
  "(14268, Token.Text.NewLine, '\\n')",
  "(14269, Token.Text.Whitespace, '  ')",
  "(14271, Token.Text, 'arg=\"$1\"')",
  "(14279, Token.Text.NewLine, '\\n')",
  "(14280, Token.Text.Whitespace, '  ')",
  "(14282, Token.Text, 'shift')",
  "(14287, Token.Text.NewLine, '\\n\\n')",
  "(14289, Token.Text.Whitespace, '  ')",
  "(14291, Token.Text, 'case')",
  "(14295, Token.Text.Whitespace, ' ')",
  "(14296, Token.Text, '$arg')",
  "(14300, Token.Text.Whitespace, ' ')",
  "(14301, Token.Text, 'in')",
  "(14303, Token.Text.NewLine, '\\n')",
  "(14304, Token.Text.Whitespace, '  ')",
  "(14306, Token.Text, '-*=*)')",
  "(14311, Token.Text.Whitespace, ' ')",
  "(14312, Token.Text, 'optarg=`$echo')",
  "(14325, Token.Text.Whitespace, ' ')",
  "(14326, Token.Literal.String.Double, '\"X$arg\"')",
  "(14333, Token.Text.Whitespace, ' ')",
  "(14334, Token.Text, '|')",
  "(14335, Token.Text.Whitespace, ' ')",
  "(14336, Token.Text, '$Xsed')",
  "(14341, Token.Text.Whitespace, ' ')",
  "(14342, Token.Text, '-e')",
  "(14344, Token.Text.Whitespace, ' ')",
  "(14345, Token.Literal.String.Single, \"'s/[-_a-zA-Z0-9]*=//'\")",
  "(14366, Token.Text, '`')",
  "(14367, Token.Text.Whitespace, ' ')",
  "(14368, Token.Text, ';;')",
  "(14370, Token.Text.NewLine, '\\n')",
  "(14371, Token.Text.Whitespace, '  ')",
  "(14373, Token.Text, '*)')",
  "(14375, Token.Text.Whitespace, ' ')",
  "(14376, Token.Text, 'optarg=')",
  "(14383, Token.Text.Whitespace, ' ')",
  "(14384, Token.Text, ';;')",
  "(14386, Token.Text.NewLine, '\\n')",
  "(14387, Token.Text.Whitespace, '  ')",
  "(14389, Token.Text, 'esac')",
  "(14393, Token.Text.NewLine, '\\n\\n')",
  "(14395, Token.Text.Whitespace, '  ')",
  "(14397, Token.Comment.Single, '# If the previous option needs an argument, assign it.')",
  "(14451, Token.Text.NewLine, '\\n')",
  "(14452, Token.Text.Whitespace, '  ')",
  "(14454, Token.Text, 'if')",
  "(14456, Token.Text.Whitespace, ' ')",
  "(14457, Token.Text, 'test')",
  "(14461, Token.Text.Whitespace, ' ')",
  "(14462, Token.Text, '-n')",
  "(14464, Token.Text.Whitespace, ' ')",
  "(14465, Token.Literal.String.Double, '\"$prev\"')",
  "(14472, Token.Text, ';')",
  "(14473, Token.Text.Whitespace, ' ')",
  "(14474, Token.Text, 'then')",
  "(14478, Token.Text.NewLine, '\\n')",
  "(14479, Token.Text.Whitespace, '    ')",
  "(14483, Token.Text, 'case')",
  "(14487, Token.Text.Whitespace, ' ')",
  "(14488, Token.Text, '$prev')",
  "(14493, Token.Text.Whitespace, ' ')",
  "(14494, Token.Text, 'in')",
  "(14496, Token.Text.NewLine, '\\n')",
  "(14497, Token.Text.Whitespace, '    ')",
  "(14501, Token.Text, 'execute_dlfiles)')",
  "(14517, Token.Text.NewLine, '\\n')",
  "(14518, Token.Text.Whitespace, '      ')",
  "(14524, Token.Text, 'execute_dlfiles=\"$execute_dlfiles')",
  "(14557, Token.Text.Whitespace, ' ')",
  "(14558, Token.Text, '$arg\"')",
  "(14563, Token.Text.NewLine, '\\n')",
  "(14564, Token.Text.Whitespace, '      ')",
  "(14570, Token.Text, ';;')",
  "(14572, Token.Text.NewLine, '\\n')",
  "(14573, Token.Text.Whitespace, '    ')",
  "(14577, Token.Text, 'tag)')",
  "(14581, Token.Text.NewLine, '\\n')",
  "(14582, Token.Text.Whitespace, '      ')",
  "(14588, Token.Text, 'tagname=\"$arg\"')",
  "(14602, Token.Text.NewLine, '\\n')",
  "(14603, Token.Text.Whitespace, '      ')",
  "(14609, Token.Text, 'preserve_args=\"${preserve_args}=$arg\"')",
  "(14646, Token.Text.NewLine, '\\n\\n')",
  "(14648, Token.Text.Whitespace, '      ')",
  "(14654, Token.Comment.Single, '# Check whether tagname contains only valid characters')",
  "(14708, Token.Text.NewLine, '\\n')",
  "(14709, Token.Text.Whitespace, '      ')",
  "(14715, Token.Text, 'case')",
  "(14719, Token.Text.Whitespace, ' ')",
  "(14720, Token.Text, '$tagname')",
  "(14728, Token.Text.Whitespace, ' ')",
  "(14729, Token.Text, 'in')",
  "(14731, Token.Text.NewLine, '\\n')",
  "(14732, Token.Text.Whitespace, '      ')",
  "(14738, Token.Text, '*[!-_A-Za-z0-9,/]*)')",
  "(14757, Token.Text.NewLine, '\\n')",
  "(14758, Token.Text.Whitespace, '\\t')",
  "(14759, Token.Text, '$echo')",
  "(14764, Token.Text.Whitespace, ' ')",
  "(14765, Token.Literal.String.Double, '\"$progname: invalid tag name: $tagname\"')",
  "(14804, Token.Text.Whitespace, ' ')",
  "(14805, Token.Text, '1>&2')",
  "(14809, Token.Text.NewLine, '\\n')",
  "(14810, Token.Text.Whitespace, '\\t')",
  "(14811, Token.Text, 'exit')",
  "(14815, Token.Text.Whitespace, ' ')",
  "(14816, Token.Text, '$EXIT_FAILURE')",
  "(14829, Token.Text.NewLine, '\\n')",
  "(14830, Token.Text.Whitespace, '\\t')",
  "(14831, Token.Text, ';;')",
  "(14833, Token.Text.NewLine, '\\n')",
  "(14834, Token.Text.Whitespace, '      ')",
  "(14840, Token.Text, 'esac')",
  "(14844, Token.Text.NewLine, '\\n\\n')",
  "(14846, Token.Text.Whitespace, '      ')",
  "(14852, Token.Text, 'case')",
  "(14856, Token.Text.Whitespace, ' ')",
  "(14857, Token.Text, '$tagname')",
  "(14865, Token.Text.Whitespace, ' ')",
  "(14866, Token.Text, 'in')",
  "(14868, Token.Text.NewLine, '\\n')",
  "(14869, Token.Text.Whitespace, '      ')",
  "(14875, Token.Text, 'CC)')",
  "(14878, Token.Text.NewLine, '\\n')",
  "(14879, Token.Text.Whitespace, '\\t')",
  "(14880, Token.Comment.Single, '# Don\\'t test for the \"default\" C tag, as we know, it\\'s there, but')",
  "(14945, Token.Text.NewLine, '\\n')",
  "(14946, Token.Text.Whitespace, '\\t')",
  "(14947, Token.Comment.Single, '# not specially marked.')",
  "(14970, Token.Text.NewLine, '\\n')",
  "(14971, Token.Text.Whitespace, '\\t')",
  "(14972, Token.Text, ';;')",
  "(14974, Token.Text.NewLine, '\\n')",
  "(14975, Token.Text.Whitespace, '      ')",
  "(14981, Token.Text, '*)')",
  "(14983, Token.Text.NewLine, '\\n')",
  "(14984, Token.Text.Whitespace, '\\t')",
  "(14985, Token.Text, 'if')",
  "(14987, Token.Text.Whitespace, ' ')",
  "(14988, Token.Text, 'grep')",
  "(14992, Token.Text.Whitespace, ' ')",
  "(14993, Token.Literal.String.Double, '\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$\"')",
  "(15037, Token.Text.Whitespace, ' ')",
  "(15038, Token.Text, '<')",
  "(15039, Token.Text.Whitespace, ' ')",
  "(15040, Token.Literal.String.Double, '\"$progpath\"')",
  "(15051, Token.Text.Whitespace, ' ')",
  "(15052, Token.Text, '>')",
  "(15053, Token.Text.Whitespace, ' ')",
  "(15054, Token.Text, '/dev/null;')",
  "(15064, Token.Text.Whitespace, ' ')",
  "(15065, Token.Text, 'then')",
  "(15069, Token.Text.NewLine, '\\n')",
  "(15070, Token.Text.Whitespace, '\\t  ')",
  "(15073, Token.Text, 'taglist=\"$taglist')",
  "(15090, Token.Text.Whitespace, ' ')",
  "(15091, Token.Text, '$tagname\"')",
  "(15100, Token.Text.NewLine, '\\n')",
  "(15101, Token.Text.Whitespace, '\\t  ')",
  "(15104, Token.Comment.Single, '# Evaluate the configuration.')",
  "(15133, Token.Text.NewLine, '\\n')",
  "(15134, Token.Text.Whitespace, '\\t  ')",
  "(15137, Token.Text, 'eval')",
  "(15141, Token.Text.Whitespace, ' ')",
  "(15142, Token.Literal.String.Double, '\"`${SED} -n -e \\'/^# ### BEGIN LIBTOOL TAG CONFIG: \\'$tagname\\'$/,/^# ### END LIBTOOL TAG CONFIG: \\'$tagname\\'$/p\\' < $progpath`\"')",
  "(15265, Token.Text.NewLine, '\\n')",
  "(15266, Token.Text.Whitespace, '\\t')",
  "(15267, Token.Text, 'else')",
  "(15271, Token.Text.NewLine, '\\n')",
  "(15272, Token.Text.Whitespace, '\\t  ')",
  "(15275, Token.Text, '$echo')",
  "(15280, Token.Text.Whitespace, ' ')",
  "(15281, Token.Literal.String.Double, '\"$progname: ignoring unknown tag $tagname\"')",
  "(15323, Token.Text.Whitespace, ' ')",
  "(15324, Token.Text, '1>&2')",
  "(15328, Token.Text.NewLine, '\\n')",
  "(15329, Token.Text.Whitespace, '\\t')",
  "(15330, Token.Text, 'fi')",
  "(15332, Token.Text.NewLine, '\\n')",
  "(15333, Token.Text.Whitespace, '\\t')",
  "(15334, Token.Text, ';;')",
  "(15336, Token.Text.NewLine, '\\n')",
  "(15337, Token.Text.Whitespace, '      ')",
  "(15343, Token.Text, 'esac')",
  "(15347, Token.Text.NewLine, '\\n')",
  "(15348, Token.Text.Whitespace, '      ')",
  "(15354, Token.Text, ';;')",
  "(15356, Token.Text.NewLine, '\\n')",
  "(15357, Token.Text.Whitespace, '    ')",
  "(15361, Token.Text, '*)')",
  "(15363, Token.Text.NewLine, '\\n')",
  "(15364, Token.Text.Whitespace, '      ')",
  "(15370, Token.Text, 'eval')",
  "(15374, Token.Text.Whitespace, ' ')",
  "(15375, Token.Literal.String.Double, '\"$prev=\\\\$arg\"')",
  "(15388, Token.Text.NewLine, '\\n')",
  "(15389, Token.Text.Whitespace, '      ')",
  "(15395, Token.Text, ';;')",
  "(15397, Token.Text.NewLine, '\\n')",
  "(15398, Token.Text.Whitespace, '    ')",
  "(15402, Token.Text, 'esac')",
  "(15406, Token.Text.NewLine, '\\n\\n')",
  "(15408, Token.Text.Whitespace, '    ')",
  "(15412, Token.Text, 'prev=')",
  "(15417, Token.Text.NewLine, '\\n')",
  "(15418, Token.Text.Whitespace, '    ')",
  "(15422, Token.Text, 'prevopt=')",
  "(15430, Token.Text.NewLine, '\\n')",
  "(15431, Token.Text.Whitespace, '    ')",
  "(15435, Token.Text, 'continue')",
  "(15443, Token.Text.NewLine, '\\n')",
  "(15444, Token.Text.Whitespace, '  ')",
  "(15446, Token.Text, 'fi')",
  "(15448, Token.Text.NewLine, '\\n\\n')",
  "(15450, Token.Text.Whitespace, '  ')",
  "(15452, Token.Comment.Single, '# Have we seen a non-optional argument yet?')",
  "(15495, Token.Text.NewLine, '\\n')",
  "(15496, Token.Text.Whitespace, '  ')",
  "(15498, Token.Text, 'case')",
  "(15502, Token.Text.Whitespace, ' ')",
  "(15503, Token.Text, '$arg')",
  "(15507, Token.Text.Whitespace, ' ')",
  "(15508, Token.Text, 'in')",
  "(15510, Token.Text.NewLine, '\\n')",
  "(15511, Token.Text.Whitespace, '  ')",
  "(15513, Token.Text, '--help)')",
  "(15520, Token.Text.NewLine, '\\n')",
  "(15521, Token.Text.Whitespace, '    ')",
  "(15525, Token.Text, 'show_help=yes')",
  "(15538, Token.Text.NewLine, '\\n')",
  "(15539, Token.Text.Whitespace, '    ')",
  "(15543, Token.Text, ';;')",
  "(15545, Token.Text.NewLine, '\\n\\n')",
  "(15547, Token.Text.Whitespace, '  ')",
  "(15549, Token.Text, '--version)')",
  "(15559, Token.Text.NewLine, '\\n')",
  "(15560, Token.Text.Whitespace, '    ')",
  "(15564, Token.Text, '$echo')",
  "(15569, Token.Text.Whitespace, ' ')",
  "(15570, Token.Literal.String.Double, '\"$PROGRAM (GNU $PACKAGE) $VERSION$TIMESTAMP\"')",
  "(15614, Token.Text.NewLine, '\\n')",
  "(15615, Token.Text.Whitespace, '    ')",
  "(15619, Token.Text, '$echo')",
  "(15624, Token.Text.NewLine, '\\n')",
  "(15625, Token.Text.Whitespace, '    ')",
  "(15629, Token.Text, '$echo')",
  "(15634, Token.Text.Whitespace, ' ')",
  "(15635, Token.Literal.String.Double, '\"Copyright (C) 2005  Free Software Foundation, Inc.\"')",
  "(15687, Token.Text.NewLine, '\\n')",
  "(15688, Token.Text.Whitespace, '    ')",
  "(15692, Token.Text, '$echo')",
  "(15697, Token.Text.Whitespace, ' ')",
  "(15698, Token.Literal.String.Double, '\"This is free software; see the source for copying conditions.  There is NO\"')",
  "(15774, Token.Text.NewLine, '\\n')",
  "(15775, Token.Text.Whitespace, '    ')",
  "(15779, Token.Text, '$echo')",
  "(15784, Token.Text.Whitespace, ' ')",
  "(15785, Token.Literal.String.Double, '\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"')",
  "(15862, Token.Text.NewLine, '\\n')",
  "(15863, Token.Text.Whitespace, '    ')",
  "(15867, Token.Text, 'exit')",
  "(15871, Token.Text.Whitespace, ' ')",
  "(15872, Token.Text, '$?')",
  "(15874, Token.Text.NewLine, '\\n')",
  "(15875, Token.Text.Whitespace, '    ')",
  "(15879, Token.Text, ';;')",
  "(15881, Token.Text.NewLine, '\\n\\n')",
  "(15883, Token.Text.Whitespace, '  ')",
  "(15885, Token.Text, '--config)')",
  "(15894, Token.Text.NewLine, '\\n')",
  "(15895, Token.Text.Whitespace, '    ')",
  "(15899, Token.Text, '${SED}')",
  "(15905, Token.Text.Whitespace, ' ')",
  "(15906, Token.Text, '-e')",
  "(15908, Token.Text.Whitespace, ' ')",
  "(15909, Token.Literal.String.Single, \"'1,/^# ### BEGIN LIBTOOL CONFIG/d'\")",
  "(15943, Token.Text.Whitespace, ' ')",
  "(15944, Token.Text, '-e')",
  "(15946, Token.Text.Whitespace, ' ')",
  "(15947, Token.Literal.String.Single, \"'/^# ### END LIBTOOL CONFIG/,$d'\")",
  "(15979, Token.Text.Whitespace, ' ')",
  "(15980, Token.Text, '$progpath')",
  "(15989, Token.Text.NewLine, '\\n')",
  "(15990, Token.Text.Whitespace, '    ')",
  "(15994, Token.Comment.Single, '# Now print the configurations for the tags.')",
  "(16038, Token.Text.NewLine, '\\n')",
  "(16039, Token.Text.Whitespace, '    ')",
  "(16043, Token.Text, 'for')",
  "(16046, Token.Text.Whitespace, ' ')",
  "(16047, Token.Text, 'tagname')",
  "(16054, Token.Text.Whitespace, ' ')",
  "(16055, Token.Text, 'in')",
  "(16057, Token.Text.Whitespace, ' ')",
  "(16058, Token.Text, '$taglist;')",
  "(16067, Token.Text.Whitespace, ' ')",
  "(16068, Token.Text, 'do')",
  "(16070, Token.Text.NewLine, '\\n')",
  "(16071, Token.Text.Whitespace, '      ')",
  "(16077, Token.Text, '${SED}')",
  "(16083, Token.Text.Whitespace, ' ')",
  "(16084, Token.Text, '-n')",
  "(16086, Token.Text.Whitespace, ' ')",
  "(16087, Token.Text, '-e')",
  "(16089, Token.Text.Whitespace, ' ')",
  "(16090, Token.Literal.String.Double, '\"/^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$/,/^# ### END LIBTOOL TAG CONFIG: $tagname$/p\"')",
  "(16180, Token.Text.Whitespace, ' ')",
  "(16181, Token.Text, '<')",
  "(16182, Token.Text.Whitespace, ' ')",
  "(16183, Token.Literal.String.Double, '\"$progpath\"')",
  "(16194, Token.Text.NewLine, '\\n')",
  "(16195, Token.Text.Whitespace, '    ')",
  "(16199, Token.Text, 'done')",
  "(16203, Token.Text.NewLine, '\\n')",
  "(16204, Token.Text.Whitespace, '    ')",
  "(16208, Token.Text, 'exit')",
  "(16212, Token.Text.Whitespace, ' ')",
  "(16213, Token.Text, '$?')",
  "(16215, Token.Text.NewLine, '\\n')",
  "(16216, Token.Text.Whitespace, '    ')",
  "(16220, Token.Text, ';;')",
  "(16222, Token.Text.NewLine, '\\n\\n')",
  "(16224, Token.Text.Whitespace, '  ')",
  "(16226, Token.Text, '--debug)')",
  "(16234, Token.Text.NewLine, '\\n')",
  "(16235, Token.Text.Whitespace, '    ')",
  "(16239, Token.Text, '$echo')",
  "(16244, Token.Text.Whitespace, ' ')",
  "(16245, Token.Literal.String.Double, '\"$progname: enabling shell trace mode\"')",
  "(16283, Token.Text.NewLine, '\\n')",
  "(16284, Token.Text.Whitespace, '    ')",
  "(16288, Token.Text, 'set')",
  "(16291, Token.Text.Whitespace, ' ')",
  "(16292, Token.Text, '-x')",
  "(16294, Token.Text.NewLine, '\\n')",
  "(16295, Token.Text.Whitespace, '    ')",
  "(16299, Token.Text, 'preserve_args=\"$preserve_args')",
  "(16328, Token.Text.Whitespace, ' ')",
  "(16329, Token.Text, '$arg\"')",
  "(16334, Token.Text.NewLine, '\\n')",
  "(16335, Token.Text.Whitespace, '    ')",
  "(16339, Token.Text, ';;')",
  "(16341, Token.Text.NewLine, '\\n\\n')",
  "(16343, Token.Text.Whitespace, '  ')",
  "(16345, Token.Text, '--dry-run')",
  "(16354, Token.Text.Whitespace, ' ')",
  "(16355, Token.Text, '|')",
  "(16356, Token.Text.Whitespace, ' ')",
  "(16357, Token.Text, '-n)')",
  "(16360, Token.Text.NewLine, '\\n')",
  "(16361, Token.Text.Whitespace, '    ')",
  "(16365, Token.Text, 'run=:')",
  "(16370, Token.Text.NewLine, '\\n')",
  "(16371, Token.Text.Whitespace, '    ')",
  "(16375, Token.Text, ';;')",
  "(16377, Token.Text.NewLine, '\\n\\n')",
  "(16379, Token.Text.Whitespace, '  ')",
  "(16381, Token.Text, '--features)')",
  "(16392, Token.Text.NewLine, '\\n')",
  "(16393, Token.Text.Whitespace, '    ')",
  "(16397, Token.Text, '$echo')",
  "(16402, Token.Text.Whitespace, ' ')",
  "(16403, Token.Literal.String.Double, '\"host: $host\"')",
  "(16416, Token.Text.NewLine, '\\n')",
  "(16417, Token.Text.Whitespace, '    ')",
  "(16421, Token.Text, 'if')",
  "(16423, Token.Text.Whitespace, ' ')",
  "(16424, Token.Text, 'test')",
  "(16428, Token.Text.Whitespace, ' ')",
  "(16429, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(16450, Token.Text.Whitespace, ' ')",
  "(16451, Token.Text, '=')",
  "(16452, Token.Text.Whitespace, ' ')",
  "(16453, Token.Text, 'yes;')",
  "(16457, Token.Text.Whitespace, ' ')",
  "(16458, Token.Text, 'then')",
  "(16462, Token.Text.NewLine, '\\n')",
  "(16463, Token.Text.Whitespace, '      ')",
  "(16469, Token.Text, '$echo')",
  "(16474, Token.Text.Whitespace, ' ')",
  "(16475, Token.Literal.String.Double, '\"enable shared libraries\"')",
  "(16500, Token.Text.NewLine, '\\n')",
  "(16501, Token.Text.Whitespace, '    ')",
  "(16505, Token.Text, 'else')",
  "(16509, Token.Text.NewLine, '\\n')",
  "(16510, Token.Text.Whitespace, '      ')",
  "(16516, Token.Text, '$echo')",
  "(16521, Token.Text.Whitespace, ' ')",
  "(16522, Token.Literal.String.Double, '\"disable shared libraries\"')",
  "(16548, Token.Text.NewLine, '\\n')",
  "(16549, Token.Text.Whitespace, '    ')",
  "(16553, Token.Text, 'fi')",
  "(16555, Token.Text.NewLine, '\\n')",
  "(16556, Token.Text.Whitespace, '    ')",
  "(16560, Token.Text, 'if')",
  "(16562, Token.Text.Whitespace, ' ')",
  "(16563, Token.Text, 'test')",
  "(16567, Token.Text.Whitespace, ' ')",
  "(16568, Token.Literal.String.Double, '\"$build_old_libs\"')",
  "(16585, Token.Text.Whitespace, ' ')",
  "(16586, Token.Text, '=')",
  "(16587, Token.Text.Whitespace, ' ')",
  "(16588, Token.Text, 'yes;')",
  "(16592, Token.Text.Whitespace, ' ')",
  "(16593, Token.Text, 'then')",
  "(16597, Token.Text.NewLine, '\\n')",
  "(16598, Token.Text.Whitespace, '      ')",
  "(16604, Token.Text, '$echo')",
  "(16609, Token.Text.Whitespace, ' ')",
  "(16610, Token.Literal.String.Double, '\"enable static libraries\"')",
  "(16635, Token.Text.NewLine, '\\n')",
  "(16636, Token.Text.Whitespace, '    ')",
  "(16640, Token.Text, 'else')",
  "(16644, Token.Text.NewLine, '\\n')",
  "(16645, Token.Text.Whitespace, '      ')",
  "(16651, Token.Text, '$echo')",
  "(16656, Token.Text.Whitespace, ' ')",
  "(16657, Token.Literal.String.Double, '\"disable static libraries\"')",
  "(16683, Token.Text.NewLine, '\\n')",
  "(16684, Token.Text.Whitespace, '    ')",
  "(16688, Token.Text, 'fi')",
  "(16690, Token.Text.NewLine, '\\n')",
  "(16691, Token.Text.Whitespace, '    ')",
  "(16695, Token.Text, 'exit')",
  "(16699, Token.Text.Whitespace, ' ')",
  "(16700, Token.Text, '$?')",
  "(16702, Token.Text.NewLine, '\\n')",
  "(16703, Token.Text.Whitespace, '    ')",
  "(16707, Token.Text, ';;')",
  "(16709, Token.Text.NewLine, '\\n\\n')",
  "(16711, Token.Text.Whitespace, '  ')",
  "(16713, Token.Text, '--finish)')",
  "(16722, Token.Text.Whitespace, ' ')",
  "(16723, Token.Text, 'mode=\"finish\"')",
  "(16736, Token.Text.Whitespace, ' ')",
  "(16737, Token.Text, ';;')",
  "(16739, Token.Text.NewLine, '\\n\\n')",
  "(16741, Token.Text.Whitespace, '  ')",
  "(16743, Token.Text, '--mode)')",
  "(16750, Token.Text.Whitespace, ' ')",
  "(16751, Token.Text, 'prevopt=\"--mode\"')",
  "(16767, Token.Text.Whitespace, ' ')",
  "(16768, Token.Text, 'prev=mode')",
  "(16777, Token.Text.Whitespace, ' ')",
  "(16778, Token.Text, ';;')",
  "(16780, Token.Text.NewLine, '\\n')",
  "(16781, Token.Text.Whitespace, '  ')",
  "(16783, Token.Text, '--mode=*)')",
  "(16792, Token.Text.Whitespace, ' ')",
  "(16793, Token.Text, 'mode=\"$optarg\"')",
  "(16807, Token.Text.Whitespace, ' ')",
  "(16808, Token.Text, ';;')",
  "(16810, Token.Text.NewLine, '\\n\\n')",
  "(16812, Token.Text.Whitespace, '  ')",
  "(16814, Token.Text, '--preserve-dup-deps)')",
  "(16834, Token.Text.Whitespace, ' ')",
  "(16835, Token.Text, 'duplicate_deps=\"yes\"')",
  "(16855, Token.Text.Whitespace, ' ')",
  "(16856, Token.Text, ';;')",
  "(16858, Token.Text.NewLine, '\\n\\n')",
  "(16860, Token.Text.Whitespace, '  ')",
  "(16862, Token.Text, '--quiet')",
  "(16869, Token.Text.Whitespace, ' ')",
  "(16870, Token.Text, '|')",
  "(16871, Token.Text.Whitespace, ' ')",
  "(16872, Token.Text, '--silent)')",
  "(16881, Token.Text.NewLine, '\\n')",
  "(16882, Token.Text.Whitespace, '    ')",
  "(16886, Token.Text, 'show=:')",
  "(16892, Token.Text.NewLine, '\\n')",
  "(16893, Token.Text.Whitespace, '    ')",
  "(16897, Token.Text, 'preserve_args=\"$preserve_args')",
  "(16926, Token.Text.Whitespace, ' ')",
  "(16927, Token.Text, '$arg\"')",
  "(16932, Token.Text.NewLine, '\\n')",
  "(16933, Token.Text.Whitespace, '    ')",
  "(16937, Token.Text, ';;')",
  "(16939, Token.Text.NewLine, '\\n\\n')",
  "(16941, Token.Text.Whitespace, '  ')",
  "(16943, Token.Text, '--tag)')",
  "(16949, Token.Text.NewLine, '\\n')",
  "(16950, Token.Text.Whitespace, '    ')",
  "(16954, Token.Text, 'prevopt=\"--tag\"')",
  "(16969, Token.Text.NewLine, '\\n')",
  "(16970, Token.Text.Whitespace, '    ')",
  "(16974, Token.Text, 'prev=tag')",
  "(16982, Token.Text.NewLine, '\\n')",
  "(16983, Token.Text.Whitespace, '    ')",
  "(16987, Token.Text, 'preserve_args=\"$preserve_args')",
  "(17016, Token.Text.Whitespace, ' ')",
  "(17017, Token.Text, '--tag\"')",
  "(17023, Token.Text.NewLine, '\\n')",
  "(17024, Token.Text.Whitespace, '    ')",
  "(17028, Token.Text, ';;')",
  "(17030, Token.Text.NewLine, '\\n')",
  "(17031, Token.Text.Whitespace, '  ')",
  "(17033, Token.Text, '--tag=*)')",
  "(17041, Token.Text.NewLine, '\\n')",
  "(17042, Token.Text.Whitespace, '    ')",
  "(17046, Token.Text, 'set')",
  "(17049, Token.Text.Whitespace, ' ')",
  "(17050, Token.Text, 'tag')",
  "(17053, Token.Text.Whitespace, ' ')",
  "(17054, Token.Literal.String.Double, '\"$optarg\"')",
  "(17063, Token.Text.Whitespace, ' ')",
  "(17064, Token.Text, '${1+\"$@\"}')",
  "(17073, Token.Text.NewLine, '\\n')",
  "(17074, Token.Text.Whitespace, '    ')",
  "(17078, Token.Text, 'shift')",
  "(17083, Token.Text.NewLine, '\\n')",
  "(17084, Token.Text.Whitespace, '    ')",
  "(17088, Token.Text, 'prev=tag')",
  "(17096, Token.Text.NewLine, '\\n')",
  "(17097, Token.Text.Whitespace, '    ')",
  "(17101, Token.Text, 'preserve_args=\"$preserve_args')",
  "(17130, Token.Text.Whitespace, ' ')",
  "(17131, Token.Text, '--tag\"')",
  "(17137, Token.Text.NewLine, '\\n')",
  "(17138, Token.Text.Whitespace, '    ')",
  "(17142, Token.Text, ';;')",
  "(17144, Token.Text.NewLine, '\\n\\n')",
  "(17146, Token.Text.Whitespace, '  ')",
  "(17148, Token.Text, '-dlopen)')",
  "(17156, Token.Text.NewLine, '\\n')",
  "(17157, Token.Text.Whitespace, '    ')",
  "(17161, Token.Text, 'prevopt=\"-dlopen\"')",
  "(17178, Token.Text.NewLine, '\\n')",
  "(17179, Token.Text.Whitespace, '    ')",
  "(17183, Token.Text, 'prev=execute_dlfiles')",
  "(17203, Token.Text.NewLine, '\\n')",
  "(17204, Token.Text.Whitespace, '    ')",
  "(17208, Token.Text, ';;')",
  "(17210, Token.Text.NewLine, '\\n\\n')",
  "(17212, Token.Text.Whitespace, '  ')",
  "(17214, Token.Text, '-*)')",
  "(17217, Token.Text.NewLine, '\\n')",
  "(17218, Token.Text.Whitespace, '    ')",
  "(17222, Token.Text, '$echo')",
  "(17227, Token.Text.Whitespace, ' ')",
  "(17228, Token.Literal.String.Double, '\"$modename: unrecognized option \\\\`$arg\\'\"')",
  "(17268, Token.Text.Whitespace, ' ')",
  "(17269, Token.Text, '1>&2')",
  "(17273, Token.Text.NewLine, '\\n')",
  "(17274, Token.Text.Whitespace, '    ')",
  "(17278, Token.Text, '$echo')",
  "(17283, Token.Text.Whitespace, ' ')",
  "(17284, Token.Literal.String.Double, '\"$help\"')",
  "(17291, Token.Text.Whitespace, ' ')",
  "(17292, Token.Text, '1>&2')",
  "(17296, Token.Text.NewLine, '\\n')",
  "(17297, Token.Text.Whitespace, '    ')",
  "(17301, Token.Text, 'exit')",
  "(17305, Token.Text.Whitespace, ' ')",
  "(17306, Token.Text, '$EXIT_FAILURE')",
  "(17319, Token.Text.NewLine, '\\n')",
  "(17320, Token.Text.Whitespace, '    ')",
  "(17324, Token.Text, ';;')",
  "(17326, Token.Text.NewLine, '\\n\\n')",
  "(17328, Token.Text.Whitespace, '  ')",
  "(17330, Token.Text, '*)')",
  "(17332, Token.Text.NewLine, '\\n')",
  "(17333, Token.Text.Whitespace, '    ')",
  "(17337, Token.Text, 'nonopt=\"$arg\"')",
  "(17350, Token.Text.NewLine, '\\n')",
  "(17351, Token.Text.Whitespace, '    ')",
  "(17355, Token.Text, 'break')",
  "(17360, Token.Text.NewLine, '\\n')",
  "(17361, Token.Text.Whitespace, '    ')",
  "(17365, Token.Text, ';;')",
  "(17367, Token.Text.NewLine, '\\n')",
  "(17368, Token.Text.Whitespace, '  ')",
  "(17370, Token.Text, 'esac')",
  "(17374, Token.Text.NewLine, '\\n')",
  "(17375, Token.Text, 'done')",
  "(17379, Token.Text.NewLine, '\\n\\n')",
  "(17381, Token.Text, 'if')",
  "(17383, Token.Text.Whitespace, ' ')",
  "(17384, Token.Text, 'test')",
  "(17388, Token.Text.Whitespace, ' ')",
  "(17389, Token.Text, '-n')",
  "(17391, Token.Text.Whitespace, ' ')",
  "(17392, Token.Literal.String.Double, '\"$prevopt\"')",
  "(17402, Token.Text, ';')",
  "(17403, Token.Text.Whitespace, ' ')",
  "(17404, Token.Text, 'then')",
  "(17408, Token.Text.NewLine, '\\n')",
  "(17409, Token.Text.Whitespace, '  ')",
  "(17411, Token.Text, '$echo')",
  "(17416, Token.Text.Whitespace, ' ')",
  "(17417, Token.Literal.String.Double, '\"$modename: option \\\\`$prevopt\\' requires an argument\"')",
  "(17469, Token.Text.Whitespace, ' ')",
  "(17470, Token.Text, '1>&2')",
  "(17474, Token.Text.NewLine, '\\n')",
  "(17475, Token.Text.Whitespace, '  ')",
  "(17477, Token.Text, '$echo')",
  "(17482, Token.Text.Whitespace, ' ')",
  "(17483, Token.Literal.String.Double, '\"$help\"')",
  "(17490, Token.Text.Whitespace, ' ')",
  "(17491, Token.Text, '1>&2')",
  "(17495, Token.Text.NewLine, '\\n')",
  "(17496, Token.Text.Whitespace, '  ')",
  "(17498, Token.Text, 'exit')",
  "(17502, Token.Text.Whitespace, ' ')",
  "(17503, Token.Text, '$EXIT_FAILURE')",
  "(17516, Token.Text.NewLine, '\\n')",
  "(17517, Token.Text, 'fi')",
  "(17519, Token.Text.NewLine, '\\n\\n')",
  "(17521, Token.Text, 'case')",
  "(17525, Token.Text.Whitespace, ' ')",
  "(17526, Token.Text, '$disable_libs')",
  "(17539, Token.Text.Whitespace, ' ')",
  "(17540, Token.Text, 'in')",
  "(17542, Token.Text.NewLine, '\\n')",
  "(17543, Token.Text, 'no)')",
  "(17546, Token.Text.Whitespace, ' \\n  ')",
  "(17550, Token.Text, ';;')",
  "(17552, Token.Text.NewLine, '\\n')",
  "(17553, Token.Text, 'shared)')",
  "(17560, Token.Text.NewLine, '\\n')",
  "(17561, Token.Text.Whitespace, '  ')",
  "(17563, Token.Text, 'build_libtool_libs=no')",
  "(17584, Token.Text.NewLine, '\\n')",
  "(17585, Token.Text.Whitespace, '  ')",
  "(17587, Token.Text, 'build_old_libs=yes')",
  "(17605, Token.Text.NewLine, '\\n')",
  "(17606, Token.Text.Whitespace, '  ')",
  "(17608, Token.Text, ';;')",
  "(17610, Token.Text.NewLine, '\\n')",
  "(17611, Token.Text, 'static)')",
  "(17618, Token.Text.NewLine, '\\n')",
  "(17619, Token.Text.Whitespace, '  ')",
  "(17621, Token.Text, 'build_old_libs=`case')",
  "(17641, Token.Text.Whitespace, ' ')",
  "(17642, Token.Text, '$build_libtool_libs')",
  "(17661, Token.Text.Whitespace, ' ')",
  "(17662, Token.Text, 'in')",
  "(17664, Token.Text.Whitespace, ' ')",
  "(17665, Token.Text, 'yes)')",
  "(17669, Token.Text.Whitespace, ' ')",
  "(17670, Token.Text, 'echo')",
  "(17674, Token.Text.Whitespace, ' ')",
  "(17675, Token.Text, 'no;;')",
  "(17679, Token.Text.Whitespace, ' ')",
  "(17680, Token.Text, '*)')",
  "(17682, Token.Text.Whitespace, ' ')",
  "(17683, Token.Text, 'echo')",
  "(17687, Token.Text.Whitespace, ' ')",
  "(17688, Token.Text, 'yes;;')",
  "(17693, Token.Text.Whitespace, ' ')",
  "(17694, Token.Text, 'esac`')",
  "(17699, Token.Text.NewLine, '\\n')",
  "(17700, Token.Text.Whitespace, '  ')",
  "(17702, Token.Text, ';;')",
  "(17704, Token.Text.NewLine, '\\n')",
  "(17705, Token.Text, 'esac')",
  "(17709, Token.Text.NewLine, '\\n\\n')",
  "(17711, Token.Comment.Single, '# If this variable is set in any of the actions, the command in it')",
  "(17777, Token.Text.NewLine, '\\n')",
  "(17778, Token.Comment.Single, '# will be execed at the end.  This prevents here-documents from being')",
  "(17847, Token.Text.NewLine, '\\n')",
  "(17848, Token.Comment.Single, '# left over by shells.')",
  "(17870, Token.Text.NewLine, '\\n')",
  "(17871, Token.Name.Variable, 'exec_cmd')",
  "(17879, Token.Operator.Equal, '=')",
  "(17880, Token.Text.NewLine, '\\n\\n')",
  "(17882, Token.Text, 'if')",
  "(17884, Token.Text.Whitespace, ' ')",
  "(17885, Token.Text, 'test')",
  "(17889, Token.Text.Whitespace, ' ')",
  "(17890, Token.Text, '-z')",
  "(17892, Token.Text.Whitespace, ' ')",
  "(17893, Token.Literal.String.Double, '\"$show_help\"')",
  "(17905, Token.Text, ';')",
  "(17906, Token.Text.Whitespace, ' ')",
  "(17907, Token.Text, 'then')",
  "(17911, Token.Text.NewLine, '\\n\\n')",
  "(17913, Token.Text.Whitespace, '  ')",
  "(17915, Token.Comment.Single, '# Infer the operation mode.')",
  "(17942, Token.Text.NewLine, '\\n')",
  "(17943, Token.Text.Whitespace, '  ')",
  "(17945, Token.Text, 'if')",
  "(17947, Token.Text.Whitespace, ' ')",
  "(17948, Token.Text, 'test')",
  "(17952, Token.Text.Whitespace, ' ')",
  "(17953, Token.Text, '-z')",
  "(17955, Token.Text.Whitespace, ' ')",
  "(17956, Token.Literal.String.Double, '\"$mode\"')",
  "(17963, Token.Text, ';')",
  "(17964, Token.Text.Whitespace, ' ')",
  "(17965, Token.Text, 'then')",
  "(17969, Token.Text.NewLine, '\\n')",
  "(17970, Token.Text.Whitespace, '    ')",
  "(17974, Token.Text, '$echo')",
  "(17979, Token.Text.Whitespace, ' ')",
  "(17980, Token.Literal.String.Double, '\"*** Warning: inferring the mode of operation is deprecated.\"')",
  "(18041, Token.Text.Whitespace, ' ')",
  "(18042, Token.Text, '1>&2')",
  "(18046, Token.Text.NewLine, '\\n')",
  "(18047, Token.Text.Whitespace, '    ')",
  "(18051, Token.Text, '$echo')",
  "(18056, Token.Text.Whitespace, ' ')",
  "(18057, Token.Literal.String.Double, '\"*** Future versions of Libtool will require --mode=MODE be specified.\"')",
  "(18128, Token.Text.Whitespace, ' ')",
  "(18129, Token.Text, '1>&2')",
  "(18133, Token.Text.NewLine, '\\n')",
  "(18134, Token.Text.Whitespace, '    ')",
  "(18138, Token.Text, 'case')",
  "(18142, Token.Text.Whitespace, ' ')",
  "(18143, Token.Text, '$nonopt')",
  "(18150, Token.Text.Whitespace, ' ')",
  "(18151, Token.Text, 'in')",
  "(18153, Token.Text.NewLine, '\\n')",
  "(18154, Token.Text.Whitespace, '    ')",
  "(18158, Token.Text, '*cc')",
  "(18161, Token.Text.Whitespace, ' ')",
  "(18162, Token.Text, '|')",
  "(18163, Token.Text.Whitespace, ' ')",
  "(18164, Token.Text, 'cc*')",
  "(18167, Token.Text.Whitespace, ' ')",
  "(18168, Token.Text, '|')",
  "(18169, Token.Text.Whitespace, ' ')",
  "(18170, Token.Text, '*++')",
  "(18173, Token.Text.Whitespace, ' ')",
  "(18174, Token.Text, '|')",
  "(18175, Token.Text.Whitespace, ' ')",
  "(18176, Token.Text, 'gcc*')",
  "(18180, Token.Text.Whitespace, ' ')",
  "(18181, Token.Text, '|')",
  "(18182, Token.Text.Whitespace, ' ')",
  "(18183, Token.Text, '*-gcc*')",
  "(18189, Token.Text.Whitespace, ' ')",
  "(18190, Token.Text, '|')",
  "(18191, Token.Text.Whitespace, ' ')",
  "(18192, Token.Text, 'g++*')",
  "(18196, Token.Text.Whitespace, ' ')",
  "(18197, Token.Text, '|')",
  "(18198, Token.Text.Whitespace, ' ')",
  "(18199, Token.Text, 'xlc*)')",
  "(18204, Token.Text.NewLine, '\\n')",
  "(18205, Token.Text.Whitespace, '      ')",
  "(18211, Token.Text, 'mode=link')",
  "(18220, Token.Text.NewLine, '\\n')",
  "(18221, Token.Text.Whitespace, '      ')",
  "(18227, Token.Text, 'for')",
  "(18230, Token.Text.Whitespace, ' ')",
  "(18231, Token.Text, 'arg')",
  "(18234, Token.Text.NewLine, '\\n')",
  "(18235, Token.Text.Whitespace, '      ')",
  "(18241, Token.Text, 'do')",
  "(18243, Token.Text.NewLine, '\\n')",
  "(18244, Token.Text.Whitespace, '\\t')",
  "(18245, Token.Text, 'case')",
  "(18249, Token.Text.Whitespace, ' ')",
  "(18250, Token.Text, '$arg')",
  "(18254, Token.Text.Whitespace, ' ')",
  "(18255, Token.Text, 'in')",
  "(18257, Token.Text.NewLine, '\\n')",
  "(18258, Token.Text.Whitespace, '\\t')",
  "(18259, Token.Text, '-c)')",
  "(18262, Token.Text.NewLine, '\\n')",
  "(18263, Token.Text.Whitespace, '\\t   ')",
  "(18267, Token.Text, 'mode=compile')",
  "(18279, Token.Text.NewLine, '\\n')",
  "(18280, Token.Text.Whitespace, '\\t   ')",
  "(18284, Token.Text, 'break')",
  "(18289, Token.Text.NewLine, '\\n')",
  "(18290, Token.Text.Whitespace, '\\t   ')",
  "(18294, Token.Text, ';;')",
  "(18296, Token.Text.NewLine, '\\n')",
  "(18297, Token.Text.Whitespace, '\\t')",
  "(18298, Token.Text, 'esac')",
  "(18302, Token.Text.NewLine, '\\n')",
  "(18303, Token.Text.Whitespace, '      ')",
  "(18309, Token.Text, 'done')",
  "(18313, Token.Text.NewLine, '\\n')",
  "(18314, Token.Text.Whitespace, '      ')",
  "(18320, Token.Text, ';;')",
  "(18322, Token.Text.NewLine, '\\n')",
  "(18323, Token.Text.Whitespace, '    ')",
  "(18327, Token.Text, '*db')",
  "(18330, Token.Text.Whitespace, ' ')",
  "(18331, Token.Text, '|')",
  "(18332, Token.Text.Whitespace, ' ')",
  "(18333, Token.Text, '*dbx')",
  "(18337, Token.Text.Whitespace, ' ')",
  "(18338, Token.Text, '|')",
  "(18339, Token.Text.Whitespace, ' ')",
  "(18340, Token.Text, '*strace')",
  "(18347, Token.Text.Whitespace, ' ')",
  "(18348, Token.Text, '|')",
  "(18349, Token.Text.Whitespace, ' ')",
  "(18350, Token.Text, '*truss)')",
  "(18357, Token.Text.NewLine, '\\n')",
  "(18358, Token.Text.Whitespace, '      ')",
  "(18364, Token.Text, 'mode=execute')",
  "(18376, Token.Text.NewLine, '\\n')",
  "(18377, Token.Text.Whitespace, '      ')",
  "(18383, Token.Text, ';;')",
  "(18385, Token.Text.NewLine, '\\n')",
  "(18386, Token.Text.Whitespace, '    ')",
  "(18390, Token.Text, '*install*|cp|mv)')",
  "(18406, Token.Text.NewLine, '\\n')",
  "(18407, Token.Text.Whitespace, '      ')",
  "(18413, Token.Text, 'mode=install')",
  "(18425, Token.Text.NewLine, '\\n')",
  "(18426, Token.Text.Whitespace, '      ')",
  "(18432, Token.Text, ';;')",
  "(18434, Token.Text.NewLine, '\\n')",
  "(18435, Token.Text.Whitespace, '    ')",
  "(18439, Token.Text, '*rm)')",
  "(18443, Token.Text.NewLine, '\\n')",
  "(18444, Token.Text.Whitespace, '      ')",
  "(18450, Token.Text, 'mode=uninstall')",
  "(18464, Token.Text.NewLine, '\\n')",
  "(18465, Token.Text.Whitespace, '      ')",
  "(18471, Token.Text, ';;')",
  "(18473, Token.Text.NewLine, '\\n')",
  "(18474, Token.Text.Whitespace, '    ')",
  "(18478, Token.Text, '*)')",
  "(18480, Token.Text.NewLine, '\\n')",
  "(18481, Token.Text.Whitespace, '      ')",
  "(18487, Token.Comment.Single, '# If we have no mode, but dlfiles were specified, then do execute mode.')",
  "(18558, Token.Text.NewLine, '\\n')",
  "(18559, Token.Text.Whitespace, '      ')",
  "(18565, Token.Text, 'test')",
  "(18569, Token.Text.Whitespace, ' ')",
  "(18570, Token.Text, '-n')",
  "(18572, Token.Text.Whitespace, ' ')",
  "(18573, Token.Literal.String.Double, '\"$execute_dlfiles\"')",
  "(18591, Token.Text.Whitespace, ' ')",
  "(18592, Token.Text, '&&')",
  "(18594, Token.Text.Whitespace, ' ')",
  "(18595, Token.Text, 'mode=execute')",
  "(18607, Token.Text.NewLine, '\\n\\n')",
  "(18609, Token.Text.Whitespace, '      ')",
  "(18615, Token.Comment.Single, '# Just use the default operation mode.')",
  "(18653, Token.Text.NewLine, '\\n')",
  "(18654, Token.Text.Whitespace, '      ')",
  "(18660, Token.Text, 'if')",
  "(18662, Token.Text.Whitespace, ' ')",
  "(18663, Token.Text, 'test')",
  "(18667, Token.Text.Whitespace, ' ')",
  "(18668, Token.Text, '-z')",
  "(18670, Token.Text.Whitespace, ' ')",
  "(18671, Token.Literal.String.Double, '\"$mode\"')",
  "(18678, Token.Text, ';')",
  "(18679, Token.Text.Whitespace, ' ')",
  "(18680, Token.Text, 'then')",
  "(18684, Token.Text.NewLine, '\\n')",
  "(18685, Token.Text.Whitespace, '\\t')",
  "(18686, Token.Text, 'if')",
  "(18688, Token.Text.Whitespace, ' ')",
  "(18689, Token.Text, 'test')",
  "(18693, Token.Text.Whitespace, ' ')",
  "(18694, Token.Text, '-n')",
  "(18696, Token.Text.Whitespace, ' ')",
  "(18697, Token.Literal.String.Double, '\"$nonopt\"')",
  "(18706, Token.Text, ';')",
  "(18707, Token.Text.Whitespace, ' ')",
  "(18708, Token.Text, 'then')",
  "(18712, Token.Text.NewLine, '\\n')",
  "(18713, Token.Text.Whitespace, '\\t  ')",
  "(18716, Token.Text, '$echo')",
  "(18721, Token.Text.Whitespace, ' ')",
  "(18722, Token.Literal.String.Double, '\"$modename: warning: cannot infer operation mode from \\\\`$nonopt\\'\"')",
  "(18787, Token.Text.Whitespace, ' ')",
  "(18788, Token.Text, '1>&2')",
  "(18792, Token.Text.NewLine, '\\n')",
  "(18793, Token.Text.Whitespace, '\\t')",
  "(18794, Token.Text, 'else')",
  "(18798, Token.Text.NewLine, '\\n')",
  "(18799, Token.Text.Whitespace, '\\t  ')",
  "(18802, Token.Text, '$echo')",
  "(18807, Token.Text.Whitespace, ' ')",
  "(18808, Token.Literal.String.Double, '\"$modename: warning: cannot infer operation mode without MODE-ARGS\"')",
  "(18875, Token.Text.Whitespace, ' ')",
  "(18876, Token.Text, '1>&2')",
  "(18880, Token.Text.NewLine, '\\n')",
  "(18881, Token.Text.Whitespace, '\\t')",
  "(18882, Token.Text, 'fi')",
  "(18884, Token.Text.NewLine, '\\n')",
  "(18885, Token.Text.Whitespace, '      ')",
  "(18891, Token.Text, 'fi')",
  "(18893, Token.Text.NewLine, '\\n')",
  "(18894, Token.Text.Whitespace, '      ')",
  "(18900, Token.Text, ';;')",
  "(18902, Token.Text.NewLine, '\\n')",
  "(18903, Token.Text.Whitespace, '    ')",
  "(18907, Token.Text, 'esac')",
  "(18911, Token.Text.NewLine, '\\n')",
  "(18912, Token.Text.Whitespace, '  ')",
  "(18914, Token.Text, 'fi')",
  "(18916, Token.Text.NewLine, '\\n\\n')",
  "(18918, Token.Text.Whitespace, '  ')",
  "(18920, Token.Comment.Single, '# Only execute mode is allowed to have -dlopen flags.')",
  "(18973, Token.Text.NewLine, '\\n')",
  "(18974, Token.Text.Whitespace, '  ')",
  "(18976, Token.Text, 'if')",
  "(18978, Token.Text.Whitespace, ' ')",
  "(18979, Token.Text, 'test')",
  "(18983, Token.Text.Whitespace, ' ')",
  "(18984, Token.Text, '-n')",
  "(18986, Token.Text.Whitespace, ' ')",
  "(18987, Token.Literal.String.Double, '\"$execute_dlfiles\"')",
  "(19005, Token.Text.Whitespace, ' ')",
  "(19006, Token.Text, '&&')",
  "(19008, Token.Text.Whitespace, ' ')",
  "(19009, Token.Text, 'test')",
  "(19013, Token.Text.Whitespace, ' ')",
  "(19014, Token.Literal.String.Double, '\"$mode\"')",
  "(19021, Token.Text.Whitespace, ' ')",
  "(19022, Token.Text, '!=')",
  "(19024, Token.Text.Whitespace, ' ')",
  "(19025, Token.Text, 'execute;')",
  "(19033, Token.Text.Whitespace, ' ')",
  "(19034, Token.Text, 'then')",
  "(19038, Token.Text.NewLine, '\\n')",
  "(19039, Token.Text.Whitespace, '    ')",
  "(19043, Token.Text, '$echo')",
  "(19048, Token.Text.Whitespace, ' ')",
  "(19049, Token.Literal.String.Double, '\"$modename: unrecognized option \\\\`-dlopen\\'\"')",
  "(19092, Token.Text.Whitespace, ' ')",
  "(19093, Token.Text, '1>&2')",
  "(19097, Token.Text.NewLine, '\\n')",
  "(19098, Token.Text.Whitespace, '    ')",
  "(19102, Token.Text, '$echo')",
  "(19107, Token.Text.Whitespace, ' ')",
  "(19108, Token.Literal.String.Double, '\"$help\"')",
  "(19115, Token.Text.Whitespace, ' ')",
  "(19116, Token.Text, '1>&2')",
  "(19120, Token.Text.NewLine, '\\n')",
  "(19121, Token.Text.Whitespace, '    ')",
  "(19125, Token.Text, 'exit')",
  "(19129, Token.Text.Whitespace, ' ')",
  "(19130, Token.Text, '$EXIT_FAILURE')",
  "(19143, Token.Text.NewLine, '\\n')",
  "(19144, Token.Text.Whitespace, '  ')",
  "(19146, Token.Text, 'fi')",
  "(19148, Token.Text.NewLine, '\\n\\n')",
  "(19150, Token.Text.Whitespace, '  ')",
  "(19152, Token.Comment.Single, '# Change the help message to a mode-specific one.')",
  "(19201, Token.Text.NewLine, '\\n')",
  "(19202, Token.Text.Whitespace, '  ')",
  "(19204, Token.Text, 'generic_help=\"$help\"')",
  "(19224, Token.Text.NewLine, '\\n')",
  "(19225, Token.Text.Whitespace, '  ')",
  "(19227, Token.Text, 'help=\"Try')",
  "(19236, Token.Text.Whitespace, ' ')",
  "(19237, Token.Text, '\\\\`$modename')",
  "(19248, Token.Text.Whitespace, ' ')",
  "(19249, Token.Text, '--help')",
  "(19255, Token.Text.Whitespace, ' ')",
  "(19256, Token.Text, \"--mode=$mode'\")",
  "(19269, Token.Text.Whitespace, ' ')",
  "(19270, Token.Text, 'for')",
  "(19273, Token.Text.Whitespace, ' ')",
  "(19274, Token.Text, 'more')",
  "(19278, Token.Text.Whitespace, ' ')",
  "(19279, Token.Text, 'information.\"')",
  "(19292, Token.Text.NewLine, '\\n\\n')",
  "(19294, Token.Text.Whitespace, '  ')",
  "(19296, Token.Comment.Single, '# These modes are in order of execution frequency so that they run quickly.')",
  "(19371, Token.Text.NewLine, '\\n')",
  "(19372, Token.Text.Whitespace, '  ')",
  "(19374, Token.Text, 'case')",
  "(19378, Token.Text.Whitespace, ' ')",
  "(19379, Token.Text, '$mode')",
  "(19384, Token.Text.Whitespace, ' ')",
  "(19385, Token.Text, 'in')",
  "(19387, Token.Text.NewLine, '\\n')",
  "(19388, Token.Text.Whitespace, '  ')",
  "(19390, Token.Comment.Single, '# libtool compile mode')",
  "(19412, Token.Text.NewLine, '\\n')",
  "(19413, Token.Text.Whitespace, '  ')",
  "(19415, Token.Text, 'compile)')",
  "(19423, Token.Text.NewLine, '\\n')",
  "(19424, Token.Text.Whitespace, '    ')",
  "(19428, Token.Text, 'modename=\"$modename:')",
  "(19448, Token.Text.Whitespace, ' ')",
  "(19449, Token.Text, 'compile\"')",
  "(19457, Token.Text.NewLine, '\\n')",
  "(19458, Token.Text.Whitespace, '    ')",
  "(19462, Token.Comment.Single, '# Get the compilation command and the source file.')",
  "(19512, Token.Text.NewLine, '\\n')",
  "(19513, Token.Text.Whitespace, '    ')",
  "(19517, Token.Text, 'base_compile=')",
  "(19530, Token.Text.NewLine, '\\n')",
  "(19531, Token.Text.Whitespace, '    ')",
  "(19535, Token.Text, 'srcfile=\"$nonopt\"')",
  "(19552, Token.Text.Whitespace, '  ')",
  "(19554, Token.Comment.Single, '#  always keep a non-empty value in \"srcfile\"')",
  "(19599, Token.Text.NewLine, '\\n')",
  "(19600, Token.Text.Whitespace, '    ')",
  "(19604, Token.Text, 'suppress_opt=yes')",
  "(19620, Token.Text.NewLine, '\\n')",
  "(19621, Token.Text.Whitespace, '    ')",
  "(19625, Token.Text, 'suppress_output=')",
  "(19641, Token.Text.NewLine, '\\n')",
  "(19642, Token.Text.Whitespace, '    ')",
  "(19646, Token.Text, 'arg_mode=normal')",
  "(19661, Token.Text.NewLine, '\\n')",
  "(19662, Token.Text.Whitespace, '    ')",
  "(19666, Token.Text, 'libobj=')",
  "(19673, Token.Text.NewLine, '\\n')",
  "(19674, Token.Text.Whitespace, '    ')",
  "(19678, Token.Text, 'later=')",
  "(19684, Token.Text.NewLine, '\\n\\n')",
  "(19686, Token.Text.Whitespace, '    ')",
  "(19690, Token.Text, 'for')",
  "(19693, Token.Text.Whitespace, ' ')",
  "(19694, Token.Text, 'arg')",
  "(19697, Token.Text.NewLine, '\\n')",
  "(19698, Token.Text.Whitespace, '    ')",
  "(19702, Token.Text, 'do')",
  "(19704, Token.Text.NewLine, '\\n')",
  "(19705, Token.Text.Whitespace, '      ')",
  "(19711, Token.Text, 'case')",
  "(19715, Token.Text.Whitespace, ' ')",
  "(19716, Token.Text, '$arg_mode')",
  "(19725, Token.Text.Whitespace, ' ')",
  "(19726, Token.Text, 'in')",
  "(19728, Token.Text.NewLine, '\\n')",
  "(19729, Token.Text.Whitespace, '      ')",
  "(19735, Token.Text, 'arg')",
  "(19738, Token.Text.Whitespace, '  ')",
  "(19740, Token.Text, ')')",
  "(19741, Token.Text.NewLine, '\\n')",
  "(19742, Token.Text.Whitespace, '\\t')",
  "(19743, Token.Comment.Single, '# do not \"continue\".  Instead, add this to base_compile')",
  "(19798, Token.Text.NewLine, '\\n')",
  "(19799, Token.Text.Whitespace, '\\t')",
  "(19800, Token.Text, 'lastarg=\"$arg\"')",
  "(19814, Token.Text.NewLine, '\\n')",
  "(19815, Token.Text.Whitespace, '\\t')",
  "(19816, Token.Text, 'arg_mode=normal')",
  "(19831, Token.Text.NewLine, '\\n')",
  "(19832, Token.Text.Whitespace, '\\t')",
  "(19833, Token.Text, ';;')",
  "(19835, Token.Text.NewLine, '\\n\\n')",
  "(19837, Token.Text.Whitespace, '      ')",
  "(19843, Token.Text, 'target')",
  "(19849, Token.Text.Whitespace, ' ')",
  "(19850, Token.Text, ')')",
  "(19851, Token.Text.NewLine, '\\n')",
  "(19852, Token.Text.Whitespace, '\\t')",
  "(19853, Token.Text, 'libobj=\"$arg\"')",
  "(19866, Token.Text.NewLine, '\\n')",
  "(19867, Token.Text.Whitespace, '\\t')",
  "(19868, Token.Text, 'arg_mode=normal')",
  "(19883, Token.Text.NewLine, '\\n')",
  "(19884, Token.Text.Whitespace, '\\t')",
  "(19885, Token.Text, 'continue')",
  "(19893, Token.Text.NewLine, '\\n')",
  "(19894, Token.Text.Whitespace, '\\t')",
  "(19895, Token.Text, ';;')",
  "(19897, Token.Text.NewLine, '\\n\\n')",
  "(19899, Token.Text.Whitespace, '      ')",
  "(19905, Token.Text, 'normal')",
  "(19911, Token.Text.Whitespace, ' ')",
  "(19912, Token.Text, ')')",
  "(19913, Token.Text.NewLine, '\\n')",
  "(19914, Token.Text.Whitespace, '\\t')",
  "(19915, Token.Comment.Single, '# Accept any command-line options.')",
  "(19949, Token.Text.NewLine, '\\n')",
  "(19950, Token.Text.Whitespace, '\\t')",
  "(19951, Token.Text, 'case')",
  "(19955, Token.Text.Whitespace, ' ')",
  "(19956, Token.Text, '$arg')",
  "(19960, Token.Text.Whitespace, ' ')",
  "(19961, Token.Text, 'in')",
  "(19963, Token.Text.NewLine, '\\n')",
  "(19964, Token.Text.Whitespace, '\\t')",
  "(19965, Token.Text, '-o)')",
  "(19968, Token.Text.NewLine, '\\n')",
  "(19969, Token.Text.Whitespace, '\\t  ')",
  "(19972, Token.Text, 'if')",
  "(19974, Token.Text.Whitespace, ' ')",
  "(19975, Token.Text, 'test')",
  "(19979, Token.Text.Whitespace, ' ')",
  "(19980, Token.Text, '-n')",
  "(19982, Token.Text.Whitespace, ' ')",
  "(19983, Token.Literal.String.Double, '\"$libobj\"')",
  "(19992, Token.Text.Whitespace, ' ')",
  "(19993, Token.Text, ';')",
  "(19994, Token.Text.Whitespace, ' ')",
  "(19995, Token.Text, 'then')",
  "(19999, Token.Text.NewLine, '\\n')",
  "(20000, Token.Text.Whitespace, '\\t    ')",
  "(20005, Token.Text, '$echo')",
  "(20010, Token.Text.Whitespace, ' ')",
  "(20011, Token.Literal.String.Double, '\"$modename: you cannot specify \\\\`-o\\' more than once\"')",
  "(20063, Token.Text.Whitespace, ' ')",
  "(20064, Token.Text, '1>&2')",
  "(20068, Token.Text.NewLine, '\\n')",
  "(20069, Token.Text.Whitespace, '\\t    ')",
  "(20074, Token.Text, 'exit')",
  "(20078, Token.Text.Whitespace, ' ')",
  "(20079, Token.Text, '$EXIT_FAILURE')",
  "(20092, Token.Text.NewLine, '\\n')",
  "(20093, Token.Text.Whitespace, '\\t  ')",
  "(20096, Token.Text, 'fi')",
  "(20098, Token.Text.NewLine, '\\n')",
  "(20099, Token.Text.Whitespace, '\\t  ')",
  "(20102, Token.Text, 'arg_mode=target')",
  "(20117, Token.Text.NewLine, '\\n')",
  "(20118, Token.Text.Whitespace, '\\t  ')",
  "(20121, Token.Text, 'continue')",
  "(20129, Token.Text.NewLine, '\\n')",
  "(20130, Token.Text.Whitespace, '\\t  ')",
  "(20133, Token.Text, ';;')",
  "(20135, Token.Text.NewLine, '\\n\\n')",
  "(20137, Token.Text.Whitespace, '\\t')",
  "(20138, Token.Text, '-static')",
  "(20145, Token.Text.Whitespace, ' ')",
  "(20146, Token.Text, '|')",
  "(20147, Token.Text.Whitespace, ' ')",
  "(20148, Token.Text, '-prefer-pic')",
  "(20159, Token.Text.Whitespace, ' ')",
  "(20160, Token.Text, '|')",
  "(20161, Token.Text.Whitespace, ' ')",
  "(20162, Token.Text, '-prefer-non-pic)')",
  "(20178, Token.Text.NewLine, '\\n')",
  "(20179, Token.Text.Whitespace, '\\t  ')",
  "(20182, Token.Text, 'later=\"$later')",
  "(20195, Token.Text.Whitespace, ' ')",
  "(20196, Token.Text, '$arg\"')",
  "(20201, Token.Text.NewLine, '\\n')",
  "(20202, Token.Text.Whitespace, '\\t  ')",
  "(20205, Token.Text, 'continue')",
  "(20213, Token.Text.NewLine, '\\n')",
  "(20214, Token.Text.Whitespace, '\\t  ')",
  "(20217, Token.Text, ';;')",
  "(20219, Token.Text.NewLine, '\\n\\n')",
  "(20221, Token.Text.Whitespace, '\\t')",
  "(20222, Token.Text, '-no-suppress)')",
  "(20235, Token.Text.NewLine, '\\n')",
  "(20236, Token.Text.Whitespace, '\\t  ')",
  "(20239, Token.Text, 'suppress_opt=no')",
  "(20254, Token.Text.NewLine, '\\n')",
  "(20255, Token.Text.Whitespace, '\\t  ')",
  "(20258, Token.Text, 'continue')",
  "(20266, Token.Text.NewLine, '\\n')",
  "(20267, Token.Text.Whitespace, '\\t  ')",
  "(20270, Token.Text, ';;')",
  "(20272, Token.Text.NewLine, '\\n\\n')",
  "(20274, Token.Text.Whitespace, '\\t')",
  "(20275, Token.Text, '-Xcompiler)')",
  "(20286, Token.Text.NewLine, '\\n')",
  "(20287, Token.Text.Whitespace, '\\t  ')",
  "(20290, Token.Text, 'arg_mode=arg')",
  "(20302, Token.Text.Whitespace, '  ')",
  "(20304, Token.Comment.Single, '#  the next one goes into the \"base_compile\" arg list')",
  "(20357, Token.Text.NewLine, '\\n')",
  "(20358, Token.Text.Whitespace, '\\t  ')",
  "(20361, Token.Text, 'continue')",
  "(20369, Token.Text.Whitespace, '      ')",
  "(20375, Token.Comment.Single, '#  The current \"srcfile\" will either be retained or')",
  "(20426, Token.Text.NewLine, '\\n')",
  "(20427, Token.Text.Whitespace, '\\t  ')",
  "(20430, Token.Text, ';;')",
  "(20432, Token.Text.Whitespace, '            ')",
  "(20444, Token.Comment.Single, '#  replaced later.  I would guess that would be a bug.')",
  "(20498, Token.Text.NewLine, '\\n\\n')",
  "(20500, Token.Text.Whitespace, '\\t')",
  "(20501, Token.Text, '-Wc,*)')",
  "(20507, Token.Text.NewLine, '\\n')",
  "(20508, Token.Text.Whitespace, '\\t  ')",
  "(20511, Token.Text, 'args=`$echo')",
  "(20522, Token.Text.Whitespace, ' ')",
  "(20523, Token.Literal.String.Double, '\"X$arg\"')",
  "(20530, Token.Text.Whitespace, ' ')",
  "(20531, Token.Text, '|')",
  "(20532, Token.Text.Whitespace, ' ')",
  "(20533, Token.Text, '$Xsed')",
  "(20538, Token.Text.Whitespace, ' ')",
  "(20539, Token.Text, '-e')",
  "(20541, Token.Text.Whitespace, ' ')",
  "(20542, Token.Literal.String.Double, '\"s/^-Wc,//\"')",
  "(20553, Token.Text, '`')",
  "(20554, Token.Text.NewLine, '\\n')",
  "(20555, Token.Text.Whitespace, '\\t  ')",
  "(20558, Token.Text, 'lastarg=')",
  "(20566, Token.Text.NewLine, '\\n')",
  "(20567, Token.Text.Whitespace, '\\t  ')",
  "(20570, Token.Text, 'save_ifs=\"$IFS\";')",
  "(20586, Token.Text.Whitespace, ' ')",
  "(20587, Token.Text, \"IFS=','\")",
  "(20594, Token.Text.NewLine, '\\n')",
  "(20595, Token.Text.Whitespace, ' \\t  ')",
  "(20599, Token.Text, 'for')",
  "(20602, Token.Text.Whitespace, ' ')",
  "(20603, Token.Text, 'arg')",
  "(20606, Token.Text.Whitespace, ' ')",
  "(20607, Token.Text, 'in')",
  "(20609, Token.Text.Whitespace, ' ')",
  "(20610, Token.Text, '$args;')",
  "(20616, Token.Text.Whitespace, ' ')",
  "(20617, Token.Text, 'do')",
  "(20619, Token.Text.NewLine, '\\n')",
  "(20620, Token.Text.Whitespace, '\\t    ')",
  "(20625, Token.Text, 'IFS=\"$save_ifs\"')",
  "(20640, Token.Text.NewLine, '\\n\\n')",
  "(20642, Token.Text.Whitespace, '\\t    ')",
  "(20647, Token.Comment.Single, '# Double-quote args containing other shell metacharacters.')",
  "(20705, Token.Text.NewLine, '\\n')",
  "(20706, Token.Text.Whitespace, '\\t    ')",
  "(20711, Token.Comment.Single, '# Many Bourne shells cannot handle close brackets correctly')",
  "(20770, Token.Text.NewLine, '\\n')",
  "(20771, Token.Text.Whitespace, '\\t    ')",
  "(20776, Token.Comment.Single, '# in scan sets, so we specify it separately.')",
  "(20820, Token.Text.NewLine, '\\n')",
  "(20821, Token.Text.Whitespace, '\\t    ')",
  "(20826, Token.Text, 'case')",
  "(20830, Token.Text.Whitespace, ' ')",
  "(20831, Token.Text, '$arg')",
  "(20835, Token.Text.Whitespace, ' ')",
  "(20836, Token.Text, 'in')",
  "(20838, Token.Text.NewLine, '\\n')",
  "(20839, Token.Text.Whitespace, '\\t      ')",
  "(20846, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(20881, Token.Text.Whitespace, ' ')",
  "(20882, Token.Text, '\\\\')",
  "(20883, Token.Text.Whitespace, '\\t')",
  "(20884, Token.Text, ']*|*]*|\"\")')",
  "(20894, Token.Text.NewLine, '\\n')",
  "(20895, Token.Text.Whitespace, '\\t      ')",
  "(20902, Token.Text, 'arg=\"\\\\\"$arg\\\\\"\"')",
  "(20916, Token.Text.NewLine, '\\n')",
  "(20917, Token.Text.Whitespace, '\\t      ')",
  "(20924, Token.Text, ';;')",
  "(20926, Token.Text.NewLine, '\\n')",
  "(20927, Token.Text.Whitespace, '\\t    ')",
  "(20932, Token.Text, 'esac')",
  "(20936, Token.Text.NewLine, '\\n')",
  "(20937, Token.Text.Whitespace, '\\t    ')",
  "(20942, Token.Text, 'lastarg=\"$lastarg')",
  "(20959, Token.Text.Whitespace, ' ')",
  "(20960, Token.Text, '$arg\"')",
  "(20965, Token.Text.NewLine, '\\n')",
  "(20966, Token.Text.Whitespace, '\\t  ')",
  "(20969, Token.Text, 'done')",
  "(20973, Token.Text.NewLine, '\\n')",
  "(20974, Token.Text.Whitespace, '\\t  ')",
  "(20977, Token.Text, 'IFS=\"$save_ifs\"')",
  "(20992, Token.Text.NewLine, '\\n')",
  "(20993, Token.Text.Whitespace, '\\t  ')",
  "(20996, Token.Text, 'lastarg=`$echo')",
  "(21010, Token.Text.Whitespace, ' ')",
  "(21011, Token.Literal.String.Double, '\"X$lastarg\"')",
  "(21022, Token.Text.Whitespace, ' ')",
  "(21023, Token.Text, '|')",
  "(21024, Token.Text.Whitespace, ' ')",
  "(21025, Token.Text, '$Xsed')",
  "(21030, Token.Text.Whitespace, ' ')",
  "(21031, Token.Text, '-e')",
  "(21033, Token.Text.Whitespace, ' ')",
  "(21034, Token.Literal.String.Double, '\"s/^ //\"')",
  "(21042, Token.Text, '`')",
  "(21043, Token.Text.NewLine, '\\n\\n')",
  "(21045, Token.Text.Whitespace, '\\t  ')",
  "(21048, Token.Comment.Single, '# Add the arguments to base_compile.')",
  "(21084, Token.Text.NewLine, '\\n')",
  "(21085, Token.Text.Whitespace, '\\t  ')",
  "(21088, Token.Text, 'base_compile=\"$base_compile')",
  "(21115, Token.Text.Whitespace, ' ')",
  "(21116, Token.Text, '$lastarg\"')",
  "(21125, Token.Text.NewLine, '\\n')",
  "(21126, Token.Text.Whitespace, '\\t  ')",
  "(21129, Token.Text, 'continue')",
  "(21137, Token.Text.NewLine, '\\n')",
  "(21138, Token.Text.Whitespace, '\\t  ')",
  "(21141, Token.Text, ';;')",
  "(21143, Token.Text.NewLine, '\\n\\n')",
  "(21145, Token.Text.Whitespace, '\\t')",
  "(21146, Token.Text, '*')",
  "(21147, Token.Text.Whitespace, ' ')",
  "(21148, Token.Text, ')')",
  "(21149, Token.Text.NewLine, '\\n')",
  "(21150, Token.Text.Whitespace, '\\t  ')",
  "(21153, Token.Comment.Single, '# Accept the current argument as the source file.')",
  "(21202, Token.Text.NewLine, '\\n')",
  "(21203, Token.Text.Whitespace, '\\t  ')",
  "(21206, Token.Comment.Single, '# The previous \"srcfile\" becomes the current argument.')",
  "(21260, Token.Text.NewLine, '\\n')",
  "(21261, Token.Text.Whitespace, '\\t  ')",
  "(21264, Token.Comment.Single, '#')",
  "(21265, Token.Text.NewLine, '\\n')",
  "(21266, Token.Text.Whitespace, '\\t  ')",
  "(21269, Token.Text, 'lastarg=\"$srcfile\"')",
  "(21287, Token.Text.NewLine, '\\n')",
  "(21288, Token.Text.Whitespace, '\\t  ')",
  "(21291, Token.Text, 'srcfile=\"$arg\"')",
  "(21305, Token.Text.NewLine, '\\n')",
  "(21306, Token.Text.Whitespace, '\\t  ')",
  "(21309, Token.Text, ';;')",
  "(21311, Token.Text.NewLine, '\\n')",
  "(21312, Token.Text.Whitespace, '\\t')",
  "(21313, Token.Text, 'esac')",
  "(21317, Token.Text.Whitespace, '  ')",
  "(21319, Token.Comment.Single, '#  case $arg')",
  "(21331, Token.Text.NewLine, '\\n')",
  "(21332, Token.Text.Whitespace, '\\t')",
  "(21333, Token.Text, ';;')",
  "(21335, Token.Text.NewLine, '\\n')",
  "(21336, Token.Text.Whitespace, '      ')",
  "(21342, Token.Text, 'esac')",
  "(21346, Token.Text.Whitespace, '    ')",
  "(21350, Token.Comment.Single, '#  case $arg_mode')",
  "(21367, Token.Text.NewLine, '\\n\\n')",
  "(21369, Token.Text.Whitespace, '      ')",
  "(21375, Token.Comment.Single, '# Aesthetically quote the previous argument.')",
  "(21419, Token.Text.NewLine, '\\n')",
  "(21420, Token.Text.Whitespace, '      ')",
  "(21426, Token.Text, 'lastarg=`$echo')",
  "(21440, Token.Text.Whitespace, ' ')",
  "(21441, Token.Literal.String.Double, '\"X$lastarg\"')",
  "(21452, Token.Text.Whitespace, ' ')",
  "(21453, Token.Text, '|')",
  "(21454, Token.Text.Whitespace, ' ')",
  "(21455, Token.Text, '$Xsed')",
  "(21460, Token.Text.Whitespace, ' ')",
  "(21461, Token.Text, '-e')",
  "(21463, Token.Text.Whitespace, ' ')",
  "(21464, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(21482, Token.Text, '`')",
  "(21483, Token.Text.NewLine, '\\n\\n')",
  "(21485, Token.Text.Whitespace, '      ')",
  "(21491, Token.Text, 'case')",
  "(21495, Token.Text.Whitespace, ' ')",
  "(21496, Token.Text, '$lastarg')",
  "(21504, Token.Text.Whitespace, ' ')",
  "(21505, Token.Text, 'in')",
  "(21507, Token.Text.NewLine, '\\n')",
  "(21508, Token.Text.Whitespace, '      ')",
  "(21514, Token.Comment.Single, '# Double-quote args containing other shell metacharacters.')",
  "(21572, Token.Text.NewLine, '\\n')",
  "(21573, Token.Text.Whitespace, '      ')",
  "(21579, Token.Comment.Single, '# Many Bourne shells cannot handle close brackets correctly')",
  "(21638, Token.Text.NewLine, '\\n')",
  "(21639, Token.Text.Whitespace, '      ')",
  "(21645, Token.Comment.Single, '# in scan sets, and some SunOS ksh mistreat backslash-escaping')",
  "(21707, Token.Text.NewLine, '\\n')",
  "(21708, Token.Text.Whitespace, '      ')",
  "(21714, Token.Comment.Single, '# in scan sets (worked around with variable expansion),')",
  "(21769, Token.Text.NewLine, '\\n')",
  "(21770, Token.Text.Whitespace, '      ')",
  "(21776, Token.Comment.Single, \"# and furthermore cannot handle '|' '&' '(' ')' in scan sets \")",
  "(21837, Token.Text.NewLine, '\\n')",
  "(21838, Token.Text.Whitespace, '      ')",
  "(21844, Token.Comment.Single, '# at all, so we specify them separately.')",
  "(21884, Token.Text.NewLine, '\\n')",
  "(21885, Token.Text.Whitespace, '      ')",
  "(21891, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(21926, Token.Text.Whitespace, ' ')",
  "(21927, Token.Text, '\\\\')",
  "(21928, Token.Text.Whitespace, '\\t')",
  "(21929, Token.Text, ']*|*]*|\"\")')",
  "(21939, Token.Text.NewLine, '\\n')",
  "(21940, Token.Text.Whitespace, '\\t')",
  "(21941, Token.Text, 'lastarg=\"\\\\\"$lastarg\\\\\"\"')",
  "(21963, Token.Text.NewLine, '\\n')",
  "(21964, Token.Text.Whitespace, '\\t')",
  "(21965, Token.Text, ';;')",
  "(21967, Token.Text.NewLine, '\\n')",
  "(21968, Token.Text.Whitespace, '      ')",
  "(21974, Token.Text, 'esac')",
  "(21978, Token.Text.NewLine, '\\n\\n')",
  "(21980, Token.Text.Whitespace, '      ')",
  "(21986, Token.Text, 'base_compile=\"$base_compile')",
  "(22013, Token.Text.Whitespace, ' ')",
  "(22014, Token.Text, '$lastarg\"')",
  "(22023, Token.Text.NewLine, '\\n')",
  "(22024, Token.Text.Whitespace, '    ')",
  "(22028, Token.Text, 'done')",
  "(22032, Token.Text.Whitespace, ' ')",
  "(22033, Token.Comment.Single, '# for arg')",
  "(22042, Token.Text.NewLine, '\\n\\n')",
  "(22044, Token.Text.Whitespace, '    ')",
  "(22048, Token.Text, 'case')",
  "(22052, Token.Text.Whitespace, ' ')",
  "(22053, Token.Text, '$arg_mode')",
  "(22062, Token.Text.Whitespace, ' ')",
  "(22063, Token.Text, 'in')",
  "(22065, Token.Text.NewLine, '\\n')",
  "(22066, Token.Text.Whitespace, '    ')",
  "(22070, Token.Text, 'arg)')",
  "(22074, Token.Text.NewLine, '\\n')",
  "(22075, Token.Text.Whitespace, '      ')",
  "(22081, Token.Text, '$echo')",
  "(22086, Token.Text.Whitespace, ' ')",
  "(22087, Token.Literal.String.Double, '\"$modename: you must specify an argument for -Xcompile\"')",
  "(22142, Token.Text.NewLine, '\\n')",
  "(22143, Token.Text.Whitespace, '      ')",
  "(22149, Token.Text, 'exit')",
  "(22153, Token.Text.Whitespace, ' ')",
  "(22154, Token.Text, '$EXIT_FAILURE')",
  "(22167, Token.Text.NewLine, '\\n')",
  "(22168, Token.Text.Whitespace, '      ')",
  "(22174, Token.Text, ';;')",
  "(22176, Token.Text.NewLine, '\\n')",
  "(22177, Token.Text.Whitespace, '    ')",
  "(22181, Token.Text, 'target)')",
  "(22188, Token.Text.NewLine, '\\n')",
  "(22189, Token.Text.Whitespace, '      ')",
  "(22195, Token.Text, '$echo')",
  "(22200, Token.Text.Whitespace, ' ')",
  "(22201, Token.Literal.String.Double, '\"$modename: you must specify a target with \\\\`-o\\'\"')",
  "(22250, Token.Text.Whitespace, ' ')",
  "(22251, Token.Text, '1>&2')",
  "(22255, Token.Text.NewLine, '\\n')",
  "(22256, Token.Text.Whitespace, '      ')",
  "(22262, Token.Text, 'exit')",
  "(22266, Token.Text.Whitespace, ' ')",
  "(22267, Token.Text, '$EXIT_FAILURE')",
  "(22280, Token.Text.NewLine, '\\n')",
  "(22281, Token.Text.Whitespace, '      ')",
  "(22287, Token.Text, ';;')",
  "(22289, Token.Text.NewLine, '\\n')",
  "(22290, Token.Text.Whitespace, '    ')",
  "(22294, Token.Text, '*)')",
  "(22296, Token.Text.NewLine, '\\n')",
  "(22297, Token.Text.Whitespace, '      ')",
  "(22303, Token.Comment.Single, '# Get the name of the library object.')",
  "(22340, Token.Text.NewLine, '\\n')",
  "(22341, Token.Text.Whitespace, '      ')",
  "(22347, Token.Text, '[')",
  "(22348, Token.Text.Whitespace, ' ')",
  "(22349, Token.Text, '-z')",
  "(22351, Token.Text.Whitespace, ' ')",
  "(22352, Token.Literal.String.Double, '\"$libobj\"')",
  "(22361, Token.Text.Whitespace, ' ')",
  "(22362, Token.Text, ']')",
  "(22363, Token.Text.Whitespace, ' ')",
  "(22364, Token.Text, '&&')",
  "(22366, Token.Text.Whitespace, ' ')",
  "(22367, Token.Text, 'libobj=`$echo')",
  "(22380, Token.Text.Whitespace, ' ')",
  "(22381, Token.Literal.String.Double, '\"X$srcfile\"')",
  "(22392, Token.Text.Whitespace, ' ')",
  "(22393, Token.Text, '|')",
  "(22394, Token.Text.Whitespace, ' ')",
  "(22395, Token.Text, '$Xsed')",
  "(22400, Token.Text.Whitespace, ' ')",
  "(22401, Token.Text, '-e')",
  "(22403, Token.Text.Whitespace, ' ')",
  "(22404, Token.Literal.String.Single, \"'s%^.*/%%'\")",
  "(22414, Token.Text, '`')",
  "(22415, Token.Text.NewLine, '\\n')",
  "(22416, Token.Text.Whitespace, '      ')",
  "(22422, Token.Text, ';;')",
  "(22424, Token.Text.NewLine, '\\n')",
  "(22425, Token.Text.Whitespace, '    ')",
  "(22429, Token.Text, 'esac')",
  "(22433, Token.Text.NewLine, '\\n\\n')",
  "(22435, Token.Text.Whitespace, '    ')",
  "(22439, Token.Comment.Single, '# Recognize several different file suffixes.')",
  "(22483, Token.Text.NewLine, '\\n')",
  "(22484, Token.Text.Whitespace, '    ')",
  "(22488, Token.Comment.Single, '# If the user specifies -o file.o, it is replaced with file.lo')",
  "(22550, Token.Text.NewLine, '\\n')",
  "(22551, Token.Text.Whitespace, '    ')",
  "(22555, Token.Text, \"xform='[cCFSifmso]'\")",
  "(22574, Token.Text.NewLine, '\\n')",
  "(22575, Token.Text.Whitespace, '    ')",
  "(22579, Token.Text, 'case')",
  "(22583, Token.Text.Whitespace, ' ')",
  "(22584, Token.Text, '$libobj')",
  "(22591, Token.Text.Whitespace, ' ')",
  "(22592, Token.Text, 'in')",
  "(22594, Token.Text.NewLine, '\\n')",
  "(22595, Token.Text.Whitespace, '    ')",
  "(22599, Token.Text, '*.ada)')",
  "(22605, Token.Text.Whitespace, ' ')",
  "(22606, Token.Text, 'xform=ada')",
  "(22615, Token.Text.Whitespace, ' ')",
  "(22616, Token.Text, ';;')",
  "(22618, Token.Text.NewLine, '\\n')",
  "(22619, Token.Text.Whitespace, '    ')",
  "(22623, Token.Text, '*.adb)')",
  "(22629, Token.Text.Whitespace, ' ')",
  "(22630, Token.Text, 'xform=adb')",
  "(22639, Token.Text.Whitespace, ' ')",
  "(22640, Token.Text, ';;')",
  "(22642, Token.Text.NewLine, '\\n')",
  "(22643, Token.Text.Whitespace, '    ')",
  "(22647, Token.Text, '*.ads)')",
  "(22653, Token.Text.Whitespace, ' ')",
  "(22654, Token.Text, 'xform=ads')",
  "(22663, Token.Text.Whitespace, ' ')",
  "(22664, Token.Text, ';;')",
  "(22666, Token.Text.NewLine, '\\n')",
  "(22667, Token.Text.Whitespace, '    ')",
  "(22671, Token.Text, '*.asm)')",
  "(22677, Token.Text.Whitespace, ' ')",
  "(22678, Token.Text, 'xform=asm')",
  "(22687, Token.Text.Whitespace, ' ')",
  "(22688, Token.Text, ';;')",
  "(22690, Token.Text.NewLine, '\\n')",
  "(22691, Token.Text.Whitespace, '    ')",
  "(22695, Token.Text, '*.c++)')",
  "(22701, Token.Text.Whitespace, ' ')",
  "(22702, Token.Text, 'xform=c++')",
  "(22711, Token.Text.Whitespace, ' ')",
  "(22712, Token.Text, ';;')",
  "(22714, Token.Text.NewLine, '\\n')",
  "(22715, Token.Text.Whitespace, '    ')",
  "(22719, Token.Text, '*.cc)')",
  "(22724, Token.Text.Whitespace, ' ')",
  "(22725, Token.Text, 'xform=cc')",
  "(22733, Token.Text.Whitespace, ' ')",
  "(22734, Token.Text, ';;')",
  "(22736, Token.Text.NewLine, '\\n')",
  "(22737, Token.Text.Whitespace, '    ')",
  "(22741, Token.Text, '*.ii)')",
  "(22746, Token.Text.Whitespace, ' ')",
  "(22747, Token.Text, 'xform=ii')",
  "(22755, Token.Text.Whitespace, ' ')",
  "(22756, Token.Text, ';;')",
  "(22758, Token.Text.NewLine, '\\n')",
  "(22759, Token.Text.Whitespace, '    ')",
  "(22763, Token.Text, '*.class)')",
  "(22771, Token.Text.Whitespace, ' ')",
  "(22772, Token.Text, 'xform=class')",
  "(22783, Token.Text.Whitespace, ' ')",
  "(22784, Token.Text, ';;')",
  "(22786, Token.Text.NewLine, '\\n')",
  "(22787, Token.Text.Whitespace, '    ')",
  "(22791, Token.Text, '*.cpp)')",
  "(22797, Token.Text.Whitespace, ' ')",
  "(22798, Token.Text, 'xform=cpp')",
  "(22807, Token.Text.Whitespace, ' ')",
  "(22808, Token.Text, ';;')",
  "(22810, Token.Text.NewLine, '\\n')",
  "(22811, Token.Text.Whitespace, '    ')",
  "(22815, Token.Text, '*.cxx)')",
  "(22821, Token.Text.Whitespace, ' ')",
  "(22822, Token.Text, 'xform=cxx')",
  "(22831, Token.Text.Whitespace, ' ')",
  "(22832, Token.Text, ';;')",
  "(22834, Token.Text.NewLine, '\\n')",
  "(22835, Token.Text.Whitespace, '    ')",
  "(22839, Token.Text, '*.f90)')",
  "(22845, Token.Text.Whitespace, ' ')",
  "(22846, Token.Text, 'xform=f90')",
  "(22855, Token.Text.Whitespace, ' ')",
  "(22856, Token.Text, ';;')",
  "(22858, Token.Text.NewLine, '\\n')",
  "(22859, Token.Text.Whitespace, '    ')",
  "(22863, Token.Text, '*.for)')",
  "(22869, Token.Text.Whitespace, ' ')",
  "(22870, Token.Text, 'xform=for')",
  "(22879, Token.Text.Whitespace, ' ')",
  "(22880, Token.Text, ';;')",
  "(22882, Token.Text.NewLine, '\\n')",
  "(22883, Token.Text.Whitespace, '    ')",
  "(22887, Token.Text, '*.java)')",
  "(22894, Token.Text.Whitespace, ' ')",
  "(22895, Token.Text, 'xform=java')",
  "(22905, Token.Text.Whitespace, ' ')",
  "(22906, Token.Text, ';;')",
  "(22908, Token.Text.NewLine, '\\n')",
  "(22909, Token.Text.Whitespace, '    ')",
  "(22913, Token.Text, 'esac')",
  "(22917, Token.Text.NewLine, '\\n\\n')",
  "(22919, Token.Text.Whitespace, '    ')",
  "(22923, Token.Text, 'libobj=`$echo')",
  "(22936, Token.Text.Whitespace, ' ')",
  "(22937, Token.Literal.String.Double, '\"X$libobj\"')",
  "(22947, Token.Text.Whitespace, ' ')",
  "(22948, Token.Text, '|')",
  "(22949, Token.Text.Whitespace, ' ')",
  "(22950, Token.Text, '$Xsed')",
  "(22955, Token.Text.Whitespace, ' ')",
  "(22956, Token.Text, '-e')",
  "(22958, Token.Text.Whitespace, ' ')",
  "(22959, Token.Literal.String.Double, '\"s/\\\\.$xform$/.lo/\"')",
  "(22977, Token.Text, '`')",
  "(22978, Token.Text.NewLine, '\\n\\n')",
  "(22980, Token.Text.Whitespace, '    ')",
  "(22984, Token.Text, 'case')",
  "(22988, Token.Text.Whitespace, ' ')",
  "(22989, Token.Text, '$libobj')",
  "(22996, Token.Text.Whitespace, ' ')",
  "(22997, Token.Text, 'in')",
  "(22999, Token.Text.NewLine, '\\n')",
  "(23000, Token.Text.Whitespace, '    ')",
  "(23004, Token.Text, '*.lo)')",
  "(23009, Token.Text.Whitespace, ' ')",
  "(23010, Token.Text, 'obj=`$echo')",
  "(23020, Token.Text.Whitespace, ' ')",
  "(23021, Token.Literal.String.Double, '\"X$libobj\"')",
  "(23031, Token.Text.Whitespace, ' ')",
  "(23032, Token.Text, '|')",
  "(23033, Token.Text.Whitespace, ' ')",
  "(23034, Token.Text, '$Xsed')",
  "(23039, Token.Text.Whitespace, ' ')",
  "(23040, Token.Text, '-e')",
  "(23042, Token.Text.Whitespace, ' ')",
  "(23043, Token.Literal.String.Double, '\"$lo2o\"')",
  "(23050, Token.Text, '`')",
  "(23051, Token.Text.Whitespace, ' ')",
  "(23052, Token.Text, ';;')",
  "(23054, Token.Text.NewLine, '\\n')",
  "(23055, Token.Text.Whitespace, '    ')",
  "(23059, Token.Text, '*)')",
  "(23061, Token.Text.NewLine, '\\n')",
  "(23062, Token.Text.Whitespace, '      ')",
  "(23068, Token.Text, '$echo')",
  "(23073, Token.Text.Whitespace, ' ')",
  "(23074, Token.Literal.String.Double, '\"$modename: cannot determine name of library object from \\\\`$libobj\\'\"')",
  "(23142, Token.Text.Whitespace, ' ')",
  "(23143, Token.Text, '1>&2')",
  "(23147, Token.Text.NewLine, '\\n')",
  "(23148, Token.Text.Whitespace, '      ')",
  "(23154, Token.Text, 'exit')",
  "(23158, Token.Text.Whitespace, ' ')",
  "(23159, Token.Text, '$EXIT_FAILURE')",
  "(23172, Token.Text.NewLine, '\\n')",
  "(23173, Token.Text.Whitespace, '      ')",
  "(23179, Token.Text, ';;')",
  "(23181, Token.Text.NewLine, '\\n')",
  "(23182, Token.Text.Whitespace, '    ')",
  "(23186, Token.Text, 'esac')",
  "(23190, Token.Text.NewLine, '\\n\\n')",
  "(23192, Token.Text.Whitespace, '    ')",
  "(23196, Token.Text, 'func_infer_tag')",
  "(23210, Token.Text.Whitespace, ' ')",
  "(23211, Token.Text, '$base_compile')",
  "(23224, Token.Text.NewLine, '\\n\\n')",
  "(23226, Token.Text.Whitespace, '    ')",
  "(23230, Token.Text, 'for')",
  "(23233, Token.Text.Whitespace, ' ')",
  "(23234, Token.Text, 'arg')",
  "(23237, Token.Text.Whitespace, ' ')",
  "(23238, Token.Text, 'in')",
  "(23240, Token.Text.Whitespace, ' ')",
  "(23241, Token.Text, '$later;')",
  "(23248, Token.Text.Whitespace, ' ')",
  "(23249, Token.Text, 'do')",
  "(23251, Token.Text.NewLine, '\\n')",
  "(23252, Token.Text.Whitespace, '      ')",
  "(23258, Token.Text, 'case')",
  "(23262, Token.Text.Whitespace, ' ')",
  "(23263, Token.Text, '$arg')",
  "(23267, Token.Text.Whitespace, ' ')",
  "(23268, Token.Text, 'in')",
  "(23270, Token.Text.NewLine, '\\n')",
  "(23271, Token.Text.Whitespace, '      ')",
  "(23277, Token.Text, '-static)')",
  "(23285, Token.Text.NewLine, '\\n')",
  "(23286, Token.Text.Whitespace, '\\t')",
  "(23287, Token.Text, 'build_old_libs=yes')",
  "(23305, Token.Text.NewLine, '\\n')",
  "(23306, Token.Text.Whitespace, '\\t')",
  "(23307, Token.Text, 'continue')",
  "(23315, Token.Text.NewLine, '\\n')",
  "(23316, Token.Text.Whitespace, '\\t')",
  "(23317, Token.Text, ';;')",
  "(23319, Token.Text.NewLine, '\\n\\n')",
  "(23321, Token.Text.Whitespace, '      ')",
  "(23327, Token.Text, '-prefer-pic)')",
  "(23339, Token.Text.NewLine, '\\n')",
  "(23340, Token.Text.Whitespace, '\\t')",
  "(23341, Token.Text, 'pic_mode=yes')",
  "(23353, Token.Text.NewLine, '\\n')",
  "(23354, Token.Text.Whitespace, '\\t')",
  "(23355, Token.Text, 'continue')",
  "(23363, Token.Text.NewLine, '\\n')",
  "(23364, Token.Text.Whitespace, '\\t')",
  "(23365, Token.Text, ';;')",
  "(23367, Token.Text.NewLine, '\\n\\n')",
  "(23369, Token.Text.Whitespace, '      ')",
  "(23375, Token.Text, '-prefer-non-pic)')",
  "(23391, Token.Text.NewLine, '\\n')",
  "(23392, Token.Text.Whitespace, '\\t')",
  "(23393, Token.Text, 'pic_mode=no')",
  "(23404, Token.Text.NewLine, '\\n')",
  "(23405, Token.Text.Whitespace, '\\t')",
  "(23406, Token.Text, 'continue')",
  "(23414, Token.Text.NewLine, '\\n')",
  "(23415, Token.Text.Whitespace, '\\t')",
  "(23416, Token.Text, ';;')",
  "(23418, Token.Text.NewLine, '\\n')",
  "(23419, Token.Text.Whitespace, '      ')",
  "(23425, Token.Text, 'esac')",
  "(23429, Token.Text.NewLine, '\\n')",
  "(23430, Token.Text.Whitespace, '    ')",
  "(23434, Token.Text, 'done')",
  "(23438, Token.Text.NewLine, '\\n\\n')",
  "(23440, Token.Text.Whitespace, '    ')",
  "(23444, Token.Text, 'qlibobj=`$echo')",
  "(23458, Token.Text.Whitespace, ' ')",
  "(23459, Token.Literal.String.Double, '\"X$libobj\"')",
  "(23469, Token.Text.Whitespace, ' ')",
  "(23470, Token.Text, '|')",
  "(23471, Token.Text.Whitespace, ' ')",
  "(23472, Token.Text, '$Xsed')",
  "(23477, Token.Text.Whitespace, ' ')",
  "(23478, Token.Text, '-e')",
  "(23480, Token.Text.Whitespace, ' ')",
  "(23481, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(23499, Token.Text, '`')",
  "(23500, Token.Text.NewLine, '\\n')",
  "(23501, Token.Text.Whitespace, '    ')",
  "(23505, Token.Text, 'case')",
  "(23509, Token.Text.Whitespace, ' ')",
  "(23510, Token.Text, '$qlibobj')",
  "(23518, Token.Text.Whitespace, ' ')",
  "(23519, Token.Text, 'in')",
  "(23521, Token.Text.NewLine, '\\n')",
  "(23522, Token.Text.Whitespace, '      ')",
  "(23528, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(23563, Token.Text.Whitespace, ' ')",
  "(23564, Token.Text, '\\\\')",
  "(23565, Token.Text.Whitespace, '\\t')",
  "(23566, Token.Text, ']*|*]*|\"\")')",
  "(23576, Token.Text.NewLine, '\\n')",
  "(23577, Token.Text.Whitespace, '\\t')",
  "(23578, Token.Text, 'qlibobj=\"\\\\\"$qlibobj\\\\\"\"')",
  "(23600, Token.Text.Whitespace, ' ')",
  "(23601, Token.Text, ';;')",
  "(23603, Token.Text.NewLine, '\\n')",
  "(23604, Token.Text.Whitespace, '    ')",
  "(23608, Token.Text, 'esac')",
  "(23612, Token.Text.NewLine, '\\n')",
  "(23613, Token.Text.Whitespace, '    ')",
  "(23617, Token.Text, 'test')",
  "(23621, Token.Text.Whitespace, ' ')",
  "(23622, Token.Literal.String.Double, '\"X$libobj\"')",
  "(23632, Token.Text.Whitespace, ' ')",
  "(23633, Token.Text, '!=')",
  "(23635, Token.Text.Whitespace, ' ')",
  "(23636, Token.Literal.String.Double, '\"X$qlibobj\"')",
  "(23647, Token.Text.Whitespace, ' ')",
  "(23648, Token.Text, '\\\\')",
  "(23649, Token.Text.NewLine, '\\n')",
  "(23650, Token.Text.Whitespace, '\\t')",
  "(23651, Token.Text, '&&')",
  "(23653, Token.Text.Whitespace, ' ')",
  "(23654, Token.Text, '$echo')",
  "(23659, Token.Text.Whitespace, ' ')",
  "(23660, Token.Literal.String.Double, '\"X$libobj\"')",
  "(23670, Token.Text.Whitespace, ' ')",
  "(23671, Token.Text, '|')",
  "(23672, Token.Text.Whitespace, ' ')",
  "(23673, Token.Text, 'grep')",
  "(23677, Token.Text.Whitespace, ' ')",
  "(23678, Token.Literal.String.Single, '\\'[]~#^*{};<>?\"\\'')",
  "(23693, Token.Literal.String.Double, '\"\\'\"')",
  "(23696, Token.Literal.String.Single, \"' \\t&()|`$[]'\")",
  "(23708, Token.Text.Whitespace, ' ')",
  "(23709, Token.Text, '\\\\')",
  "(23710, Token.Text.NewLine, '\\n')",
  "(23711, Token.Text.Whitespace, '\\t')",
  "(23712, Token.Text, '&&')",
  "(23714, Token.Text.Whitespace, ' ')",
  "(23715, Token.Text, '$echo')",
  "(23720, Token.Text.Whitespace, ' ')",
  "(23721, Token.Literal.String.Double, '\"$modename: libobj name \\\\`$libobj\\' may not contain shell special characters.\"')",
  "(23798, Token.Text.NewLine, '\\n')",
  "(23799, Token.Text.Whitespace, '    ')",
  "(23803, Token.Text, 'objname=`$echo')",
  "(23817, Token.Text.Whitespace, ' ')",
  "(23818, Token.Literal.String.Double, '\"X$obj\"')",
  "(23825, Token.Text.Whitespace, ' ')",
  "(23826, Token.Text, '|')",
  "(23827, Token.Text.Whitespace, ' ')",
  "(23828, Token.Text, '$Xsed')",
  "(23833, Token.Text.Whitespace, ' ')",
  "(23834, Token.Text, '-e')",
  "(23836, Token.Text.Whitespace, ' ')",
  "(23837, Token.Literal.String.Single, \"'s%^.*/%%'\")",
  "(23847, Token.Text, '`')",
  "(23848, Token.Text.NewLine, '\\n')",
  "(23849, Token.Text.Whitespace, '    ')",
  "(23853, Token.Text, 'xdir=`$echo')",
  "(23864, Token.Text.Whitespace, ' ')",
  "(23865, Token.Literal.String.Double, '\"X$obj\"')",
  "(23872, Token.Text.Whitespace, ' ')",
  "(23873, Token.Text, '|')",
  "(23874, Token.Text.Whitespace, ' ')",
  "(23875, Token.Text, '$Xsed')",
  "(23880, Token.Text.Whitespace, ' ')",
  "(23881, Token.Text, '-e')",
  "(23883, Token.Text.Whitespace, ' ')",
  "(23884, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(23897, Token.Text, '`')",
  "(23898, Token.Text.NewLine, '\\n')",
  "(23899, Token.Text.Whitespace, '    ')",
  "(23903, Token.Text, 'if')",
  "(23905, Token.Text.Whitespace, ' ')",
  "(23906, Token.Text, 'test')",
  "(23910, Token.Text.Whitespace, ' ')",
  "(23911, Token.Literal.String.Double, '\"X$xdir\"')",
  "(23919, Token.Text.Whitespace, ' ')",
  "(23920, Token.Text, '=')",
  "(23921, Token.Text.Whitespace, ' ')",
  "(23922, Token.Literal.String.Double, '\"X$obj\"')",
  "(23929, Token.Text, ';')",
  "(23930, Token.Text.Whitespace, ' ')",
  "(23931, Token.Text, 'then')",
  "(23935, Token.Text.NewLine, '\\n')",
  "(23936, Token.Text.Whitespace, '      ')",
  "(23942, Token.Text, 'xdir=')",
  "(23947, Token.Text.NewLine, '\\n')",
  "(23948, Token.Text.Whitespace, '    ')",
  "(23952, Token.Text, 'else')",
  "(23956, Token.Text.NewLine, '\\n')",
  "(23957, Token.Text.Whitespace, '      ')",
  "(23963, Token.Text, 'xdir=$xdir/')",
  "(23974, Token.Text.NewLine, '\\n')",
  "(23975, Token.Text.Whitespace, '    ')",
  "(23979, Token.Text, 'fi')",
  "(23981, Token.Text.NewLine, '\\n')",
  "(23982, Token.Text.Whitespace, '    ')",
  "(23986, Token.Text, 'lobj=${xdir}$objdir/$objname')",
  "(24014, Token.Text.NewLine, '\\n\\n')",
  "(24016, Token.Text.Whitespace, '    ')",
  "(24020, Token.Text, 'if')",
  "(24022, Token.Text.Whitespace, ' ')",
  "(24023, Token.Text, 'test')",
  "(24027, Token.Text.Whitespace, ' ')",
  "(24028, Token.Text, '-z')",
  "(24030, Token.Text.Whitespace, ' ')",
  "(24031, Token.Literal.String.Double, '\"$base_compile\"')",
  "(24046, Token.Text, ';')",
  "(24047, Token.Text.Whitespace, ' ')",
  "(24048, Token.Text, 'then')",
  "(24052, Token.Text.NewLine, '\\n')",
  "(24053, Token.Text.Whitespace, '      ')",
  "(24059, Token.Text, '$echo')",
  "(24064, Token.Text.Whitespace, ' ')",
  "(24065, Token.Literal.String.Double, '\"$modename: you must specify a compilation command\"')",
  "(24116, Token.Text.Whitespace, ' ')",
  "(24117, Token.Text, '1>&2')",
  "(24121, Token.Text.NewLine, '\\n')",
  "(24122, Token.Text.Whitespace, '      ')",
  "(24128, Token.Text, '$echo')",
  "(24133, Token.Text.Whitespace, ' ')",
  "(24134, Token.Literal.String.Double, '\"$help\"')",
  "(24141, Token.Text.Whitespace, ' ')",
  "(24142, Token.Text, '1>&2')",
  "(24146, Token.Text.NewLine, '\\n')",
  "(24147, Token.Text.Whitespace, '      ')",
  "(24153, Token.Text, 'exit')",
  "(24157, Token.Text.Whitespace, ' ')",
  "(24158, Token.Text, '$EXIT_FAILURE')",
  "(24171, Token.Text.NewLine, '\\n')",
  "(24172, Token.Text.Whitespace, '    ')",
  "(24176, Token.Text, 'fi')",
  "(24178, Token.Text.NewLine, '\\n\\n')",
  "(24180, Token.Text.Whitespace, '    ')",
  "(24184, Token.Comment.Single, '# Delete any leftover library objects.')",
  "(24222, Token.Text.NewLine, '\\n')",
  "(24223, Token.Text.Whitespace, '    ')",
  "(24227, Token.Text, 'if')",
  "(24229, Token.Text.Whitespace, ' ')",
  "(24230, Token.Text, 'test')",
  "(24234, Token.Text.Whitespace, ' ')",
  "(24235, Token.Literal.String.Double, '\"$build_old_libs\"')",
  "(24252, Token.Text.Whitespace, ' ')",
  "(24253, Token.Text, '=')",
  "(24254, Token.Text.Whitespace, ' ')",
  "(24255, Token.Text, 'yes;')",
  "(24259, Token.Text.Whitespace, ' ')",
  "(24260, Token.Text, 'then')",
  "(24264, Token.Text.NewLine, '\\n')",
  "(24265, Token.Text.Whitespace, '      ')",
  "(24271, Token.Text, 'removelist=\"$obj')",
  "(24287, Token.Text.Whitespace, ' ')",
  "(24288, Token.Text, '$lobj')",
  "(24293, Token.Text.Whitespace, ' ')",
  "(24294, Token.Text, '$libobj')",
  "(24301, Token.Text.Whitespace, ' ')",
  "(24302, Token.Text, '${libobj}T\"')",
  "(24313, Token.Text.NewLine, '\\n')",
  "(24314, Token.Text.Whitespace, '    ')",
  "(24318, Token.Text, 'else')",
  "(24322, Token.Text.NewLine, '\\n')",
  "(24323, Token.Text.Whitespace, '      ')",
  "(24329, Token.Text, 'removelist=\"$lobj')",
  "(24346, Token.Text.Whitespace, ' ')",
  "(24347, Token.Text, '$libobj')",
  "(24354, Token.Text.Whitespace, ' ')",
  "(24355, Token.Text, '${libobj}T\"')",
  "(24366, Token.Text.NewLine, '\\n')",
  "(24367, Token.Text.Whitespace, '    ')",
  "(24371, Token.Text, 'fi')",
  "(24373, Token.Text.NewLine, '\\n\\n')",
  "(24375, Token.Text.Whitespace, '    ')",
  "(24379, Token.Text, '$run')",
  "(24383, Token.Text.Whitespace, ' ')",
  "(24384, Token.Text, '$rm')",
  "(24387, Token.Text.Whitespace, ' ')",
  "(24388, Token.Text, '$removelist')",
  "(24399, Token.Text.NewLine, '\\n')",
  "(24400, Token.Text.Whitespace, '    ')",
  "(24404, Token.Text, 'trap')",
  "(24408, Token.Text.Whitespace, ' ')",
  "(24409, Token.Literal.String.Double, '\"$run $rm $removelist; exit $EXIT_FAILURE\"')",
  "(24451, Token.Text.Whitespace, ' ')",
  "(24452, Token.Text, '1')",
  "(24453, Token.Text.Whitespace, ' ')",
  "(24454, Token.Text, '2')",
  "(24455, Token.Text.Whitespace, ' ')",
  "(24456, Token.Text, '15')",
  "(24458, Token.Text.NewLine, '\\n\\n')",
  "(24460, Token.Text.Whitespace, '    ')",
  "(24464, Token.Comment.Single, '# On Cygwin there\\'s no \"real\" PIC flag so we must build both object types')",
  "(24537, Token.Text.NewLine, '\\n')",
  "(24538, Token.Text.Whitespace, '    ')",
  "(24542, Token.Text, 'case')",
  "(24546, Token.Text.Whitespace, ' ')",
  "(24547, Token.Text, '$host_os')",
  "(24555, Token.Text.Whitespace, ' ')",
  "(24556, Token.Text, 'in')",
  "(24558, Token.Text.NewLine, '\\n')",
  "(24559, Token.Text.Whitespace, '    ')",
  "(24563, Token.Text, 'cygwin*')",
  "(24570, Token.Text.Whitespace, ' ')",
  "(24571, Token.Text, '|')",
  "(24572, Token.Text.Whitespace, ' ')",
  "(24573, Token.Text, 'mingw*')",
  "(24579, Token.Text.Whitespace, ' ')",
  "(24580, Token.Text, '|')",
  "(24581, Token.Text.Whitespace, ' ')",
  "(24582, Token.Text, 'pw32*')",
  "(24587, Token.Text.Whitespace, ' ')",
  "(24588, Token.Text, '|')",
  "(24589, Token.Text.Whitespace, ' ')",
  "(24590, Token.Text, 'os2*)')",
  "(24595, Token.Text.NewLine, '\\n')",
  "(24596, Token.Text.Whitespace, '      ')",
  "(24602, Token.Text, 'pic_mode=default')",
  "(24618, Token.Text.NewLine, '\\n')",
  "(24619, Token.Text.Whitespace, '      ')",
  "(24625, Token.Text, ';;')",
  "(24627, Token.Text.NewLine, '\\n')",
  "(24628, Token.Text.Whitespace, '    ')",
  "(24632, Token.Text, 'esac')",
  "(24636, Token.Text.NewLine, '\\n')",
  "(24637, Token.Text.Whitespace, '    ')",
  "(24641, Token.Text, 'if')",
  "(24643, Token.Text.Whitespace, ' ')",
  "(24644, Token.Text, 'test')",
  "(24648, Token.Text.Whitespace, ' ')",
  "(24649, Token.Literal.String.Double, '\"$pic_mode\"')",
  "(24660, Token.Text.Whitespace, ' ')",
  "(24661, Token.Text, '=')",
  "(24662, Token.Text.Whitespace, ' ')",
  "(24663, Token.Text, 'no')",
  "(24665, Token.Text.Whitespace, ' ')",
  "(24666, Token.Text, '&&')",
  "(24668, Token.Text.Whitespace, ' ')",
  "(24669, Token.Text, 'test')",
  "(24673, Token.Text.Whitespace, ' ')",
  "(24674, Token.Literal.String.Double, '\"$deplibs_check_method\"')",
  "(24697, Token.Text.Whitespace, ' ')",
  "(24698, Token.Text, '!=')",
  "(24700, Token.Text.Whitespace, ' ')",
  "(24701, Token.Text, 'pass_all;')",
  "(24710, Token.Text.Whitespace, ' ')",
  "(24711, Token.Text, 'then')",
  "(24715, Token.Text.NewLine, '\\n')",
  "(24716, Token.Text.Whitespace, '      ')",
  "(24722, Token.Comment.Single, '# non-PIC code in shared libraries is not supported')",
  "(24773, Token.Text.NewLine, '\\n')",
  "(24774, Token.Text.Whitespace, '      ')",
  "(24780, Token.Text, 'pic_mode=default')",
  "(24796, Token.Text.NewLine, '\\n')",
  "(24797, Token.Text.Whitespace, '    ')",
  "(24801, Token.Text, 'fi')",
  "(24803, Token.Text.NewLine, '\\n\\n')",
  "(24805, Token.Text.Whitespace, '    ')",
  "(24809, Token.Comment.Single, '# Calculate the filename of the output object if compiler does')",
  "(24871, Token.Text.NewLine, '\\n')",
  "(24872, Token.Text.Whitespace, '    ')",
  "(24876, Token.Comment.Single, '# not support -o with -c')",
  "(24900, Token.Text.NewLine, '\\n')",
  "(24901, Token.Text.Whitespace, '    ')",
  "(24905, Token.Text, 'if')",
  "(24907, Token.Text.Whitespace, ' ')",
  "(24908, Token.Text, 'test')",
  "(24912, Token.Text.Whitespace, ' ')",
  "(24913, Token.Literal.String.Double, '\"$compiler_c_o\"')",
  "(24928, Token.Text.Whitespace, ' ')",
  "(24929, Token.Text, '=')",
  "(24930, Token.Text.Whitespace, ' ')",
  "(24931, Token.Text, 'no;')",
  "(24934, Token.Text.Whitespace, ' ')",
  "(24935, Token.Text, 'then')",
  "(24939, Token.Text.NewLine, '\\n')",
  "(24940, Token.Text.Whitespace, '      ')",
  "(24946, Token.Text, 'output_obj=`$echo')",
  "(24963, Token.Text.Whitespace, ' ')",
  "(24964, Token.Literal.String.Double, '\"X$srcfile\"')",
  "(24975, Token.Text.Whitespace, ' ')",
  "(24976, Token.Text, '|')",
  "(24977, Token.Text.Whitespace, ' ')",
  "(24978, Token.Text, '$Xsed')",
  "(24983, Token.Text.Whitespace, ' ')",
  "(24984, Token.Text, '-e')",
  "(24986, Token.Text.Whitespace, ' ')",
  "(24987, Token.Literal.String.Single, \"'s%^.*/%%'\")",
  "(24997, Token.Text.Whitespace, ' ')",
  "(24998, Token.Text, '-e')",
  "(25000, Token.Text.Whitespace, ' ')",
  "(25001, Token.Literal.String.Single, \"'s%\\\\.[^.]*$%%'\")",
  "(25015, Token.Text, '`.${objext}')",
  "(25026, Token.Text.NewLine, '\\n')",
  "(25027, Token.Text.Whitespace, '      ')",
  "(25033, Token.Text, 'lockfile=\"$output_obj.lock\"')",
  "(25060, Token.Text.NewLine, '\\n')",
  "(25061, Token.Text.Whitespace, '      ')",
  "(25067, Token.Text, 'removelist=\"$removelist')",
  "(25090, Token.Text.Whitespace, ' ')",
  "(25091, Token.Text, '$output_obj')",
  "(25102, Token.Text.Whitespace, ' ')",
  "(25103, Token.Text, '$lockfile\"')",
  "(25113, Token.Text.NewLine, '\\n')",
  "(25114, Token.Text.Whitespace, '      ')",
  "(25120, Token.Text, 'trap')",
  "(25124, Token.Text.Whitespace, ' ')",
  "(25125, Token.Literal.String.Double, '\"$run $rm $removelist; exit $EXIT_FAILURE\"')",
  "(25167, Token.Text.Whitespace, ' ')",
  "(25168, Token.Text, '1')",
  "(25169, Token.Text.Whitespace, ' ')",
  "(25170, Token.Text, '2')",
  "(25171, Token.Text.Whitespace, ' ')",
  "(25172, Token.Text, '15')",
  "(25174, Token.Text.NewLine, '\\n')",
  "(25175, Token.Text.Whitespace, '    ')",
  "(25179, Token.Text, 'else')",
  "(25183, Token.Text.NewLine, '\\n')",
  "(25184, Token.Text.Whitespace, '      ')",
  "(25190, Token.Text, 'output_obj=')",
  "(25201, Token.Text.NewLine, '\\n')",
  "(25202, Token.Text.Whitespace, '      ')",
  "(25208, Token.Text, 'need_locks=no')",
  "(25221, Token.Text.NewLine, '\\n')",
  "(25222, Token.Text.Whitespace, '      ')",
  "(25228, Token.Text, 'lockfile=')",
  "(25237, Token.Text.NewLine, '\\n')",
  "(25238, Token.Text.Whitespace, '    ')",
  "(25242, Token.Text, 'fi')",
  "(25244, Token.Text.NewLine, '\\n\\n')",
  "(25246, Token.Text.Whitespace, '    ')",
  "(25250, Token.Comment.Single, '# Lock this critical section if it is needed')",
  "(25294, Token.Text.NewLine, '\\n')",
  "(25295, Token.Text.Whitespace, '    ')",
  "(25299, Token.Comment.Single, '# We use this script file to make the link, it avoids creating a new file')",
  "(25372, Token.Text.NewLine, '\\n')",
  "(25373, Token.Text.Whitespace, '    ')",
  "(25377, Token.Text, 'if')",
  "(25379, Token.Text.Whitespace, ' ')",
  "(25380, Token.Text, 'test')",
  "(25384, Token.Text.Whitespace, ' ')",
  "(25385, Token.Literal.String.Double, '\"$need_locks\"')",
  "(25398, Token.Text.Whitespace, ' ')",
  "(25399, Token.Text, '=')",
  "(25400, Token.Text.Whitespace, ' ')",
  "(25401, Token.Text, 'yes;')",
  "(25405, Token.Text.Whitespace, ' ')",
  "(25406, Token.Text, 'then')",
  "(25410, Token.Text.NewLine, '\\n')",
  "(25411, Token.Text.Whitespace, '      ')",
  "(25417, Token.Text, 'until')",
  "(25422, Token.Text.Whitespace, ' ')",
  "(25423, Token.Text, '$run')",
  "(25427, Token.Text.Whitespace, ' ')",
  "(25428, Token.Text, 'ln')",
  "(25430, Token.Text.Whitespace, ' ')",
  "(25431, Token.Literal.String.Double, '\"$srcfile\"')",
  "(25441, Token.Text.Whitespace, ' ')",
  "(25442, Token.Literal.String.Double, '\"$lockfile\"')",
  "(25453, Token.Text.Whitespace, ' ')",
  "(25454, Token.Text, '2>/dev/null;')",
  "(25466, Token.Text.Whitespace, ' ')",
  "(25467, Token.Text, 'do')",
  "(25469, Token.Text.NewLine, '\\n')",
  "(25470, Token.Text.Whitespace, '\\t')",
  "(25471, Token.Text, '$show')",
  "(25476, Token.Text.Whitespace, ' ')",
  "(25477, Token.Literal.String.Double, '\"Waiting for $lockfile to be removed\"')",
  "(25514, Token.Text.NewLine, '\\n')",
  "(25515, Token.Text.Whitespace, '\\t')",
  "(25516, Token.Text, 'sleep')",
  "(25521, Token.Text.Whitespace, ' ')",
  "(25522, Token.Text, '2')",
  "(25523, Token.Text.NewLine, '\\n')",
  "(25524, Token.Text.Whitespace, '      ')",
  "(25530, Token.Text, 'done')",
  "(25534, Token.Text.NewLine, '\\n')",
  "(25535, Token.Text.Whitespace, '    ')",
  "(25539, Token.Text, 'elif')",
  "(25543, Token.Text.Whitespace, ' ')",
  "(25544, Token.Text, 'test')",
  "(25548, Token.Text.Whitespace, ' ')",
  "(25549, Token.Literal.String.Double, '\"$need_locks\"')",
  "(25562, Token.Text.Whitespace, ' ')",
  "(25563, Token.Text, '=')",
  "(25564, Token.Text.Whitespace, ' ')",
  "(25565, Token.Text, 'warn;')",
  "(25570, Token.Text.Whitespace, ' ')",
  "(25571, Token.Text, 'then')",
  "(25575, Token.Text.NewLine, '\\n')",
  "(25576, Token.Text.Whitespace, '      ')",
  "(25582, Token.Text, 'if')",
  "(25584, Token.Text.Whitespace, ' ')",
  "(25585, Token.Text, 'test')",
  "(25589, Token.Text.Whitespace, ' ')",
  "(25590, Token.Text, '-f')",
  "(25592, Token.Text.Whitespace, ' ')",
  "(25593, Token.Literal.String.Double, '\"$lockfile\"')",
  "(25604, Token.Text, ';')",
  "(25605, Token.Text.Whitespace, ' ')",
  "(25606, Token.Text, 'then')",
  "(25610, Token.Text.NewLine, '\\n')",
  "(25611, Token.Text.Whitespace, '\\t')",
  "(25612, Token.Text, '$echo')",
  "(25617, Token.Text.Whitespace, ' ')",
  "(25618, Token.Literal.String.Double, '\"\\\\\\n*** ERROR, $lockfile exists and contains:\\n`cat $lockfile 2>/dev/null`\\n\\nThis indicates that another process is trying to use the same\\ntemporary object file, and libtool could not work around it because\\nyour compiler does not support \\\\`-c\\' and \\\\`-o\\' together.  If you\\nrepeat this compilation, it may succeed, by chance, but you had better\\navoid parallel builds (make -j) in this platform, or get a better\\ncompiler.\"')",
  "(26034, Token.Text.NewLine, '\\n\\n')",
  "(26036, Token.Text.Whitespace, '\\t')",
  "(26037, Token.Text, '$run')",
  "(26041, Token.Text.Whitespace, ' ')",
  "(26042, Token.Text, '$rm')",
  "(26045, Token.Text.Whitespace, ' ')",
  "(26046, Token.Text, '$removelist')",
  "(26057, Token.Text.NewLine, '\\n')",
  "(26058, Token.Text.Whitespace, '\\t')",
  "(26059, Token.Text, 'exit')",
  "(26063, Token.Text.Whitespace, ' ')",
  "(26064, Token.Text, '$EXIT_FAILURE')",
  "(26077, Token.Text.NewLine, '\\n')",
  "(26078, Token.Text.Whitespace, '      ')",
  "(26084, Token.Text, 'fi')",
  "(26086, Token.Text.NewLine, '\\n')",
  "(26087, Token.Text.Whitespace, '      ')",
  "(26093, Token.Text, '$echo')",
  "(26098, Token.Text.Whitespace, ' ')",
  "(26099, Token.Literal.String.Double, '\"$srcfile\"')",
  "(26109, Token.Text.Whitespace, ' ')",
  "(26110, Token.Text, '>')",
  "(26111, Token.Text.Whitespace, ' ')",
  "(26112, Token.Literal.String.Double, '\"$lockfile\"')",
  "(26123, Token.Text.NewLine, '\\n')",
  "(26124, Token.Text.Whitespace, '    ')",
  "(26128, Token.Text, 'fi')",
  "(26130, Token.Text.NewLine, '\\n\\n')",
  "(26132, Token.Text.Whitespace, '    ')",
  "(26136, Token.Text, 'if')",
  "(26138, Token.Text.Whitespace, ' ')",
  "(26139, Token.Text, 'test')",
  "(26143, Token.Text.Whitespace, ' ')",
  "(26144, Token.Text, '-n')",
  "(26146, Token.Text.Whitespace, ' ')",
  "(26147, Token.Literal.String.Double, '\"$fix_srcfile_path\"')",
  "(26166, Token.Text, ';')",
  "(26167, Token.Text.Whitespace, ' ')",
  "(26168, Token.Text, 'then')",
  "(26172, Token.Text.NewLine, '\\n')",
  "(26173, Token.Text.Whitespace, '      ')",
  "(26179, Token.Text, 'eval')",
  "(26183, Token.Text.Whitespace, ' ')",
  "(26184, Token.Text, 'srcfile=\\\\\"$fix_srcfile_path\\\\\"')",
  "(26213, Token.Text.NewLine, '\\n')",
  "(26214, Token.Text.Whitespace, '    ')",
  "(26218, Token.Text, 'fi')",
  "(26220, Token.Text.NewLine, '\\n')",
  "(26221, Token.Text.Whitespace, '    ')",
  "(26225, Token.Text, 'qsrcfile=`$echo')",
  "(26240, Token.Text.Whitespace, ' ')",
  "(26241, Token.Literal.String.Double, '\"X$srcfile\"')",
  "(26252, Token.Text.Whitespace, ' ')",
  "(26253, Token.Text, '|')",
  "(26254, Token.Text.Whitespace, ' ')",
  "(26255, Token.Text, '$Xsed')",
  "(26260, Token.Text.Whitespace, ' ')",
  "(26261, Token.Text, '-e')",
  "(26263, Token.Text.Whitespace, ' ')",
  "(26264, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(26282, Token.Text, '`')",
  "(26283, Token.Text.NewLine, '\\n')",
  "(26284, Token.Text.Whitespace, '    ')",
  "(26288, Token.Text, 'case')",
  "(26292, Token.Text.Whitespace, ' ')",
  "(26293, Token.Text, '$qsrcfile')",
  "(26302, Token.Text.Whitespace, ' ')",
  "(26303, Token.Text, 'in')",
  "(26305, Token.Text.NewLine, '\\n')",
  "(26306, Token.Text.Whitespace, '      ')",
  "(26312, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(26347, Token.Text.Whitespace, ' ')",
  "(26348, Token.Text, '\\\\')",
  "(26349, Token.Text.Whitespace, '\\t')",
  "(26350, Token.Text, ']*|*]*|\"\")')",
  "(26360, Token.Text.NewLine, '\\n')",
  "(26361, Token.Text.Whitespace, '      ')",
  "(26367, Token.Text, 'qsrcfile=\"\\\\\"$qsrcfile\\\\\"\"')",
  "(26391, Token.Text.Whitespace, ' ')",
  "(26392, Token.Text, ';;')",
  "(26394, Token.Text.NewLine, '\\n')",
  "(26395, Token.Text.Whitespace, '    ')",
  "(26399, Token.Text, 'esac')",
  "(26403, Token.Text.NewLine, '\\n\\n')",
  "(26405, Token.Text.Whitespace, '    ')",
  "(26409, Token.Text, '$run')",
  "(26413, Token.Text.Whitespace, ' ')",
  "(26414, Token.Text, '$rm')",
  "(26417, Token.Text.Whitespace, ' ')",
  "(26418, Token.Literal.String.Double, '\"$libobj\"')",
  "(26427, Token.Text.Whitespace, ' ')",
  "(26428, Token.Literal.String.Double, '\"${libobj}T\"')",
  "(26440, Token.Text.NewLine, '\\n\\n')",
  "(26442, Token.Text.Whitespace, '    ')",
  "(26446, Token.Comment.Single, '# Create a libtool object file (analogous to a \".la\" file),')",
  "(26505, Token.Text.NewLine, '\\n')",
  "(26506, Token.Text.Whitespace, '    ')",
  "(26510, Token.Comment.Single, \"# but don't create it if we're doing a dry run.\")",
  "(26557, Token.Text.NewLine, '\\n')",
  "(26558, Token.Text.Whitespace, '    ')",
  "(26562, Token.Text, 'test')",
  "(26566, Token.Text.Whitespace, ' ')",
  "(26567, Token.Text, '-z')",
  "(26569, Token.Text.Whitespace, ' ')",
  "(26570, Token.Literal.String.Double, '\"$run\"')",
  "(26576, Token.Text.Whitespace, ' ')",
  "(26577, Token.Text, '&&')",
  "(26579, Token.Text.Whitespace, ' ')",
  "(26580, Token.Text, 'cat')",
  "(26583, Token.Text.Whitespace, ' ')",
  "(26584, Token.Text, '>')",
  "(26585, Token.Text.Whitespace, ' ')",
  "(26586, Token.Text, '${libobj}T')",
  "(26596, Token.Text.Whitespace, ' ')",
  "(26597, Token.Text, '<<EOF')",
  "(26602, Token.Text.NewLine, '\\n')",
  "(26603, Token.Comment.Single, '# $libobj - a libtool object file')",
  "(26636, Token.Text.NewLine, '\\n')",
  "(26637, Token.Comment.Single, '# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP')",
  "(26694, Token.Text.NewLine, '\\n')",
  "(26695, Token.Comment.Single, '#')",
  "(26696, Token.Text.NewLine, '\\n')",
  "(26697, Token.Comment.Single, '# Please DO NOT delete this file!')",
  "(26730, Token.Text.NewLine, '\\n')",
  "(26731, Token.Comment.Single, '# It is necessary for linking the library.')",
  "(26773, Token.Text.NewLine, '\\n\\n')",
  "(26775, Token.Comment.Single, '# Name of the PIC object.')",
  "(26800, Token.Text.NewLine, '\\n')",
  "(26801, Token.Text, 'EOF')",
  "(26804, Token.Text.NewLine, '\\n\\n')",
  "(26806, Token.Text.Whitespace, '    ')",
  "(26810, Token.Comment.Single, '# Only build a PIC object if we are building libtool libraries.')",
  "(26873, Token.Text.NewLine, '\\n')",
  "(26874, Token.Text.Whitespace, '    ')",
  "(26878, Token.Text, 'if')",
  "(26880, Token.Text.Whitespace, ' ')",
  "(26881, Token.Text, 'test')",
  "(26885, Token.Text.Whitespace, ' ')",
  "(26886, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(26907, Token.Text.Whitespace, ' ')",
  "(26908, Token.Text, '=')",
  "(26909, Token.Text.Whitespace, ' ')",
  "(26910, Token.Text, 'yes;')",
  "(26914, Token.Text.Whitespace, ' ')",
  "(26915, Token.Text, 'then')",
  "(26919, Token.Text.NewLine, '\\n')",
  "(26920, Token.Text.Whitespace, '      ')",
  "(26926, Token.Comment.Single, '# Without this assignment, base_compile gets emptied.')",
  "(26979, Token.Text.NewLine, '\\n')",
  "(26980, Token.Text.Whitespace, '      ')",
  "(26986, Token.Text, 'fbsd_hideous_sh_bug=$base_compile')",
  "(27019, Token.Text.NewLine, '\\n\\n')",
  "(27021, Token.Text.Whitespace, '      ')",
  "(27027, Token.Text, 'if')",
  "(27029, Token.Text.Whitespace, ' ')",
  "(27030, Token.Text, 'test')",
  "(27034, Token.Text.Whitespace, ' ')",
  "(27035, Token.Literal.String.Double, '\"$pic_mode\"')",
  "(27046, Token.Text.Whitespace, ' ')",
  "(27047, Token.Text, '!=')",
  "(27049, Token.Text.Whitespace, ' ')",
  "(27050, Token.Text, 'no;')",
  "(27053, Token.Text.Whitespace, ' ')",
  "(27054, Token.Text, 'then')",
  "(27058, Token.Text.NewLine, '\\n')",
  "(27059, Token.Text.Whitespace, '\\t')",
  "(27060, Token.Text, 'command=\"$base_compile')",
  "(27082, Token.Text.Whitespace, ' ')",
  "(27083, Token.Text, '$qsrcfile')",
  "(27092, Token.Text.Whitespace, ' ')",
  "(27093, Token.Text, '$pic_flag\"')",
  "(27103, Token.Text.NewLine, '\\n')",
  "(27104, Token.Text.Whitespace, '      ')",
  "(27110, Token.Text, 'else')",
  "(27114, Token.Text.NewLine, '\\n')",
  "(27115, Token.Text.Whitespace, '\\t')",
  "(27116, Token.Comment.Single, \"# Don't build PIC code\")",
  "(27138, Token.Text.NewLine, '\\n')",
  "(27139, Token.Text.Whitespace, '\\t')",
  "(27140, Token.Text, 'command=\"$base_compile')",
  "(27162, Token.Text.Whitespace, ' ')",
  "(27163, Token.Text, '$qsrcfile\"')",
  "(27173, Token.Text.NewLine, '\\n')",
  "(27174, Token.Text.Whitespace, '      ')",
  "(27180, Token.Text, 'fi')",
  "(27182, Token.Text.NewLine, '\\n\\n')",
  "(27184, Token.Text.Whitespace, '      ')",
  "(27190, Token.Text, 'if')",
  "(27192, Token.Text.Whitespace, ' ')",
  "(27193, Token.Text, 'test')",
  "(27197, Token.Text.Whitespace, ' ')",
  "(27198, Token.Text, '!')",
  "(27199, Token.Text.Whitespace, ' ')",
  "(27200, Token.Text, '-d')",
  "(27202, Token.Text.Whitespace, ' ')",
  "(27203, Token.Literal.String.Double, '\"${xdir}$objdir\"')",
  "(27219, Token.Text, ';')",
  "(27220, Token.Text.Whitespace, ' ')",
  "(27221, Token.Text, 'then')",
  "(27225, Token.Text.NewLine, '\\n')",
  "(27226, Token.Text.Whitespace, '\\t')",
  "(27227, Token.Text, '$show')",
  "(27232, Token.Text.Whitespace, ' ')",
  "(27233, Token.Literal.String.Double, '\"$mkdir ${xdir}$objdir\"')",
  "(27256, Token.Text.NewLine, '\\n')",
  "(27257, Token.Text.Whitespace, '\\t')",
  "(27258, Token.Text, '$run')",
  "(27262, Token.Text.Whitespace, ' ')",
  "(27263, Token.Text, '$mkdir')",
  "(27269, Token.Text.Whitespace, ' ')",
  "(27270, Token.Text, '${xdir}$objdir')",
  "(27284, Token.Text.NewLine, '\\n')",
  "(27285, Token.Text.Whitespace, '\\t')",
  "(27286, Token.Text, 'exit_status=$?')",
  "(27300, Token.Text.NewLine, '\\n')",
  "(27301, Token.Text.Whitespace, '\\t')",
  "(27302, Token.Text, 'if')",
  "(27304, Token.Text.Whitespace, ' ')",
  "(27305, Token.Text, 'test')",
  "(27309, Token.Text.Whitespace, ' ')",
  "(27310, Token.Literal.String.Double, '\"$exit_status\"')",
  "(27324, Token.Text.Whitespace, ' ')",
  "(27325, Token.Text, '-ne')",
  "(27328, Token.Text.Whitespace, ' ')",
  "(27329, Token.Text, '0')",
  "(27330, Token.Text.Whitespace, ' ')",
  "(27331, Token.Text, '&&')",
  "(27333, Token.Text.Whitespace, ' ')",
  "(27334, Token.Text, 'test')",
  "(27338, Token.Text.Whitespace, ' ')",
  "(27339, Token.Text, '!')",
  "(27340, Token.Text.Whitespace, ' ')",
  "(27341, Token.Text, '-d')",
  "(27343, Token.Text.Whitespace, ' ')",
  "(27344, Token.Literal.String.Double, '\"${xdir}$objdir\"')",
  "(27360, Token.Text, ';')",
  "(27361, Token.Text.Whitespace, ' ')",
  "(27362, Token.Text, 'then')",
  "(27366, Token.Text.NewLine, '\\n')",
  "(27367, Token.Text.Whitespace, '\\t  ')",
  "(27370, Token.Text, 'exit')",
  "(27374, Token.Text.Whitespace, ' ')",
  "(27375, Token.Text, '$exit_status')",
  "(27387, Token.Text.NewLine, '\\n')",
  "(27388, Token.Text.Whitespace, '\\t')",
  "(27389, Token.Text, 'fi')",
  "(27391, Token.Text.NewLine, '\\n')",
  "(27392, Token.Text.Whitespace, '      ')",
  "(27398, Token.Text, 'fi')",
  "(27400, Token.Text.NewLine, '\\n\\n')",
  "(27402, Token.Text.Whitespace, '      ')",
  "(27408, Token.Text, 'if')",
  "(27410, Token.Text.Whitespace, ' ')",
  "(27411, Token.Text, 'test')",
  "(27415, Token.Text.Whitespace, ' ')",
  "(27416, Token.Text, '-z')",
  "(27418, Token.Text.Whitespace, ' ')",
  "(27419, Token.Literal.String.Double, '\"$output_obj\"')",
  "(27432, Token.Text, ';')",
  "(27433, Token.Text.Whitespace, ' ')",
  "(27434, Token.Text, 'then')",
  "(27438, Token.Text.NewLine, '\\n')",
  "(27439, Token.Text.Whitespace, '\\t')",
  "(27440, Token.Comment.Single, '# Place PIC objects in $objdir')",
  "(27470, Token.Text.NewLine, '\\n')",
  "(27471, Token.Text.Whitespace, '\\t')",
  "(27472, Token.Text, 'command=\"$command')",
  "(27489, Token.Text.Whitespace, ' ')",
  "(27490, Token.Text, '-o')",
  "(27492, Token.Text.Whitespace, ' ')",
  "(27493, Token.Text, '$lobj\"')",
  "(27499, Token.Text.NewLine, '\\n')",
  "(27500, Token.Text.Whitespace, '      ')",
  "(27506, Token.Text, 'fi')",
  "(27508, Token.Text.NewLine, '\\n\\n')",
  "(27510, Token.Text.Whitespace, '      ')",
  "(27516, Token.Text, '$run')",
  "(27520, Token.Text.Whitespace, ' ')",
  "(27521, Token.Text, '$rm')",
  "(27524, Token.Text.Whitespace, ' ')",
  "(27525, Token.Literal.String.Double, '\"$lobj\"')",
  "(27532, Token.Text.Whitespace, ' ')",
  "(27533, Token.Literal.String.Double, '\"$output_obj\"')",
  "(27546, Token.Text.NewLine, '\\n\\n')",
  "(27548, Token.Text.Whitespace, '      ')",
  "(27554, Token.Text, '$show')",
  "(27559, Token.Text.Whitespace, ' ')",
  "(27560, Token.Literal.String.Double, '\"$command\"')",
  "(27570, Token.Text.NewLine, '\\n')",
  "(27571, Token.Text.Whitespace, '      ')",
  "(27577, Token.Text, 'if')",
  "(27579, Token.Text.Whitespace, ' ')",
  "(27580, Token.Text, '$run')",
  "(27584, Token.Text.Whitespace, ' ')",
  "(27585, Token.Text, 'eval')",
  "(27589, Token.Text.Whitespace, ' ')",
  "(27590, Token.Literal.String.Double, '\"$command\"')",
  "(27600, Token.Text, ';')",
  "(27601, Token.Text.Whitespace, ' ')",
  "(27602, Token.Text, 'then')",
  "(27606, Token.Text.Whitespace, ' ')",
  "(27607, Token.Text, ':')",
  "(27608, Token.Text.NewLine, '\\n')",
  "(27609, Token.Text.Whitespace, '      ')",
  "(27615, Token.Text, 'else')",
  "(27619, Token.Text.NewLine, '\\n')",
  "(27620, Token.Text.Whitespace, '\\t')",
  "(27621, Token.Text, 'test')",
  "(27625, Token.Text.Whitespace, ' ')",
  "(27626, Token.Text, '-n')",
  "(27628, Token.Text.Whitespace, ' ')",
  "(27629, Token.Literal.String.Double, '\"$output_obj\"')",
  "(27642, Token.Text.Whitespace, ' ')",
  "(27643, Token.Text, '&&')",
  "(27645, Token.Text.Whitespace, ' ')",
  "(27646, Token.Text, '$run')",
  "(27650, Token.Text.Whitespace, ' ')",
  "(27651, Token.Text, '$rm')",
  "(27654, Token.Text.Whitespace, ' ')",
  "(27655, Token.Text, '$removelist')",
  "(27666, Token.Text.NewLine, '\\n')",
  "(27667, Token.Text.Whitespace, '\\t')",
  "(27668, Token.Text, 'exit')",
  "(27672, Token.Text.Whitespace, ' ')",
  "(27673, Token.Text, '$EXIT_FAILURE')",
  "(27686, Token.Text.NewLine, '\\n')",
  "(27687, Token.Text.Whitespace, '      ')",
  "(27693, Token.Text, 'fi')",
  "(27695, Token.Text.NewLine, '\\n\\n')",
  "(27697, Token.Text.Whitespace, '      ')",
  "(27703, Token.Text, 'if')",
  "(27705, Token.Text.Whitespace, ' ')",
  "(27706, Token.Text, 'test')",
  "(27710, Token.Text.Whitespace, ' ')",
  "(27711, Token.Literal.String.Double, '\"$need_locks\"')",
  "(27724, Token.Text.Whitespace, ' ')",
  "(27725, Token.Text, '=')",
  "(27726, Token.Text.Whitespace, ' ')",
  "(27727, Token.Text, 'warn')",
  "(27731, Token.Text.Whitespace, ' ')",
  "(27732, Token.Text, '&&')",
  "(27734, Token.Text.NewLine, '\\n')",
  "(27735, Token.Text.Whitespace, '\\t ')",
  "(27737, Token.Text, 'test')",
  "(27741, Token.Text.Whitespace, ' ')",
  "(27742, Token.Literal.String.Double, '\"X`cat $lockfile 2>/dev/null`\"')",
  "(27772, Token.Text.Whitespace, ' ')",
  "(27773, Token.Text, '!=')",
  "(27775, Token.Text.Whitespace, ' ')",
  "(27776, Token.Literal.String.Double, '\"X$srcfile\"')",
  "(27787, Token.Text, ';')",
  "(27788, Token.Text.Whitespace, ' ')",
  "(27789, Token.Text, 'then')",
  "(27793, Token.Text.NewLine, '\\n')",
  "(27794, Token.Text.Whitespace, '\\t')",
  "(27795, Token.Text, '$echo')",
  "(27800, Token.Text.Whitespace, ' ')",
  "(27801, Token.Literal.String.Double, '\"\\\\\\n*** ERROR, $lockfile contains:\\n`cat $lockfile 2>/dev/null`\\n\\nbut it should contain:\\n$srcfile\\n\\nThis indicates that another process is trying to use the same\\ntemporary object file, and libtool could not work around it because\\nyour compiler does not support \\\\`-c\\' and \\\\`-o\\' together.  If you\\nrepeat this compilation, it may succeed, by chance, but you had better\\navoid parallel builds (make -j) in this platform, or get a better\\ncompiler.\"')",
  "(28239, Token.Text.NewLine, '\\n\\n')",
  "(28241, Token.Text.Whitespace, '\\t')",
  "(28242, Token.Text, '$run')",
  "(28246, Token.Text.Whitespace, ' ')",
  "(28247, Token.Text, '$rm')",
  "(28250, Token.Text.Whitespace, ' ')",
  "(28251, Token.Text, '$removelist')",
  "(28262, Token.Text.NewLine, '\\n')",
  "(28263, Token.Text.Whitespace, '\\t')",
  "(28264, Token.Text, 'exit')",
  "(28268, Token.Text.Whitespace, ' ')",
  "(28269, Token.Text, '$EXIT_FAILURE')",
  "(28282, Token.Text.NewLine, '\\n')",
  "(28283, Token.Text.Whitespace, '      ')",
  "(28289, Token.Text, 'fi')",
  "(28291, Token.Text.NewLine, '\\n\\n')",
  "(28293, Token.Text.Whitespace, '      ')",
  "(28299, Token.Comment.Single, '# Just move the object if needed, then go on to compile the next one')",
  "(28367, Token.Text.NewLine, '\\n')",
  "(28368, Token.Text.Whitespace, '      ')",
  "(28374, Token.Text, 'if')",
  "(28376, Token.Text.Whitespace, ' ')",
  "(28377, Token.Text, 'test')",
  "(28381, Token.Text.Whitespace, ' ')",
  "(28382, Token.Text, '-n')",
  "(28384, Token.Text.Whitespace, ' ')",
  "(28385, Token.Literal.String.Double, '\"$output_obj\"')",
  "(28398, Token.Text.Whitespace, ' ')",
  "(28399, Token.Text, '&&')",
  "(28401, Token.Text.Whitespace, ' ')",
  "(28402, Token.Text, 'test')",
  "(28406, Token.Text.Whitespace, ' ')",
  "(28407, Token.Literal.String.Double, '\"X$output_obj\"')",
  "(28421, Token.Text.Whitespace, ' ')",
  "(28422, Token.Text, '!=')",
  "(28424, Token.Text.Whitespace, ' ')",
  "(28425, Token.Literal.String.Double, '\"X$lobj\"')",
  "(28433, Token.Text, ';')",
  "(28434, Token.Text.Whitespace, ' ')",
  "(28435, Token.Text, 'then')",
  "(28439, Token.Text.NewLine, '\\n')",
  "(28440, Token.Text.Whitespace, '\\t')",
  "(28441, Token.Text, '$show')",
  "(28446, Token.Text.Whitespace, ' ')",
  "(28447, Token.Literal.String.Double, '\"$mv $output_obj $lobj\"')",
  "(28470, Token.Text.NewLine, '\\n')",
  "(28471, Token.Text.Whitespace, '\\t')",
  "(28472, Token.Text, 'if')",
  "(28474, Token.Text.Whitespace, ' ')",
  "(28475, Token.Text, '$run')",
  "(28479, Token.Text.Whitespace, ' ')",
  "(28480, Token.Text, '$mv')",
  "(28483, Token.Text.Whitespace, ' ')",
  "(28484, Token.Text, '$output_obj')",
  "(28495, Token.Text.Whitespace, ' ')",
  "(28496, Token.Text, '$lobj;')",
  "(28502, Token.Text.Whitespace, ' ')",
  "(28503, Token.Text, 'then')",
  "(28507, Token.Text.Whitespace, ' ')",
  "(28508, Token.Text, ':')",
  "(28509, Token.Text.NewLine, '\\n')",
  "(28510, Token.Text.Whitespace, '\\t')",
  "(28511, Token.Text, 'else')",
  "(28515, Token.Text.NewLine, '\\n')",
  "(28516, Token.Text.Whitespace, '\\t  ')",
  "(28519, Token.Text, 'error=$?')",
  "(28527, Token.Text.NewLine, '\\n')",
  "(28528, Token.Text.Whitespace, '\\t  ')",
  "(28531, Token.Text, '$run')",
  "(28535, Token.Text.Whitespace, ' ')",
  "(28536, Token.Text, '$rm')",
  "(28539, Token.Text.Whitespace, ' ')",
  "(28540, Token.Text, '$removelist')",
  "(28551, Token.Text.NewLine, '\\n')",
  "(28552, Token.Text.Whitespace, '\\t  ')",
  "(28555, Token.Text, 'exit')",
  "(28559, Token.Text.Whitespace, ' ')",
  "(28560, Token.Text, '$error')",
  "(28566, Token.Text.NewLine, '\\n')",
  "(28567, Token.Text.Whitespace, '\\t')",
  "(28568, Token.Text, 'fi')",
  "(28570, Token.Text.NewLine, '\\n')",
  "(28571, Token.Text.Whitespace, '      ')",
  "(28577, Token.Text, 'fi')",
  "(28579, Token.Text.NewLine, '\\n\\n')",
  "(28581, Token.Text.Whitespace, '      ')",
  "(28587, Token.Comment.Single, '# Append the name of the PIC object to the libtool object file.')",
  "(28650, Token.Text.NewLine, '\\n')",
  "(28651, Token.Text.Whitespace, '      ')",
  "(28657, Token.Text, 'test')",
  "(28661, Token.Text.Whitespace, ' ')",
  "(28662, Token.Text, '-z')",
  "(28664, Token.Text.Whitespace, ' ')",
  "(28665, Token.Literal.String.Double, '\"$run\"')",
  "(28671, Token.Text.Whitespace, ' ')",
  "(28672, Token.Text, '&&')",
  "(28674, Token.Text.Whitespace, ' ')",
  "(28675, Token.Text, 'cat')",
  "(28678, Token.Text.Whitespace, ' ')",
  "(28679, Token.Text, '>>')",
  "(28681, Token.Text.Whitespace, ' ')",
  "(28682, Token.Text, '${libobj}T')",
  "(28692, Token.Text.Whitespace, ' ')",
  "(28693, Token.Text, '<<EOF')",
  "(28698, Token.Text.NewLine, '\\n')",
  "(28699, Token.Name.Variable, 'pic_object')",
  "(28709, Token.Operator.Equal, '=')",
  "(28710, Token.Literal.String.Single, \"'$objdir/$objname'\")",
  "(28728, Token.Text.NewLine, '\\n\\n')",
  "(28730, Token.Text, 'EOF')",
  "(28733, Token.Text.NewLine, '\\n\\n')",
  "(28735, Token.Text.Whitespace, '      ')",
  "(28741, Token.Comment.Single, '# Allow error messages only from the first compilation.')",
  "(28796, Token.Text.NewLine, '\\n')",
  "(28797, Token.Text.Whitespace, '      ')",
  "(28803, Token.Text, 'if')",
  "(28805, Token.Text.Whitespace, ' ')",
  "(28806, Token.Text, 'test')",
  "(28810, Token.Text.Whitespace, ' ')",
  "(28811, Token.Literal.String.Double, '\"$suppress_opt\"')",
  "(28826, Token.Text.Whitespace, ' ')",
  "(28827, Token.Text, '=')",
  "(28828, Token.Text.Whitespace, ' ')",
  "(28829, Token.Text, 'yes;')",
  "(28833, Token.Text.Whitespace, ' ')",
  "(28834, Token.Text, 'then')",
  "(28838, Token.Text.NewLine, '\\n')",
  "(28839, Token.Text.Whitespace, '        ')",
  "(28847, Token.Text, \"suppress_output='\")",
  "(28864, Token.Text.Whitespace, ' ')",
  "(28865, Token.Text, '>/dev/null')",
  "(28875, Token.Text.Whitespace, ' ')",
  "(28876, Token.Text, \"2>&1'\")",
  "(28881, Token.Text.NewLine, '\\n')",
  "(28882, Token.Text.Whitespace, '      ')",
  "(28888, Token.Text, 'fi')",
  "(28890, Token.Text.NewLine, '\\n')",
  "(28891, Token.Text.Whitespace, '    ')",
  "(28895, Token.Text, 'else')",
  "(28899, Token.Text.NewLine, '\\n')",
  "(28900, Token.Text.Whitespace, '      ')",
  "(28906, Token.Comment.Single, \"# No PIC object so indicate it doesn't exist in the libtool\")",
  "(28965, Token.Text.NewLine, '\\n')",
  "(28966, Token.Text.Whitespace, '      ')",
  "(28972, Token.Comment.Single, '# object file.')",
  "(28986, Token.Text.NewLine, '\\n')",
  "(28987, Token.Text.Whitespace, '      ')",
  "(28993, Token.Text, 'test')",
  "(28997, Token.Text.Whitespace, ' ')",
  "(28998, Token.Text, '-z')",
  "(29000, Token.Text.Whitespace, ' ')",
  "(29001, Token.Literal.String.Double, '\"$run\"')",
  "(29007, Token.Text.Whitespace, ' ')",
  "(29008, Token.Text, '&&')",
  "(29010, Token.Text.Whitespace, ' ')",
  "(29011, Token.Text, 'cat')",
  "(29014, Token.Text.Whitespace, ' ')",
  "(29015, Token.Text, '>>')",
  "(29017, Token.Text.Whitespace, ' ')",
  "(29018, Token.Text, '${libobj}T')",
  "(29028, Token.Text.Whitespace, ' ')",
  "(29029, Token.Text, '<<EOF')",
  "(29034, Token.Text.NewLine, '\\n')",
  "(29035, Token.Name.Variable, 'pic_object')",
  "(29045, Token.Operator.Equal, '=')",
  "(29046, Token.Text, 'none')",
  "(29050, Token.Text.NewLine, '\\n\\n')",
  "(29052, Token.Text, 'EOF')",
  "(29055, Token.Text.NewLine, '\\n')",
  "(29056, Token.Text.Whitespace, '    ')",
  "(29060, Token.Text, 'fi')",
  "(29062, Token.Text.NewLine, '\\n\\n')",
  "(29064, Token.Text.Whitespace, '    ')",
  "(29068, Token.Comment.Single, '# Only build a position-dependent object if we build old libraries.')",
  "(29135, Token.Text.NewLine, '\\n')",
  "(29136, Token.Text.Whitespace, '    ')",
  "(29140, Token.Text, 'if')",
  "(29142, Token.Text.Whitespace, ' ')",
  "(29143, Token.Text, 'test')",
  "(29147, Token.Text.Whitespace, ' ')",
  "(29148, Token.Literal.String.Double, '\"$build_old_libs\"')",
  "(29165, Token.Text.Whitespace, ' ')",
  "(29166, Token.Text, '=')",
  "(29167, Token.Text.Whitespace, ' ')",
  "(29168, Token.Text, 'yes;')",
  "(29172, Token.Text.Whitespace, ' ')",
  "(29173, Token.Text, 'then')",
  "(29177, Token.Text.NewLine, '\\n')",
  "(29178, Token.Text.Whitespace, '      ')",
  "(29184, Token.Text, 'if')",
  "(29186, Token.Text.Whitespace, ' ')",
  "(29187, Token.Text, 'test')",
  "(29191, Token.Text.Whitespace, ' ')",
  "(29192, Token.Literal.String.Double, '\"$pic_mode\"')",
  "(29203, Token.Text.Whitespace, ' ')",
  "(29204, Token.Text, '!=')",
  "(29206, Token.Text.Whitespace, ' ')",
  "(29207, Token.Text, 'yes;')",
  "(29211, Token.Text.Whitespace, ' ')",
  "(29212, Token.Text, 'then')",
  "(29216, Token.Text.NewLine, '\\n')",
  "(29217, Token.Text.Whitespace, '\\t')",
  "(29218, Token.Comment.Single, \"# Don't build PIC code\")",
  "(29240, Token.Text.NewLine, '\\n')",
  "(29241, Token.Text.Whitespace, '\\t')",
  "(29242, Token.Text, 'command=\"$base_compile')",
  "(29264, Token.Text.Whitespace, ' ')",
  "(29265, Token.Text, '$qsrcfile\"')",
  "(29275, Token.Text.NewLine, '\\n')",
  "(29276, Token.Text.Whitespace, '      ')",
  "(29282, Token.Text, 'else')",
  "(29286, Token.Text.NewLine, '\\n')",
  "(29287, Token.Text.Whitespace, '\\t')",
  "(29288, Token.Text, 'command=\"$base_compile')",
  "(29310, Token.Text.Whitespace, ' ')",
  "(29311, Token.Text, '$qsrcfile')",
  "(29320, Token.Text.Whitespace, ' ')",
  "(29321, Token.Text, '$pic_flag\"')",
  "(29331, Token.Text.NewLine, '\\n')",
  "(29332, Token.Text.Whitespace, '      ')",
  "(29338, Token.Text, 'fi')",
  "(29340, Token.Text.NewLine, '\\n')",
  "(29341, Token.Text.Whitespace, '      ')",
  "(29347, Token.Text, 'if')",
  "(29349, Token.Text.Whitespace, ' ')",
  "(29350, Token.Text, 'test')",
  "(29354, Token.Text.Whitespace, ' ')",
  "(29355, Token.Literal.String.Double, '\"$compiler_c_o\"')",
  "(29370, Token.Text.Whitespace, ' ')",
  "(29371, Token.Text, '=')",
  "(29372, Token.Text.Whitespace, ' ')",
  "(29373, Token.Text, 'yes;')",
  "(29377, Token.Text.Whitespace, ' ')",
  "(29378, Token.Text, 'then')",
  "(29382, Token.Text.NewLine, '\\n')",
  "(29383, Token.Text.Whitespace, '\\t')",
  "(29384, Token.Text, 'command=\"$command')",
  "(29401, Token.Text.Whitespace, ' ')",
  "(29402, Token.Text, '-o')",
  "(29404, Token.Text.Whitespace, ' ')",
  "(29405, Token.Text, '$obj\"')",
  "(29410, Token.Text.NewLine, '\\n')",
  "(29411, Token.Text.Whitespace, '      ')",
  "(29417, Token.Text, 'fi')",
  "(29419, Token.Text.NewLine, '\\n\\n')",
  "(29421, Token.Text.Whitespace, '      ')",
  "(29427, Token.Comment.Single, '# Suppress compiler output if we already did a PIC compilation.')",
  "(29490, Token.Text.NewLine, '\\n')",
  "(29491, Token.Text.Whitespace, '      ')",
  "(29497, Token.Text, 'command=\"$command$suppress_output\"')",
  "(29531, Token.Text.NewLine, '\\n')",
  "(29532, Token.Text.Whitespace, '      ')",
  "(29538, Token.Text, '$run')",
  "(29542, Token.Text.Whitespace, ' ')",
  "(29543, Token.Text, '$rm')",
  "(29546, Token.Text.Whitespace, ' ')",
  "(29547, Token.Literal.String.Double, '\"$obj\"')",
  "(29553, Token.Text.Whitespace, ' ')",
  "(29554, Token.Literal.String.Double, '\"$output_obj\"')",
  "(29567, Token.Text.NewLine, '\\n')",
  "(29568, Token.Text.Whitespace, '      ')",
  "(29574, Token.Text, '$show')",
  "(29579, Token.Text.Whitespace, ' ')",
  "(29580, Token.Literal.String.Double, '\"$command\"')",
  "(29590, Token.Text.NewLine, '\\n')",
  "(29591, Token.Text.Whitespace, '      ')",
  "(29597, Token.Text, 'if')",
  "(29599, Token.Text.Whitespace, ' ')",
  "(29600, Token.Text, '$run')",
  "(29604, Token.Text.Whitespace, ' ')",
  "(29605, Token.Text, 'eval')",
  "(29609, Token.Text.Whitespace, ' ')",
  "(29610, Token.Literal.String.Double, '\"$command\"')",
  "(29620, Token.Text, ';')",
  "(29621, Token.Text.Whitespace, ' ')",
  "(29622, Token.Text, 'then')",
  "(29626, Token.Text.Whitespace, ' ')",
  "(29627, Token.Text, ':')",
  "(29628, Token.Text.NewLine, '\\n')",
  "(29629, Token.Text.Whitespace, '      ')",
  "(29635, Token.Text, 'else')",
  "(29639, Token.Text.NewLine, '\\n')",
  "(29640, Token.Text.Whitespace, '\\t')",
  "(29641, Token.Text, '$run')",
  "(29645, Token.Text.Whitespace, ' ')",
  "(29646, Token.Text, '$rm')",
  "(29649, Token.Text.Whitespace, ' ')",
  "(29650, Token.Text, '$removelist')",
  "(29661, Token.Text.NewLine, '\\n')",
  "(29662, Token.Text.Whitespace, '\\t')",
  "(29663, Token.Text, 'exit')",
  "(29667, Token.Text.Whitespace, ' ')",
  "(29668, Token.Text, '$EXIT_FAILURE')",
  "(29681, Token.Text.NewLine, '\\n')",
  "(29682, Token.Text.Whitespace, '      ')",
  "(29688, Token.Text, 'fi')",
  "(29690, Token.Text.NewLine, '\\n\\n')",
  "(29692, Token.Text.Whitespace, '      ')",
  "(29698, Token.Text, 'if')",
  "(29700, Token.Text.Whitespace, ' ')",
  "(29701, Token.Text, 'test')",
  "(29705, Token.Text.Whitespace, ' ')",
  "(29706, Token.Literal.String.Double, '\"$need_locks\"')",
  "(29719, Token.Text.Whitespace, ' ')",
  "(29720, Token.Text, '=')",
  "(29721, Token.Text.Whitespace, ' ')",
  "(29722, Token.Text, 'warn')",
  "(29726, Token.Text.Whitespace, ' ')",
  "(29727, Token.Text, '&&')",
  "(29729, Token.Text.NewLine, '\\n')",
  "(29730, Token.Text.Whitespace, '\\t ')",
  "(29732, Token.Text, 'test')",
  "(29736, Token.Text.Whitespace, ' ')",
  "(29737, Token.Literal.String.Double, '\"X`cat $lockfile 2>/dev/null`\"')",
  "(29767, Token.Text.Whitespace, ' ')",
  "(29768, Token.Text, '!=')",
  "(29770, Token.Text.Whitespace, ' ')",
  "(29771, Token.Literal.String.Double, '\"X$srcfile\"')",
  "(29782, Token.Text, ';')",
  "(29783, Token.Text.Whitespace, ' ')",
  "(29784, Token.Text, 'then')",
  "(29788, Token.Text.NewLine, '\\n')",
  "(29789, Token.Text.Whitespace, '\\t')",
  "(29790, Token.Text, '$echo')",
  "(29795, Token.Text.Whitespace, ' ')",
  "(29796, Token.Literal.String.Double, '\"\\\\\\n*** ERROR, $lockfile contains:\\n`cat $lockfile 2>/dev/null`\\n\\nbut it should contain:\\n$srcfile\\n\\nThis indicates that another process is trying to use the same\\ntemporary object file, and libtool could not work around it because\\nyour compiler does not support \\\\`-c\\' and \\\\`-o\\' together.  If you\\nrepeat this compilation, it may succeed, by chance, but you had better\\navoid parallel builds (make -j) in this platform, or get a better\\ncompiler.\"')",
  "(30234, Token.Text.NewLine, '\\n\\n')",
  "(30236, Token.Text.Whitespace, '\\t')",
  "(30237, Token.Text, '$run')",
  "(30241, Token.Text.Whitespace, ' ')",
  "(30242, Token.Text, '$rm')",
  "(30245, Token.Text.Whitespace, ' ')",
  "(30246, Token.Text, '$removelist')",
  "(30257, Token.Text.NewLine, '\\n')",
  "(30258, Token.Text.Whitespace, '\\t')",
  "(30259, Token.Text, 'exit')",
  "(30263, Token.Text.Whitespace, ' ')",
  "(30264, Token.Text, '$EXIT_FAILURE')",
  "(30277, Token.Text.NewLine, '\\n')",
  "(30278, Token.Text.Whitespace, '      ')",
  "(30284, Token.Text, 'fi')",
  "(30286, Token.Text.NewLine, '\\n\\n')",
  "(30288, Token.Text.Whitespace, '      ')",
  "(30294, Token.Comment.Single, '# Just move the object if needed')",
  "(30326, Token.Text.NewLine, '\\n')",
  "(30327, Token.Text.Whitespace, '      ')",
  "(30333, Token.Text, 'if')",
  "(30335, Token.Text.Whitespace, ' ')",
  "(30336, Token.Text, 'test')",
  "(30340, Token.Text.Whitespace, ' ')",
  "(30341, Token.Text, '-n')",
  "(30343, Token.Text.Whitespace, ' ')",
  "(30344, Token.Literal.String.Double, '\"$output_obj\"')",
  "(30357, Token.Text.Whitespace, ' ')",
  "(30358, Token.Text, '&&')",
  "(30360, Token.Text.Whitespace, ' ')",
  "(30361, Token.Text, 'test')",
  "(30365, Token.Text.Whitespace, ' ')",
  "(30366, Token.Literal.String.Double, '\"X$output_obj\"')",
  "(30380, Token.Text.Whitespace, ' ')",
  "(30381, Token.Text, '!=')",
  "(30383, Token.Text.Whitespace, ' ')",
  "(30384, Token.Literal.String.Double, '\"X$obj\"')",
  "(30391, Token.Text, ';')",
  "(30392, Token.Text.Whitespace, ' ')",
  "(30393, Token.Text, 'then')",
  "(30397, Token.Text.NewLine, '\\n')",
  "(30398, Token.Text.Whitespace, '\\t')",
  "(30399, Token.Text, '$show')",
  "(30404, Token.Text.Whitespace, ' ')",
  "(30405, Token.Literal.String.Double, '\"$mv $output_obj $obj\"')",
  "(30427, Token.Text.NewLine, '\\n')",
  "(30428, Token.Text.Whitespace, '\\t')",
  "(30429, Token.Text, 'if')",
  "(30431, Token.Text.Whitespace, ' ')",
  "(30432, Token.Text, '$run')",
  "(30436, Token.Text.Whitespace, ' ')",
  "(30437, Token.Text, '$mv')",
  "(30440, Token.Text.Whitespace, ' ')",
  "(30441, Token.Text, '$output_obj')",
  "(30452, Token.Text.Whitespace, ' ')",
  "(30453, Token.Text, '$obj;')",
  "(30458, Token.Text.Whitespace, ' ')",
  "(30459, Token.Text, 'then')",
  "(30463, Token.Text.Whitespace, ' ')",
  "(30464, Token.Text, ':')",
  "(30465, Token.Text.NewLine, '\\n')",
  "(30466, Token.Text.Whitespace, '\\t')",
  "(30467, Token.Text, 'else')",
  "(30471, Token.Text.NewLine, '\\n')",
  "(30472, Token.Text.Whitespace, '\\t  ')",
  "(30475, Token.Text, 'error=$?')",
  "(30483, Token.Text.NewLine, '\\n')",
  "(30484, Token.Text.Whitespace, '\\t  ')",
  "(30487, Token.Text, '$run')",
  "(30491, Token.Text.Whitespace, ' ')",
  "(30492, Token.Text, '$rm')",
  "(30495, Token.Text.Whitespace, ' ')",
  "(30496, Token.Text, '$removelist')",
  "(30507, Token.Text.NewLine, '\\n')",
  "(30508, Token.Text.Whitespace, '\\t  ')",
  "(30511, Token.Text, 'exit')",
  "(30515, Token.Text.Whitespace, ' ')",
  "(30516, Token.Text, '$error')",
  "(30522, Token.Text.NewLine, '\\n')",
  "(30523, Token.Text.Whitespace, '\\t')",
  "(30524, Token.Text, 'fi')",
  "(30526, Token.Text.NewLine, '\\n')",
  "(30527, Token.Text.Whitespace, '      ')",
  "(30533, Token.Text, 'fi')",
  "(30535, Token.Text.NewLine, '\\n\\n')",
  "(30537, Token.Text.Whitespace, '      ')",
  "(30543, Token.Comment.Single, '# Append the name of the non-PIC object the libtool object file.')",
  "(30607, Token.Text.NewLine, '\\n')",
  "(30608, Token.Text.Whitespace, '      ')",
  "(30614, Token.Comment.Single, '# Only append if the libtool object file exists.')",
  "(30662, Token.Text.NewLine, '\\n')",
  "(30663, Token.Text.Whitespace, '      ')",
  "(30669, Token.Text, 'test')",
  "(30673, Token.Text.Whitespace, ' ')",
  "(30674, Token.Text, '-z')",
  "(30676, Token.Text.Whitespace, ' ')",
  "(30677, Token.Literal.String.Double, '\"$run\"')",
  "(30683, Token.Text.Whitespace, ' ')",
  "(30684, Token.Text, '&&')",
  "(30686, Token.Text.Whitespace, ' ')",
  "(30687, Token.Text, 'cat')",
  "(30690, Token.Text.Whitespace, ' ')",
  "(30691, Token.Text, '>>')",
  "(30693, Token.Text.Whitespace, ' ')",
  "(30694, Token.Text, '${libobj}T')",
  "(30704, Token.Text.Whitespace, ' ')",
  "(30705, Token.Text, '<<EOF')",
  "(30710, Token.Text.NewLine, '\\n')",
  "(30711, Token.Comment.Single, '# Name of the non-PIC object.')",
  "(30740, Token.Text.NewLine, '\\n')",
  "(30741, Token.Name.Variable, 'non_pic_object')",
  "(30755, Token.Operator.Equal, '=')",
  "(30756, Token.Literal.String.Single, \"'$objname'\")",
  "(30766, Token.Text.NewLine, '\\n\\n')",
  "(30768, Token.Text, 'EOF')",
  "(30771, Token.Text.NewLine, '\\n')",
  "(30772, Token.Text.Whitespace, '    ')",
  "(30776, Token.Text, 'else')",
  "(30780, Token.Text.NewLine, '\\n')",
  "(30781, Token.Text.Whitespace, '      ')",
  "(30787, Token.Comment.Single, '# Append the name of the non-PIC object the libtool object file.')",
  "(30851, Token.Text.NewLine, '\\n')",
  "(30852, Token.Text.Whitespace, '      ')",
  "(30858, Token.Comment.Single, '# Only append if the libtool object file exists.')",
  "(30906, Token.Text.NewLine, '\\n')",
  "(30907, Token.Text.Whitespace, '      ')",
  "(30913, Token.Text, 'test')",
  "(30917, Token.Text.Whitespace, ' ')",
  "(30918, Token.Text, '-z')",
  "(30920, Token.Text.Whitespace, ' ')",
  "(30921, Token.Literal.String.Double, '\"$run\"')",
  "(30927, Token.Text.Whitespace, ' ')",
  "(30928, Token.Text, '&&')",
  "(30930, Token.Text.Whitespace, ' ')",
  "(30931, Token.Text, 'cat')",
  "(30934, Token.Text.Whitespace, ' ')",
  "(30935, Token.Text, '>>')",
  "(30937, Token.Text.Whitespace, ' ')",
  "(30938, Token.Text, '${libobj}T')",
  "(30948, Token.Text.Whitespace, ' ')",
  "(30949, Token.Text, '<<EOF')",
  "(30954, Token.Text.NewLine, '\\n')",
  "(30955, Token.Comment.Single, '# Name of the non-PIC object.')",
  "(30984, Token.Text.NewLine, '\\n')",
  "(30985, Token.Name.Variable, 'non_pic_object')",
  "(30999, Token.Operator.Equal, '=')",
  "(31000, Token.Text, 'none')",
  "(31004, Token.Text.NewLine, '\\n\\n')",
  "(31006, Token.Text, 'EOF')",
  "(31009, Token.Text.NewLine, '\\n')",
  "(31010, Token.Text.Whitespace, '    ')",
  "(31014, Token.Text, 'fi')",
  "(31016, Token.Text.NewLine, '\\n\\n')",
  "(31018, Token.Text.Whitespace, '    ')",
  "(31022, Token.Text, '$run')",
  "(31026, Token.Text.Whitespace, ' ')",
  "(31027, Token.Text, '$mv')",
  "(31030, Token.Text.Whitespace, ' ')",
  "(31031, Token.Literal.String.Double, '\"${libobj}T\"')",
  "(31043, Token.Text.Whitespace, ' ')",
  "(31044, Token.Literal.String.Double, '\"${libobj}\"')",
  "(31055, Token.Text.NewLine, '\\n\\n')",
  "(31057, Token.Text.Whitespace, '    ')",
  "(31061, Token.Comment.Single, '# Unlock the critical section if it was locked')",
  "(31107, Token.Text.NewLine, '\\n')",
  "(31108, Token.Text.Whitespace, '    ')",
  "(31112, Token.Text, 'if')",
  "(31114, Token.Text.Whitespace, ' ')",
  "(31115, Token.Text, 'test')",
  "(31119, Token.Text.Whitespace, ' ')",
  "(31120, Token.Literal.String.Double, '\"$need_locks\"')",
  "(31133, Token.Text.Whitespace, ' ')",
  "(31134, Token.Text, '!=')",
  "(31136, Token.Text.Whitespace, ' ')",
  "(31137, Token.Text, 'no;')",
  "(31140, Token.Text.Whitespace, ' ')",
  "(31141, Token.Text, 'then')",
  "(31145, Token.Text.NewLine, '\\n')",
  "(31146, Token.Text.Whitespace, '      ')",
  "(31152, Token.Text, '$run')",
  "(31156, Token.Text.Whitespace, ' ')",
  "(31157, Token.Text, '$rm')",
  "(31160, Token.Text.Whitespace, ' ')",
  "(31161, Token.Literal.String.Double, '\"$lockfile\"')",
  "(31172, Token.Text.NewLine, '\\n')",
  "(31173, Token.Text.Whitespace, '    ')",
  "(31177, Token.Text, 'fi')",
  "(31179, Token.Text.NewLine, '\\n\\n')",
  "(31181, Token.Text.Whitespace, '    ')",
  "(31185, Token.Text, 'exit')",
  "(31189, Token.Text.Whitespace, ' ')",
  "(31190, Token.Text, '$EXIT_SUCCESS')",
  "(31203, Token.Text.NewLine, '\\n')",
  "(31204, Token.Text.Whitespace, '    ')",
  "(31208, Token.Text, ';;')",
  "(31210, Token.Text.NewLine, '\\n\\n')",
  "(31212, Token.Text.Whitespace, '  ')",
  "(31214, Token.Comment.Single, '# libtool link mode')",
  "(31233, Token.Text.NewLine, '\\n')",
  "(31234, Token.Text.Whitespace, '  ')",
  "(31236, Token.Text, 'link')",
  "(31240, Token.Text.Whitespace, ' ')",
  "(31241, Token.Text, '|')",
  "(31242, Token.Text.Whitespace, ' ')",
  "(31243, Token.Text, 'relink)')",
  "(31250, Token.Text.NewLine, '\\n')",
  "(31251, Token.Text.Whitespace, '    ')",
  "(31255, Token.Text, 'modename=\"$modename:')",
  "(31275, Token.Text.Whitespace, ' ')",
  "(31276, Token.Text, 'link\"')",
  "(31281, Token.Text.NewLine, '\\n')",
  "(31282, Token.Text.Whitespace, '    ')",
  "(31286, Token.Text, 'case')",
  "(31290, Token.Text.Whitespace, ' ')",
  "(31291, Token.Text, '$host')",
  "(31296, Token.Text.Whitespace, ' ')",
  "(31297, Token.Text, 'in')",
  "(31299, Token.Text.NewLine, '\\n')",
  "(31300, Token.Text.Whitespace, '    ')",
  "(31304, Token.Text, '*-*-cygwin*')",
  "(31315, Token.Text.Whitespace, ' ')",
  "(31316, Token.Text, '|')",
  "(31317, Token.Text.Whitespace, ' ')",
  "(31318, Token.Text, '*-*-mingw*')",
  "(31328, Token.Text.Whitespace, ' ')",
  "(31329, Token.Text, '|')",
  "(31330, Token.Text.Whitespace, ' ')",
  "(31331, Token.Text, '*-*-pw32*')",
  "(31340, Token.Text.Whitespace, ' ')",
  "(31341, Token.Text, '|')",
  "(31342, Token.Text.Whitespace, ' ')",
  "(31343, Token.Text, '*-*-os2*)')",
  "(31352, Token.Text.NewLine, '\\n')",
  "(31353, Token.Text.Whitespace, '      ')",
  "(31359, Token.Comment.Single, '# It is impossible to link a dll without this setting, and')",
  "(31417, Token.Text.NewLine, '\\n')",
  "(31418, Token.Text.Whitespace, '      ')",
  "(31424, Token.Comment.Single, \"# we shouldn't force the makefile maintainer to figure out\")",
  "(31482, Token.Text.NewLine, '\\n')",
  "(31483, Token.Text.Whitespace, '      ')",
  "(31489, Token.Comment.Single, '# which system we are compiling for in order to pass an extra')",
  "(31550, Token.Text.NewLine, '\\n')",
  "(31551, Token.Text.Whitespace, '      ')",
  "(31557, Token.Comment.Single, '# flag for every libtool invocation.')",
  "(31593, Token.Text.NewLine, '\\n')",
  "(31594, Token.Text.Whitespace, '      ')",
  "(31600, Token.Comment.Single, '# allow_undefined=no')",
  "(31620, Token.Text.NewLine, '\\n\\n')",
  "(31622, Token.Text.Whitespace, '      ')",
  "(31628, Token.Comment.Single, '# FIXME: Unfortunately, there are problems with the above when trying')",
  "(31697, Token.Text.NewLine, '\\n')",
  "(31698, Token.Text.Whitespace, '      ')",
  "(31704, Token.Comment.Single, '# to make a dll which has undefined symbols, in which case not')",
  "(31766, Token.Text.NewLine, '\\n')",
  "(31767, Token.Text.Whitespace, '      ')",
  "(31773, Token.Comment.Single, '# even a static library is built.  For now, we need to specify')",
  "(31835, Token.Text.NewLine, '\\n')",
  "(31836, Token.Text.Whitespace, '      ')",
  "(31842, Token.Comment.Single, '# -no-undefined on the libtool link line when we can be certain')",
  "(31905, Token.Text.NewLine, '\\n')",
  "(31906, Token.Text.Whitespace, '      ')",
  "(31912, Token.Comment.Single, '# that all symbols are satisfied, otherwise we get a static library.')",
  "(31980, Token.Text.NewLine, '\\n')",
  "(31981, Token.Text.Whitespace, '      ')",
  "(31987, Token.Text, 'allow_undefined=yes')",
  "(32006, Token.Text.NewLine, '\\n')",
  "(32007, Token.Text.Whitespace, '      ')",
  "(32013, Token.Text, ';;')",
  "(32015, Token.Text.NewLine, '\\n')",
  "(32016, Token.Text.Whitespace, '    ')",
  "(32020, Token.Text, '*)')",
  "(32022, Token.Text.NewLine, '\\n')",
  "(32023, Token.Text.Whitespace, '      ')",
  "(32029, Token.Text, 'allow_undefined=yes')",
  "(32048, Token.Text.NewLine, '\\n')",
  "(32049, Token.Text.Whitespace, '      ')",
  "(32055, Token.Text, ';;')",
  "(32057, Token.Text.NewLine, '\\n')",
  "(32058, Token.Text.Whitespace, '    ')",
  "(32062, Token.Text, 'esac')",
  "(32066, Token.Text.NewLine, '\\n')",
  "(32067, Token.Text.Whitespace, '    ')",
  "(32071, Token.Text, 'libtool_args=\"$nonopt\"')",
  "(32093, Token.Text.NewLine, '\\n')",
  "(32094, Token.Text.Whitespace, '    ')",
  "(32098, Token.Text, 'base_compile=\"$nonopt')",
  "(32119, Token.Text.Whitespace, ' ')",
  "(32120, Token.Text, '$@\"')",
  "(32123, Token.Text.NewLine, '\\n')",
  "(32124, Token.Text.Whitespace, '    ')",
  "(32128, Token.Text, 'compile_command=\"$nonopt\"')",
  "(32153, Token.Text.NewLine, '\\n')",
  "(32154, Token.Text.Whitespace, '    ')",
  "(32158, Token.Text, 'finalize_command=\"$nonopt\"')",
  "(32184, Token.Text.NewLine, '\\n\\n')",
  "(32186, Token.Text.Whitespace, '    ')",
  "(32190, Token.Text, 'compile_rpath=')",
  "(32204, Token.Text.NewLine, '\\n')",
  "(32205, Token.Text.Whitespace, '    ')",
  "(32209, Token.Text, 'finalize_rpath=')",
  "(32224, Token.Text.NewLine, '\\n')",
  "(32225, Token.Text.Whitespace, '    ')",
  "(32229, Token.Text, 'compile_shlibpath=')",
  "(32247, Token.Text.NewLine, '\\n')",
  "(32248, Token.Text.Whitespace, '    ')",
  "(32252, Token.Text, 'finalize_shlibpath=')",
  "(32271, Token.Text.NewLine, '\\n')",
  "(32272, Token.Text.Whitespace, '    ')",
  "(32276, Token.Text, 'convenience=')",
  "(32288, Token.Text.NewLine, '\\n')",
  "(32289, Token.Text.Whitespace, '    ')",
  "(32293, Token.Text, 'old_convenience=')",
  "(32309, Token.Text.NewLine, '\\n')",
  "(32310, Token.Text.Whitespace, '    ')",
  "(32314, Token.Text, 'deplibs=')",
  "(32322, Token.Text.NewLine, '\\n')",
  "(32323, Token.Text.Whitespace, '    ')",
  "(32327, Token.Text, 'old_deplibs=')",
  "(32339, Token.Text.NewLine, '\\n')",
  "(32340, Token.Text.Whitespace, '    ')",
  "(32344, Token.Text, 'compiler_flags=')",
  "(32359, Token.Text.NewLine, '\\n')",
  "(32360, Token.Text.Whitespace, '    ')",
  "(32364, Token.Text, 'linker_flags=')",
  "(32377, Token.Text.NewLine, '\\n')",
  "(32378, Token.Text.Whitespace, '    ')",
  "(32382, Token.Text, 'dllsearchpath=')",
  "(32396, Token.Text.NewLine, '\\n')",
  "(32397, Token.Text.Whitespace, '    ')",
  "(32401, Token.Text, 'lib_search_path=`pwd`')",
  "(32422, Token.Text.NewLine, '\\n')",
  "(32423, Token.Text.Whitespace, '    ')",
  "(32427, Token.Text, 'inst_prefix_dir=')",
  "(32443, Token.Text.NewLine, '\\n\\n')",
  "(32445, Token.Text.Whitespace, '    ')",
  "(32449, Token.Text, 'avoid_version=no')",
  "(32465, Token.Text.NewLine, '\\n')",
  "(32466, Token.Text.Whitespace, '    ')",
  "(32470, Token.Text, 'dlfiles=')",
  "(32478, Token.Text.NewLine, '\\n')",
  "(32479, Token.Text.Whitespace, '    ')",
  "(32483, Token.Text, 'dlprefiles=')",
  "(32494, Token.Text.NewLine, '\\n')",
  "(32495, Token.Text.Whitespace, '    ')",
  "(32499, Token.Text, 'dlself=no')",
  "(32508, Token.Text.NewLine, '\\n')",
  "(32509, Token.Text.Whitespace, '    ')",
  "(32513, Token.Text, 'export_dynamic=no')",
  "(32530, Token.Text.NewLine, '\\n')",
  "(32531, Token.Text.Whitespace, '    ')",
  "(32535, Token.Text, 'export_symbols=')",
  "(32550, Token.Text.NewLine, '\\n')",
  "(32551, Token.Text.Whitespace, '    ')",
  "(32555, Token.Text, 'export_symbols_regex=')",
  "(32576, Token.Text.NewLine, '\\n')",
  "(32577, Token.Text.Whitespace, '    ')",
  "(32581, Token.Text, 'generated=')",
  "(32591, Token.Text.NewLine, '\\n')",
  "(32592, Token.Text.Whitespace, '    ')",
  "(32596, Token.Text, 'libobjs=')",
  "(32604, Token.Text.NewLine, '\\n')",
  "(32605, Token.Text.Whitespace, '    ')",
  "(32609, Token.Text, 'ltlibs=')",
  "(32616, Token.Text.NewLine, '\\n')",
  "(32617, Token.Text.Whitespace, '    ')",
  "(32621, Token.Text, 'module=no')",
  "(32630, Token.Text.NewLine, '\\n')",
  "(32631, Token.Text.Whitespace, '    ')",
  "(32635, Token.Text, 'no_install=no')",
  "(32648, Token.Text.NewLine, '\\n')",
  "(32649, Token.Text.Whitespace, '    ')",
  "(32653, Token.Text, 'objs=')",
  "(32658, Token.Text.NewLine, '\\n')",
  "(32659, Token.Text.Whitespace, '    ')",
  "(32663, Token.Text, 'non_pic_objects=')",
  "(32679, Token.Text.NewLine, '\\n')",
  "(32680, Token.Text.Whitespace, '    ')",
  "(32684, Token.Text, 'notinst_path=')",
  "(32697, Token.Text.Whitespace, ' ')",
  "(32698, Token.Comment.Single, '# paths that contain not-installed libtool libraries')",
  "(32750, Token.Text.NewLine, '\\n')",
  "(32751, Token.Text.Whitespace, '    ')",
  "(32755, Token.Text, 'precious_files_regex=')",
  "(32776, Token.Text.NewLine, '\\n')",
  "(32777, Token.Text.Whitespace, '    ')",
  "(32781, Token.Text, 'prefer_static_libs=no')",
  "(32802, Token.Text.NewLine, '\\n')",
  "(32803, Token.Text.Whitespace, '    ')",
  "(32807, Token.Text, 'preload=no')",
  "(32817, Token.Text.NewLine, '\\n')",
  "(32818, Token.Text.Whitespace, '    ')",
  "(32822, Token.Text, 'prev=')",
  "(32827, Token.Text.NewLine, '\\n')",
  "(32828, Token.Text.Whitespace, '    ')",
  "(32832, Token.Text, 'prevarg=')",
  "(32840, Token.Text.NewLine, '\\n')",
  "(32841, Token.Text.Whitespace, '    ')",
  "(32845, Token.Text, 'release=')",
  "(32853, Token.Text.NewLine, '\\n')",
  "(32854, Token.Text.Whitespace, '    ')",
  "(32858, Token.Text, 'rpath=')",
  "(32864, Token.Text.NewLine, '\\n')",
  "(32865, Token.Text.Whitespace, '    ')",
  "(32869, Token.Text, 'xrpath=')",
  "(32876, Token.Text.NewLine, '\\n')",
  "(32877, Token.Text.Whitespace, '    ')",
  "(32881, Token.Text, 'perm_rpath=')",
  "(32892, Token.Text.NewLine, '\\n')",
  "(32893, Token.Text.Whitespace, '    ')",
  "(32897, Token.Text, 'temp_rpath=')",
  "(32908, Token.Text.NewLine, '\\n')",
  "(32909, Token.Text.Whitespace, '    ')",
  "(32913, Token.Text, 'thread_safe=no')",
  "(32927, Token.Text.NewLine, '\\n')",
  "(32928, Token.Text.Whitespace, '    ')",
  "(32932, Token.Text, 'vinfo=')",
  "(32938, Token.Text.NewLine, '\\n')",
  "(32939, Token.Text.Whitespace, '    ')",
  "(32943, Token.Text, 'vinfo_number=no')",
  "(32958, Token.Text.NewLine, '\\n\\n')",
  "(32960, Token.Text.Whitespace, '    ')",
  "(32964, Token.Text, 'func_infer_tag')",
  "(32978, Token.Text.Whitespace, ' ')",
  "(32979, Token.Text, '$base_compile')",
  "(32992, Token.Text.NewLine, '\\n\\n')",
  "(32994, Token.Text.Whitespace, '    ')",
  "(32998, Token.Comment.Single, '# We need to know -static, to get the right output filenames.')",
  "(33059, Token.Text.NewLine, '\\n')",
  "(33060, Token.Text.Whitespace, '    ')",
  "(33064, Token.Text, 'for')",
  "(33067, Token.Text.Whitespace, ' ')",
  "(33068, Token.Text, 'arg')",
  "(33071, Token.Text.NewLine, '\\n')",
  "(33072, Token.Text.Whitespace, '    ')",
  "(33076, Token.Text, 'do')",
  "(33078, Token.Text.NewLine, '\\n')",
  "(33079, Token.Text.Whitespace, '      ')",
  "(33085, Token.Text, 'case')",
  "(33089, Token.Text.Whitespace, ' ')",
  "(33090, Token.Text, '$arg')",
  "(33094, Token.Text.Whitespace, ' ')",
  "(33095, Token.Text, 'in')",
  "(33097, Token.Text.NewLine, '\\n')",
  "(33098, Token.Text.Whitespace, '      ')",
  "(33104, Token.Text, '-all-static')",
  "(33115, Token.Text.Whitespace, ' ')",
  "(33116, Token.Text, '|')",
  "(33117, Token.Text.Whitespace, ' ')",
  "(33118, Token.Text, '-static)')",
  "(33126, Token.Text.NewLine, '\\n')",
  "(33127, Token.Text.Whitespace, '\\t')",
  "(33128, Token.Text, 'if')",
  "(33130, Token.Text.Whitespace, ' ')",
  "(33131, Token.Text, 'test')",
  "(33135, Token.Text.Whitespace, ' ')",
  "(33136, Token.Literal.String.Double, '\"X$arg\"')",
  "(33143, Token.Text.Whitespace, ' ')",
  "(33144, Token.Text, '=')",
  "(33145, Token.Text.Whitespace, ' ')",
  "(33146, Token.Literal.String.Double, '\"X-all-static\"')",
  "(33160, Token.Text, ';')",
  "(33161, Token.Text.Whitespace, ' ')",
  "(33162, Token.Text, 'then')",
  "(33166, Token.Text.NewLine, '\\n')",
  "(33167, Token.Text.Whitespace, '\\t  ')",
  "(33170, Token.Text, 'if')",
  "(33172, Token.Text.Whitespace, ' ')",
  "(33173, Token.Text, 'test')",
  "(33177, Token.Text.Whitespace, ' ')",
  "(33178, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(33199, Token.Text.Whitespace, ' ')",
  "(33200, Token.Text, '=')",
  "(33201, Token.Text.Whitespace, ' ')",
  "(33202, Token.Text, 'yes')",
  "(33205, Token.Text.Whitespace, ' ')",
  "(33206, Token.Text, '&&')",
  "(33208, Token.Text.Whitespace, ' ')",
  "(33209, Token.Text, 'test')",
  "(33213, Token.Text.Whitespace, ' ')",
  "(33214, Token.Text, '-z')",
  "(33216, Token.Text.Whitespace, ' ')",
  "(33217, Token.Literal.String.Double, '\"$link_static_flag\"')",
  "(33236, Token.Text, ';')",
  "(33237, Token.Text.Whitespace, ' ')",
  "(33238, Token.Text, 'then')",
  "(33242, Token.Text.NewLine, '\\n')",
  "(33243, Token.Text.Whitespace, '\\t    ')",
  "(33248, Token.Text, '$echo')",
  "(33253, Token.Text.Whitespace, ' ')",
  "(33254, Token.Literal.String.Double, '\"$modename: warning: complete static linking is impossible in this configuration\"')",
  "(33335, Token.Text.Whitespace, ' ')",
  "(33336, Token.Text, '1>&2')",
  "(33340, Token.Text.NewLine, '\\n')",
  "(33341, Token.Text.Whitespace, '\\t  ')",
  "(33344, Token.Text, 'fi')",
  "(33346, Token.Text.NewLine, '\\n')",
  "(33347, Token.Text.Whitespace, '\\t  ')",
  "(33350, Token.Text, 'if')",
  "(33352, Token.Text.Whitespace, ' ')",
  "(33353, Token.Text, 'test')",
  "(33357, Token.Text.Whitespace, ' ')",
  "(33358, Token.Text, '-n')",
  "(33360, Token.Text.Whitespace, ' ')",
  "(33361, Token.Literal.String.Double, '\"$link_static_flag\"')",
  "(33380, Token.Text, ';')",
  "(33381, Token.Text.Whitespace, ' ')",
  "(33382, Token.Text, 'then')",
  "(33386, Token.Text.NewLine, '\\n')",
  "(33387, Token.Text.Whitespace, '\\t    ')",
  "(33392, Token.Text, 'dlopen_self=$dlopen_self_static')",
  "(33423, Token.Text.NewLine, '\\n')",
  "(33424, Token.Text.Whitespace, '\\t  ')",
  "(33427, Token.Text, 'fi')",
  "(33429, Token.Text.NewLine, '\\n')",
  "(33430, Token.Text.Whitespace, '\\t  ')",
  "(33433, Token.Text, 'prefer_static_libs=yes')",
  "(33455, Token.Text.NewLine, '\\n')",
  "(33456, Token.Text.Whitespace, '\\t')",
  "(33457, Token.Text, 'else')",
  "(33461, Token.Text.NewLine, '\\n')",
  "(33462, Token.Text.Whitespace, '\\t  ')",
  "(33465, Token.Text, 'if')",
  "(33467, Token.Text.Whitespace, ' ')",
  "(33468, Token.Text, 'test')",
  "(33472, Token.Text.Whitespace, ' ')",
  "(33473, Token.Text, '-z')",
  "(33475, Token.Text.Whitespace, ' ')",
  "(33476, Token.Literal.String.Double, '\"$pic_flag\"')",
  "(33487, Token.Text.Whitespace, ' ')",
  "(33488, Token.Text, '&&')",
  "(33490, Token.Text.Whitespace, ' ')",
  "(33491, Token.Text, 'test')",
  "(33495, Token.Text.Whitespace, ' ')",
  "(33496, Token.Text, '-n')",
  "(33498, Token.Text.Whitespace, ' ')",
  "(33499, Token.Literal.String.Double, '\"$link_static_flag\"')",
  "(33518, Token.Text, ';')",
  "(33519, Token.Text.Whitespace, ' ')",
  "(33520, Token.Text, 'then')",
  "(33524, Token.Text.NewLine, '\\n')",
  "(33525, Token.Text.Whitespace, '\\t    ')",
  "(33530, Token.Text, 'dlopen_self=$dlopen_self_static')",
  "(33561, Token.Text.NewLine, '\\n')",
  "(33562, Token.Text.Whitespace, '\\t  ')",
  "(33565, Token.Text, 'fi')",
  "(33567, Token.Text.NewLine, '\\n')",
  "(33568, Token.Text.Whitespace, '\\t  ')",
  "(33571, Token.Text, 'prefer_static_libs=built')",
  "(33595, Token.Text.NewLine, '\\n')",
  "(33596, Token.Text.Whitespace, '\\t')",
  "(33597, Token.Text, 'fi')",
  "(33599, Token.Text.NewLine, '\\n')",
  "(33600, Token.Text.Whitespace, '\\t')",
  "(33601, Token.Text, 'build_libtool_libs=no')",
  "(33622, Token.Text.NewLine, '\\n')",
  "(33623, Token.Text.Whitespace, '\\t')",
  "(33624, Token.Text, 'build_old_libs=yes')",
  "(33642, Token.Text.NewLine, '\\n')",
  "(33643, Token.Text.Whitespace, '\\t')",
  "(33644, Token.Text, 'break')",
  "(33649, Token.Text.NewLine, '\\n')",
  "(33650, Token.Text.Whitespace, '\\t')",
  "(33651, Token.Text, ';;')",
  "(33653, Token.Text.NewLine, '\\n')",
  "(33654, Token.Text.Whitespace, '      ')",
  "(33660, Token.Text, 'esac')",
  "(33664, Token.Text.NewLine, '\\n')",
  "(33665, Token.Text.Whitespace, '    ')",
  "(33669, Token.Text, 'done')",
  "(33673, Token.Text.NewLine, '\\n\\n')",
  "(33675, Token.Text.Whitespace, '    ')",
  "(33679, Token.Comment.Single, '# See if our shared archives depend on static archives.')",
  "(33734, Token.Text.NewLine, '\\n')",
  "(33735, Token.Text.Whitespace, '    ')",
  "(33739, Token.Text, 'test')",
  "(33743, Token.Text.Whitespace, ' ')",
  "(33744, Token.Text, '-n')",
  "(33746, Token.Text.Whitespace, ' ')",
  "(33747, Token.Literal.String.Double, '\"$old_archive_from_new_cmds\"')",
  "(33775, Token.Text.Whitespace, ' ')",
  "(33776, Token.Text, '&&')",
  "(33778, Token.Text.Whitespace, ' ')",
  "(33779, Token.Text, 'build_old_libs=yes')",
  "(33797, Token.Text.NewLine, '\\n\\n')",
  "(33799, Token.Text.Whitespace, '    ')",
  "(33803, Token.Comment.Single, '# Go through the arguments, transforming them on the way.')",
  "(33860, Token.Text.NewLine, '\\n')",
  "(33861, Token.Text.Whitespace, '    ')",
  "(33865, Token.Text, 'while')",
  "(33870, Token.Text.Whitespace, ' ')",
  "(33871, Token.Text, 'test')",
  "(33875, Token.Text.Whitespace, ' ')",
  "(33876, Token.Literal.String.Double, '\"$#\"')",
  "(33880, Token.Text.Whitespace, ' ')",
  "(33881, Token.Text, '-gt')",
  "(33884, Token.Text.Whitespace, ' ')",
  "(33885, Token.Text, '0;')",
  "(33887, Token.Text.Whitespace, ' ')",
  "(33888, Token.Text, 'do')",
  "(33890, Token.Text.NewLine, '\\n')",
  "(33891, Token.Text.Whitespace, '      ')",
  "(33897, Token.Text, 'arg=\"$1\"')",
  "(33905, Token.Text.NewLine, '\\n')",
  "(33906, Token.Text.Whitespace, '      ')",
  "(33912, Token.Text, 'shift')",
  "(33917, Token.Text.NewLine, '\\n')",
  "(33918, Token.Text.Whitespace, '      ')",
  "(33924, Token.Text, 'case')",
  "(33928, Token.Text.Whitespace, ' ')",
  "(33929, Token.Text, '$arg')",
  "(33933, Token.Text.Whitespace, ' ')",
  "(33934, Token.Text, 'in')",
  "(33936, Token.Text.NewLine, '\\n')",
  "(33937, Token.Text.Whitespace, '      ')",
  "(33943, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(33978, Token.Text.Whitespace, ' ')",
  "(33979, Token.Text, '\\\\')",
  "(33980, Token.Text.Whitespace, '\\t')",
  "(33981, Token.Text, ']*|*]*|\"\")')",
  "(33991, Token.Text.NewLine, '\\n')",
  "(33992, Token.Text.Whitespace, '\\t')",
  "(33993, Token.Text, 'qarg=\\\\\"`$echo')",
  "(34006, Token.Text.Whitespace, ' ')",
  "(34007, Token.Literal.String.Double, '\"X$arg\"')",
  "(34014, Token.Text.Whitespace, ' ')",
  "(34015, Token.Text, '|')",
  "(34016, Token.Text.Whitespace, ' ')",
  "(34017, Token.Text, '$Xsed')",
  "(34022, Token.Text.Whitespace, ' ')",
  "(34023, Token.Text, '-e')",
  "(34025, Token.Text.Whitespace, ' ')",
  "(34026, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(34044, Token.Text, '`\\\\\"')",
  "(34047, Token.Text.Whitespace, ' ')",
  "(34048, Token.Comment.Single, '### testsuite: skip nested quoting test')",
  "(34087, Token.Text.NewLine, '\\n')",
  "(34088, Token.Text.Whitespace, '\\t')",
  "(34089, Token.Text, ';;')",
  "(34091, Token.Text.NewLine, '\\n')",
  "(34092, Token.Text.Whitespace, '      ')",
  "(34098, Token.Text, '*)')",
  "(34100, Token.Text.Whitespace, ' ')",
  "(34101, Token.Text, 'qarg=$arg')",
  "(34110, Token.Text.Whitespace, ' ')",
  "(34111, Token.Text, ';;')",
  "(34113, Token.Text.NewLine, '\\n')",
  "(34114, Token.Text.Whitespace, '      ')",
  "(34120, Token.Text, 'esac')",
  "(34124, Token.Text.NewLine, '\\n')",
  "(34125, Token.Text.Whitespace, '      ')",
  "(34131, Token.Text, 'libtool_args=\"$libtool_args')",
  "(34158, Token.Text.Whitespace, ' ')",
  "(34159, Token.Text, '$qarg\"')",
  "(34165, Token.Text.NewLine, '\\n\\n')",
  "(34167, Token.Text.Whitespace, '      ')",
  "(34173, Token.Comment.Single, '# If the previous option needs an argument, assign it.')",
  "(34227, Token.Text.NewLine, '\\n')",
  "(34228, Token.Text.Whitespace, '      ')",
  "(34234, Token.Text, 'if')",
  "(34236, Token.Text.Whitespace, ' ')",
  "(34237, Token.Text, 'test')",
  "(34241, Token.Text.Whitespace, ' ')",
  "(34242, Token.Text, '-n')",
  "(34244, Token.Text.Whitespace, ' ')",
  "(34245, Token.Literal.String.Double, '\"$prev\"')",
  "(34252, Token.Text, ';')",
  "(34253, Token.Text.Whitespace, ' ')",
  "(34254, Token.Text, 'then')",
  "(34258, Token.Text.NewLine, '\\n')",
  "(34259, Token.Text.Whitespace, '\\t')",
  "(34260, Token.Text, 'case')",
  "(34264, Token.Text.Whitespace, ' ')",
  "(34265, Token.Text, '$prev')",
  "(34270, Token.Text.Whitespace, ' ')",
  "(34271, Token.Text, 'in')",
  "(34273, Token.Text.NewLine, '\\n')",
  "(34274, Token.Text.Whitespace, '\\t')",
  "(34275, Token.Text, 'output)')",
  "(34282, Token.Text.NewLine, '\\n')",
  "(34283, Token.Text.Whitespace, '\\t  ')",
  "(34286, Token.Text, 'compile_command=\"$compile_command')",
  "(34319, Token.Text.Whitespace, ' ')",
  "(34320, Token.Text, '@OUTPUT@\"')",
  "(34329, Token.Text.NewLine, '\\n')",
  "(34330, Token.Text.Whitespace, '\\t  ')",
  "(34333, Token.Text, 'finalize_command=\"$finalize_command')",
  "(34368, Token.Text.Whitespace, ' ')",
  "(34369, Token.Text, '@OUTPUT@\"')",
  "(34378, Token.Text.NewLine, '\\n')",
  "(34379, Token.Text.Whitespace, '\\t  ')",
  "(34382, Token.Text, ';;')",
  "(34384, Token.Text.NewLine, '\\n')",
  "(34385, Token.Text.Whitespace, '\\t')",
  "(34386, Token.Text, 'esac')",
  "(34390, Token.Text.NewLine, '\\n\\n')",
  "(34392, Token.Text.Whitespace, '\\t')",
  "(34393, Token.Text, 'case')",
  "(34397, Token.Text.Whitespace, ' ')",
  "(34398, Token.Text, '$prev')",
  "(34403, Token.Text.Whitespace, ' ')",
  "(34404, Token.Text, 'in')",
  "(34406, Token.Text.NewLine, '\\n')",
  "(34407, Token.Text.Whitespace, '\\t')",
  "(34408, Token.Text, 'dlfiles|dlprefiles)')",
  "(34427, Token.Text.NewLine, '\\n')",
  "(34428, Token.Text.Whitespace, '\\t  ')",
  "(34431, Token.Text, 'if')",
  "(34433, Token.Text.Whitespace, ' ')",
  "(34434, Token.Text, 'test')",
  "(34438, Token.Text.Whitespace, ' ')",
  "(34439, Token.Literal.String.Double, '\"$preload\"')",
  "(34449, Token.Text.Whitespace, ' ')",
  "(34450, Token.Text, '=')",
  "(34451, Token.Text.Whitespace, ' ')",
  "(34452, Token.Text, 'no;')",
  "(34455, Token.Text.Whitespace, ' ')",
  "(34456, Token.Text, 'then')",
  "(34460, Token.Text.NewLine, '\\n')",
  "(34461, Token.Text.Whitespace, '\\t    ')",
  "(34466, Token.Comment.Single, '# Add the symbol object into the linking commands.')",
  "(34516, Token.Text.NewLine, '\\n')",
  "(34517, Token.Text.Whitespace, '\\t    ')",
  "(34522, Token.Text, 'compile_command=\"$compile_command')",
  "(34555, Token.Text.Whitespace, ' ')",
  "(34556, Token.Text, '@SYMFILE@\"')",
  "(34566, Token.Text.NewLine, '\\n')",
  "(34567, Token.Text.Whitespace, '\\t    ')",
  "(34572, Token.Text, 'finalize_command=\"$finalize_command')",
  "(34607, Token.Text.Whitespace, ' ')",
  "(34608, Token.Text, '@SYMFILE@\"')",
  "(34618, Token.Text.NewLine, '\\n')",
  "(34619, Token.Text.Whitespace, '\\t    ')",
  "(34624, Token.Text, 'preload=yes')",
  "(34635, Token.Text.NewLine, '\\n')",
  "(34636, Token.Text.Whitespace, '\\t  ')",
  "(34639, Token.Text, 'fi')",
  "(34641, Token.Text.NewLine, '\\n')",
  "(34642, Token.Text.Whitespace, '\\t  ')",
  "(34645, Token.Text, 'case')",
  "(34649, Token.Text.Whitespace, ' ')",
  "(34650, Token.Text, '$arg')",
  "(34654, Token.Text.Whitespace, ' ')",
  "(34655, Token.Text, 'in')",
  "(34657, Token.Text.NewLine, '\\n')",
  "(34658, Token.Text.Whitespace, '\\t  ')",
  "(34661, Token.Text, '*.la')",
  "(34665, Token.Text.Whitespace, ' ')",
  "(34666, Token.Text, '|')",
  "(34667, Token.Text.Whitespace, ' ')",
  "(34668, Token.Text, '*.lo)')",
  "(34673, Token.Text.Whitespace, ' ')",
  "(34674, Token.Text, ';;')",
  "(34676, Token.Text.Whitespace, '  ')",
  "(34678, Token.Comment.Single, '# We handle these cases below.')",
  "(34708, Token.Text.NewLine, '\\n')",
  "(34709, Token.Text.Whitespace, '\\t  ')",
  "(34712, Token.Text, 'force)')",
  "(34718, Token.Text.NewLine, '\\n')",
  "(34719, Token.Text.Whitespace, '\\t    ')",
  "(34724, Token.Text, 'if')",
  "(34726, Token.Text.Whitespace, ' ')",
  "(34727, Token.Text, 'test')",
  "(34731, Token.Text.Whitespace, ' ')",
  "(34732, Token.Literal.String.Double, '\"$dlself\"')",
  "(34741, Token.Text.Whitespace, ' ')",
  "(34742, Token.Text, '=')",
  "(34743, Token.Text.Whitespace, ' ')",
  "(34744, Token.Text, 'no;')",
  "(34747, Token.Text.Whitespace, ' ')",
  "(34748, Token.Text, 'then')",
  "(34752, Token.Text.NewLine, '\\n')",
  "(34753, Token.Text.Whitespace, '\\t      ')",
  "(34760, Token.Text, 'dlself=needless')",
  "(34775, Token.Text.NewLine, '\\n')",
  "(34776, Token.Text.Whitespace, '\\t      ')",
  "(34783, Token.Text, 'export_dynamic=yes')",
  "(34801, Token.Text.NewLine, '\\n')",
  "(34802, Token.Text.Whitespace, '\\t    ')",
  "(34807, Token.Text, 'fi')",
  "(34809, Token.Text.NewLine, '\\n')",
  "(34810, Token.Text.Whitespace, '\\t    ')",
  "(34815, Token.Text, 'prev=')",
  "(34820, Token.Text.NewLine, '\\n')",
  "(34821, Token.Text.Whitespace, '\\t    ')",
  "(34826, Token.Text, 'continue')",
  "(34834, Token.Text.NewLine, '\\n')",
  "(34835, Token.Text.Whitespace, '\\t    ')",
  "(34840, Token.Text, ';;')",
  "(34842, Token.Text.NewLine, '\\n')",
  "(34843, Token.Text.Whitespace, '\\t  ')",
  "(34846, Token.Text, 'self)')",
  "(34851, Token.Text.NewLine, '\\n')",
  "(34852, Token.Text.Whitespace, '\\t    ')",
  "(34857, Token.Text, 'if')",
  "(34859, Token.Text.Whitespace, ' ')",
  "(34860, Token.Text, 'test')",
  "(34864, Token.Text.Whitespace, ' ')",
  "(34865, Token.Literal.String.Double, '\"$prev\"')",
  "(34872, Token.Text.Whitespace, ' ')",
  "(34873, Token.Text, '=')",
  "(34874, Token.Text.Whitespace, ' ')",
  "(34875, Token.Text, 'dlprefiles;')",
  "(34886, Token.Text.Whitespace, ' ')",
  "(34887, Token.Text, 'then')",
  "(34891, Token.Text.NewLine, '\\n')",
  "(34892, Token.Text.Whitespace, '\\t      ')",
  "(34899, Token.Text, 'dlself=yes')",
  "(34909, Token.Text.NewLine, '\\n')",
  "(34910, Token.Text.Whitespace, '\\t    ')",
  "(34915, Token.Text, 'elif')",
  "(34919, Token.Text.Whitespace, ' ')",
  "(34920, Token.Text, 'test')",
  "(34924, Token.Text.Whitespace, ' ')",
  "(34925, Token.Literal.String.Double, '\"$prev\"')",
  "(34932, Token.Text.Whitespace, ' ')",
  "(34933, Token.Text, '=')",
  "(34934, Token.Text.Whitespace, ' ')",
  "(34935, Token.Text, 'dlfiles')",
  "(34942, Token.Text.Whitespace, ' ')",
  "(34943, Token.Text, '&&')",
  "(34945, Token.Text.Whitespace, ' ')",
  "(34946, Token.Text, 'test')",
  "(34950, Token.Text.Whitespace, ' ')",
  "(34951, Token.Literal.String.Double, '\"$dlopen_self\"')",
  "(34965, Token.Text.Whitespace, ' ')",
  "(34966, Token.Text, '!=')",
  "(34968, Token.Text.Whitespace, ' ')",
  "(34969, Token.Text, 'yes;')",
  "(34973, Token.Text.Whitespace, ' ')",
  "(34974, Token.Text, 'then')",
  "(34978, Token.Text.NewLine, '\\n')",
  "(34979, Token.Text.Whitespace, '\\t      ')",
  "(34986, Token.Text, 'dlself=yes')",
  "(34996, Token.Text.NewLine, '\\n')",
  "(34997, Token.Text.Whitespace, '\\t    ')",
  "(35002, Token.Text, 'else')",
  "(35006, Token.Text.NewLine, '\\n')",
  "(35007, Token.Text.Whitespace, '\\t      ')",
  "(35014, Token.Text, 'dlself=needless')",
  "(35029, Token.Text.NewLine, '\\n')",
  "(35030, Token.Text.Whitespace, '\\t      ')",
  "(35037, Token.Text, 'export_dynamic=yes')",
  "(35055, Token.Text.NewLine, '\\n')",
  "(35056, Token.Text.Whitespace, '\\t    ')",
  "(35061, Token.Text, 'fi')",
  "(35063, Token.Text.NewLine, '\\n')",
  "(35064, Token.Text.Whitespace, '\\t    ')",
  "(35069, Token.Text, 'prev=')",
  "(35074, Token.Text.NewLine, '\\n')",
  "(35075, Token.Text.Whitespace, '\\t    ')",
  "(35080, Token.Text, 'continue')",
  "(35088, Token.Text.NewLine, '\\n')",
  "(35089, Token.Text.Whitespace, '\\t    ')",
  "(35094, Token.Text, ';;')",
  "(35096, Token.Text.NewLine, '\\n')",
  "(35097, Token.Text.Whitespace, '\\t  ')",
  "(35100, Token.Text, '*)')",
  "(35102, Token.Text.NewLine, '\\n')",
  "(35103, Token.Text.Whitespace, '\\t    ')",
  "(35108, Token.Text, 'if')",
  "(35110, Token.Text.Whitespace, ' ')",
  "(35111, Token.Text, 'test')",
  "(35115, Token.Text.Whitespace, ' ')",
  "(35116, Token.Literal.String.Double, '\"$prev\"')",
  "(35123, Token.Text.Whitespace, ' ')",
  "(35124, Token.Text, '=')",
  "(35125, Token.Text.Whitespace, ' ')",
  "(35126, Token.Text, 'dlfiles;')",
  "(35134, Token.Text.Whitespace, ' ')",
  "(35135, Token.Text, 'then')",
  "(35139, Token.Text.NewLine, '\\n')",
  "(35140, Token.Text.Whitespace, '\\t      ')",
  "(35147, Token.Text, 'dlfiles=\"$dlfiles')",
  "(35164, Token.Text.Whitespace, ' ')",
  "(35165, Token.Text, '$arg\"')",
  "(35170, Token.Text.NewLine, '\\n')",
  "(35171, Token.Text.Whitespace, '\\t    ')",
  "(35176, Token.Text, 'else')",
  "(35180, Token.Text.NewLine, '\\n')",
  "(35181, Token.Text.Whitespace, '\\t      ')",
  "(35188, Token.Text, 'dlprefiles=\"$dlprefiles')",
  "(35211, Token.Text.Whitespace, ' ')",
  "(35212, Token.Text, '$arg\"')",
  "(35217, Token.Text.NewLine, '\\n')",
  "(35218, Token.Text.Whitespace, '\\t    ')",
  "(35223, Token.Text, 'fi')",
  "(35225, Token.Text.NewLine, '\\n')",
  "(35226, Token.Text.Whitespace, '\\t    ')",
  "(35231, Token.Text, 'prev=')",
  "(35236, Token.Text.NewLine, '\\n')",
  "(35237, Token.Text.Whitespace, '\\t    ')",
  "(35242, Token.Text, 'continue')",
  "(35250, Token.Text.NewLine, '\\n')",
  "(35251, Token.Text.Whitespace, '\\t    ')",
  "(35256, Token.Text, ';;')",
  "(35258, Token.Text.NewLine, '\\n')",
  "(35259, Token.Text.Whitespace, '\\t  ')",
  "(35262, Token.Text, 'esac')",
  "(35266, Token.Text.NewLine, '\\n')",
  "(35267, Token.Text.Whitespace, '\\t  ')",
  "(35270, Token.Text, ';;')",
  "(35272, Token.Text.NewLine, '\\n')",
  "(35273, Token.Text.Whitespace, '\\t')",
  "(35274, Token.Text, 'expsyms)')",
  "(35282, Token.Text.NewLine, '\\n')",
  "(35283, Token.Text.Whitespace, '\\t  ')",
  "(35286, Token.Text, 'export_symbols=\"$arg\"')",
  "(35307, Token.Text.NewLine, '\\n')",
  "(35308, Token.Text.Whitespace, '\\t  ')",
  "(35311, Token.Text, 'if')",
  "(35313, Token.Text.Whitespace, ' ')",
  "(35314, Token.Text, 'test')",
  "(35318, Token.Text.Whitespace, ' ')",
  "(35319, Token.Text, '!')",
  "(35320, Token.Text.Whitespace, ' ')",
  "(35321, Token.Text, '-f')",
  "(35323, Token.Text.Whitespace, ' ')",
  "(35324, Token.Literal.String.Double, '\"$arg\"')",
  "(35330, Token.Text, ';')",
  "(35331, Token.Text.Whitespace, ' ')",
  "(35332, Token.Text, 'then')",
  "(35336, Token.Text.NewLine, '\\n')",
  "(35337, Token.Text.Whitespace, '\\t    ')",
  "(35342, Token.Text, '$echo')",
  "(35347, Token.Text.Whitespace, ' ')",
  "(35348, Token.Literal.String.Double, '\"$modename: symbol file \\\\`$arg\\' does not exist\"')",
  "(35395, Token.Text.NewLine, '\\n')",
  "(35396, Token.Text.Whitespace, '\\t    ')",
  "(35401, Token.Text, 'exit')",
  "(35405, Token.Text.Whitespace, ' ')",
  "(35406, Token.Text, '$EXIT_FAILURE')",
  "(35419, Token.Text.NewLine, '\\n')",
  "(35420, Token.Text.Whitespace, '\\t  ')",
  "(35423, Token.Text, 'fi')",
  "(35425, Token.Text.NewLine, '\\n')",
  "(35426, Token.Text.Whitespace, '\\t  ')",
  "(35429, Token.Text, 'prev=')",
  "(35434, Token.Text.NewLine, '\\n')",
  "(35435, Token.Text.Whitespace, '\\t  ')",
  "(35438, Token.Text, 'continue')",
  "(35446, Token.Text.NewLine, '\\n')",
  "(35447, Token.Text.Whitespace, '\\t  ')",
  "(35450, Token.Text, ';;')",
  "(35452, Token.Text.NewLine, '\\n')",
  "(35453, Token.Text.Whitespace, '\\t')",
  "(35454, Token.Text, 'expsyms_regex)')",
  "(35468, Token.Text.NewLine, '\\n')",
  "(35469, Token.Text.Whitespace, '\\t  ')",
  "(35472, Token.Text, 'export_symbols_regex=\"$arg\"')",
  "(35499, Token.Text.NewLine, '\\n')",
  "(35500, Token.Text.Whitespace, '\\t  ')",
  "(35503, Token.Text, 'prev=')",
  "(35508, Token.Text.NewLine, '\\n')",
  "(35509, Token.Text.Whitespace, '\\t  ')",
  "(35512, Token.Text, 'continue')",
  "(35520, Token.Text.NewLine, '\\n')",
  "(35521, Token.Text.Whitespace, '\\t  ')",
  "(35524, Token.Text, ';;')",
  "(35526, Token.Text.NewLine, '\\n')",
  "(35527, Token.Text.Whitespace, '\\t')",
  "(35528, Token.Text, 'inst_prefix)')",
  "(35540, Token.Text.NewLine, '\\n')",
  "(35541, Token.Text.Whitespace, '\\t  ')",
  "(35544, Token.Text, 'inst_prefix_dir=\"$arg\"')",
  "(35566, Token.Text.NewLine, '\\n')",
  "(35567, Token.Text.Whitespace, '\\t  ')",
  "(35570, Token.Text, 'prev=')",
  "(35575, Token.Text.NewLine, '\\n')",
  "(35576, Token.Text.Whitespace, '\\t  ')",
  "(35579, Token.Text, 'continue')",
  "(35587, Token.Text.NewLine, '\\n')",
  "(35588, Token.Text.Whitespace, '\\t  ')",
  "(35591, Token.Text, ';;')",
  "(35593, Token.Text.NewLine, '\\n')",
  "(35594, Token.Text.Whitespace, '\\t')",
  "(35595, Token.Text, 'precious_regex)')",
  "(35610, Token.Text.NewLine, '\\n')",
  "(35611, Token.Text.Whitespace, '\\t  ')",
  "(35614, Token.Text, 'precious_files_regex=\"$arg\"')",
  "(35641, Token.Text.NewLine, '\\n')",
  "(35642, Token.Text.Whitespace, '\\t  ')",
  "(35645, Token.Text, 'prev=')",
  "(35650, Token.Text.NewLine, '\\n')",
  "(35651, Token.Text.Whitespace, '\\t  ')",
  "(35654, Token.Text, 'continue')",
  "(35662, Token.Text.NewLine, '\\n')",
  "(35663, Token.Text.Whitespace, '\\t  ')",
  "(35666, Token.Text, ';;')",
  "(35668, Token.Text.NewLine, '\\n')",
  "(35669, Token.Text.Whitespace, '\\t')",
  "(35670, Token.Text, 'release)')",
  "(35678, Token.Text.NewLine, '\\n')",
  "(35679, Token.Text.Whitespace, '\\t  ')",
  "(35682, Token.Text, 'release=\"-$arg\"')",
  "(35697, Token.Text.NewLine, '\\n')",
  "(35698, Token.Text.Whitespace, '\\t  ')",
  "(35701, Token.Text, 'prev=')",
  "(35706, Token.Text.NewLine, '\\n')",
  "(35707, Token.Text.Whitespace, '\\t  ')",
  "(35710, Token.Text, 'continue')",
  "(35718, Token.Text.NewLine, '\\n')",
  "(35719, Token.Text.Whitespace, '\\t  ')",
  "(35722, Token.Text, ';;')",
  "(35724, Token.Text.NewLine, '\\n')",
  "(35725, Token.Text.Whitespace, '\\t')",
  "(35726, Token.Text, 'objectlist)')",
  "(35737, Token.Text.NewLine, '\\n')",
  "(35738, Token.Text.Whitespace, '\\t  ')",
  "(35741, Token.Text, 'if')",
  "(35743, Token.Text.Whitespace, ' ')",
  "(35744, Token.Text, 'test')",
  "(35748, Token.Text.Whitespace, ' ')",
  "(35749, Token.Text, '-f')",
  "(35751, Token.Text.Whitespace, ' ')",
  "(35752, Token.Literal.String.Double, '\"$arg\"')",
  "(35758, Token.Text, ';')",
  "(35759, Token.Text.Whitespace, ' ')",
  "(35760, Token.Text, 'then')",
  "(35764, Token.Text.NewLine, '\\n')",
  "(35765, Token.Text.Whitespace, '\\t    ')",
  "(35770, Token.Text, 'save_arg=$arg')",
  "(35783, Token.Text.NewLine, '\\n')",
  "(35784, Token.Text.Whitespace, '\\t    ')",
  "(35789, Token.Text, 'moreargs=')",
  "(35798, Token.Text.NewLine, '\\n')",
  "(35799, Token.Text.Whitespace, '\\t    ')",
  "(35804, Token.Text, 'for')",
  "(35807, Token.Text.Whitespace, ' ')",
  "(35808, Token.Text, 'fil')",
  "(35811, Token.Text.Whitespace, ' ')",
  "(35812, Token.Text, 'in')",
  "(35814, Token.Text.Whitespace, ' ')",
  "(35815, Token.Text, '`cat')",
  "(35819, Token.Text.Whitespace, ' ')",
  "(35820, Token.Text, '$save_arg`')",
  "(35830, Token.Text.NewLine, '\\n')",
  "(35831, Token.Text.Whitespace, '\\t    ')",
  "(35836, Token.Text, 'do')",
  "(35838, Token.Text.NewLine, '\\n')",
  "(35839, Token.Comment.Single, '#\\t      moreargs=\"$moreargs $fil\"')",
  "(35872, Token.Text.NewLine, '\\n')",
  "(35873, Token.Text.Whitespace, '\\t      ')",
  "(35880, Token.Text, 'arg=$fil')",
  "(35888, Token.Text.NewLine, '\\n')",
  "(35889, Token.Text.Whitespace, '\\t      ')",
  "(35896, Token.Comment.Single, '# A libtool-controlled object.')",
  "(35926, Token.Text.NewLine, '\\n\\n')",
  "(35928, Token.Text.Whitespace, '\\t      ')",
  "(35935, Token.Comment.Single, '# Check to see that this really is a libtool object.')",
  "(35987, Token.Text.NewLine, '\\n')",
  "(35988, Token.Text.Whitespace, '\\t      ')",
  "(35995, Token.Text, 'if')",
  "(35997, Token.Text.Whitespace, ' ')",
  "(35998, Token.Text, '(${SED}')",
  "(36005, Token.Text.Whitespace, ' ')",
  "(36006, Token.Text, '-e')",
  "(36008, Token.Text.Whitespace, ' ')",
  "(36009, Token.Literal.String.Single, \"'2q'\")",
  "(36013, Token.Text.Whitespace, ' ')",
  "(36014, Token.Text, '$arg')",
  "(36018, Token.Text.Whitespace, ' ')",
  "(36019, Token.Text, '|')",
  "(36020, Token.Text.Whitespace, ' ')",
  "(36021, Token.Text, 'grep')",
  "(36025, Token.Text.Whitespace, ' ')",
  "(36026, Token.Literal.String.Double, '\"^# Generated by .*$PACKAGE\"')",
  "(36054, Token.Text, ')')",
  "(36055, Token.Text.Whitespace, ' ')",
  "(36056, Token.Text, '>/dev/null')",
  "(36066, Token.Text.Whitespace, ' ')",
  "(36067, Token.Text, '2>&1;')",
  "(36072, Token.Text.Whitespace, ' ')",
  "(36073, Token.Text, 'then')",
  "(36077, Token.Text.NewLine, '\\n')",
  "(36078, Token.Text.Whitespace, '\\t\\t')",
  "(36080, Token.Text, 'pic_object=')",
  "(36091, Token.Text.NewLine, '\\n')",
  "(36092, Token.Text.Whitespace, '\\t\\t')",
  "(36094, Token.Text, 'non_pic_object=')",
  "(36109, Token.Text.NewLine, '\\n\\n')",
  "(36111, Token.Text.Whitespace, '\\t\\t')",
  "(36113, Token.Comment.Single, '# Read the .lo file')",
  "(36132, Token.Text.NewLine, '\\n')",
  "(36133, Token.Text.Whitespace, '\\t\\t')",
  "(36135, Token.Comment.Single, '# If there is no directory component, then add one.')",
  "(36186, Token.Text.NewLine, '\\n')",
  "(36187, Token.Text.Whitespace, '\\t\\t')",
  "(36189, Token.Text, 'case')",
  "(36193, Token.Text.Whitespace, ' ')",
  "(36194, Token.Text, '$arg')",
  "(36198, Token.Text.Whitespace, ' ')",
  "(36199, Token.Text, 'in')",
  "(36201, Token.Text.NewLine, '\\n')",
  "(36202, Token.Text.Whitespace, '\\t\\t')",
  "(36204, Token.Text, '*/*')",
  "(36207, Token.Text.Whitespace, ' ')",
  "(36208, Token.Text, '|')",
  "(36209, Token.Text.Whitespace, ' ')",
  "(36210, Token.Text, '*\\\\\\\\*)')",
  "(36215, Token.Text.Whitespace, ' ')",
  "(36216, Token.Text, '.')",
  "(36217, Token.Text.Whitespace, ' ')",
  "(36218, Token.Text, '$arg')",
  "(36222, Token.Text.Whitespace, ' ')",
  "(36223, Token.Text, ';;')",
  "(36225, Token.Text.NewLine, '\\n')",
  "(36226, Token.Text.Whitespace, '\\t\\t')",
  "(36228, Token.Text, '*)')",
  "(36230, Token.Text.Whitespace, ' ')",
  "(36231, Token.Text, '.')",
  "(36232, Token.Text.Whitespace, ' ')",
  "(36233, Token.Text, './$arg')",
  "(36239, Token.Text.Whitespace, ' ')",
  "(36240, Token.Text, ';;')",
  "(36242, Token.Text.NewLine, '\\n')",
  "(36243, Token.Text.Whitespace, '\\t\\t')",
  "(36245, Token.Text, 'esac')",
  "(36249, Token.Text.NewLine, '\\n\\n')",
  "(36251, Token.Text.Whitespace, '\\t\\t')",
  "(36253, Token.Text, 'if')",
  "(36255, Token.Text.Whitespace, ' ')",
  "(36256, Token.Text, 'test')",
  "(36260, Token.Text.Whitespace, ' ')",
  "(36261, Token.Text, '-z')",
  "(36263, Token.Text.Whitespace, ' ')",
  "(36264, Token.Literal.String.Double, '\"$pic_object\"')",
  "(36277, Token.Text.Whitespace, ' ')",
  "(36278, Token.Text, '||')",
  "(36280, Token.Text.Whitespace, ' ')",
  "(36281, Token.Text, '\\\\')",
  "(36282, Token.Text.NewLine, '\\n')",
  "(36283, Token.Text.Whitespace, '\\t\\t   ')",
  "(36288, Token.Text, 'test')",
  "(36292, Token.Text.Whitespace, ' ')",
  "(36293, Token.Text, '-z')",
  "(36295, Token.Text.Whitespace, ' ')",
  "(36296, Token.Literal.String.Double, '\"$non_pic_object\"')",
  "(36313, Token.Text.Whitespace, ' ')",
  "(36314, Token.Text, '||')",
  "(36316, Token.Text.NewLine, '\\n')",
  "(36317, Token.Text.Whitespace, '\\t\\t   ')",
  "(36322, Token.Text, 'test')",
  "(36326, Token.Text.Whitespace, ' ')",
  "(36327, Token.Literal.String.Double, '\"$pic_object\"')",
  "(36340, Token.Text.Whitespace, ' ')",
  "(36341, Token.Text, '=')",
  "(36342, Token.Text.Whitespace, ' ')",
  "(36343, Token.Text, 'none')",
  "(36347, Token.Text.Whitespace, ' ')",
  "(36348, Token.Text, '&&')",
  "(36350, Token.Text.Whitespace, ' ')",
  "(36351, Token.Text, '\\\\')",
  "(36352, Token.Text.NewLine, '\\n')",
  "(36353, Token.Text.Whitespace, '\\t\\t   ')",
  "(36358, Token.Text, 'test')",
  "(36362, Token.Text.Whitespace, ' ')",
  "(36363, Token.Literal.String.Double, '\"$non_pic_object\"')",
  "(36380, Token.Text.Whitespace, ' ')",
  "(36381, Token.Text, '=')",
  "(36382, Token.Text.Whitespace, ' ')",
  "(36383, Token.Text, 'none;')",
  "(36388, Token.Text.Whitespace, ' ')",
  "(36389, Token.Text, 'then')",
  "(36393, Token.Text.NewLine, '\\n')",
  "(36394, Token.Text.Whitespace, '\\t\\t  ')",
  "(36398, Token.Text, '$echo')",
  "(36403, Token.Text.Whitespace, ' ')",
  "(36404, Token.Literal.String.Double, '\"$modename: cannot find name of object for \\\\`$arg\\'\"')",
  "(36455, Token.Text.Whitespace, ' ')",
  "(36456, Token.Text, '1>&2')",
  "(36460, Token.Text.NewLine, '\\n')",
  "(36461, Token.Text.Whitespace, '\\t\\t  ')",
  "(36465, Token.Text, 'exit')",
  "(36469, Token.Text.Whitespace, ' ')",
  "(36470, Token.Text, '$EXIT_FAILURE')",
  "(36483, Token.Text.NewLine, '\\n')",
  "(36484, Token.Text.Whitespace, '\\t\\t')",
  "(36486, Token.Text, 'fi')",
  "(36488, Token.Text.NewLine, '\\n\\n')",
  "(36490, Token.Text.Whitespace, '\\t\\t')",
  "(36492, Token.Comment.Single, '# Extract subdirectory from the argument.')",
  "(36533, Token.Text.NewLine, '\\n')",
  "(36534, Token.Text.Whitespace, '\\t\\t')",
  "(36536, Token.Text, 'xdir=`$echo')",
  "(36547, Token.Text.Whitespace, ' ')",
  "(36548, Token.Literal.String.Double, '\"X$arg\"')",
  "(36555, Token.Text.Whitespace, ' ')",
  "(36556, Token.Text, '|')",
  "(36557, Token.Text.Whitespace, ' ')",
  "(36558, Token.Text, '$Xsed')",
  "(36563, Token.Text.Whitespace, ' ')",
  "(36564, Token.Text, '-e')",
  "(36566, Token.Text.Whitespace, ' ')",
  "(36567, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(36580, Token.Text, '`')",
  "(36581, Token.Text.NewLine, '\\n')",
  "(36582, Token.Text.Whitespace, '\\t\\t')",
  "(36584, Token.Text, 'if')",
  "(36586, Token.Text.Whitespace, ' ')",
  "(36587, Token.Text, 'test')",
  "(36591, Token.Text.Whitespace, ' ')",
  "(36592, Token.Literal.String.Double, '\"X$xdir\"')",
  "(36600, Token.Text.Whitespace, ' ')",
  "(36601, Token.Text, '=')",
  "(36602, Token.Text.Whitespace, ' ')",
  "(36603, Token.Literal.String.Double, '\"X$arg\"')",
  "(36610, Token.Text, ';')",
  "(36611, Token.Text.Whitespace, ' ')",
  "(36612, Token.Text, 'then')",
  "(36616, Token.Text.NewLine, '\\n')",
  "(36617, Token.Text.Whitespace, '\\t\\t  ')",
  "(36621, Token.Text, 'xdir=')",
  "(36626, Token.Text.NewLine, '\\n')",
  "(36627, Token.Text.Whitespace, '\\t\\t')",
  "(36629, Token.Text, 'else')",
  "(36633, Token.Text.NewLine, '\\n')",
  "(36634, Token.Text.Whitespace, '\\t\\t  ')",
  "(36638, Token.Text, 'xdir=\"$xdir/\"')",
  "(36651, Token.Text.NewLine, '\\n')",
  "(36652, Token.Text.Whitespace, '\\t\\t')",
  "(36654, Token.Text, 'fi')",
  "(36656, Token.Text.NewLine, '\\n\\n')",
  "(36658, Token.Text.Whitespace, '\\t\\t')",
  "(36660, Token.Text, 'if')",
  "(36662, Token.Text.Whitespace, ' ')",
  "(36663, Token.Text, 'test')",
  "(36667, Token.Text.Whitespace, ' ')",
  "(36668, Token.Literal.String.Double, '\"$pic_object\"')",
  "(36681, Token.Text.Whitespace, ' ')",
  "(36682, Token.Text, '!=')",
  "(36684, Token.Text.Whitespace, ' ')",
  "(36685, Token.Text, 'none;')",
  "(36690, Token.Text.Whitespace, ' ')",
  "(36691, Token.Text, 'then')",
  "(36695, Token.Text.NewLine, '\\n')",
  "(36696, Token.Text.Whitespace, '\\t\\t  ')",
  "(36700, Token.Comment.Single, '# Prepend the subdirectory the object is found in.')",
  "(36750, Token.Text.NewLine, '\\n')",
  "(36751, Token.Text.Whitespace, '\\t\\t  ')",
  "(36755, Token.Text, 'pic_object=\"$xdir$pic_object\"')",
  "(36784, Token.Text.NewLine, '\\n\\n')",
  "(36786, Token.Text.Whitespace, '\\t\\t  ')",
  "(36790, Token.Text, 'if')",
  "(36792, Token.Text.Whitespace, ' ')",
  "(36793, Token.Text, 'test')",
  "(36797, Token.Text.Whitespace, ' ')",
  "(36798, Token.Literal.String.Double, '\"$prev\"')",
  "(36805, Token.Text.Whitespace, ' ')",
  "(36806, Token.Text, '=')",
  "(36807, Token.Text.Whitespace, ' ')",
  "(36808, Token.Text, 'dlfiles;')",
  "(36816, Token.Text.Whitespace, ' ')",
  "(36817, Token.Text, 'then')",
  "(36821, Token.Text.NewLine, '\\n')",
  "(36822, Token.Text.Whitespace, '\\t\\t    ')",
  "(36828, Token.Text, 'if')",
  "(36830, Token.Text.Whitespace, ' ')",
  "(36831, Token.Text, 'test')",
  "(36835, Token.Text.Whitespace, ' ')",
  "(36836, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(36857, Token.Text.Whitespace, ' ')",
  "(36858, Token.Text, '=')",
  "(36859, Token.Text.Whitespace, ' ')",
  "(36860, Token.Text, 'yes')",
  "(36863, Token.Text.Whitespace, ' ')",
  "(36864, Token.Text, '&&')",
  "(36866, Token.Text.Whitespace, ' ')",
  "(36867, Token.Text, 'test')",
  "(36871, Token.Text.Whitespace, ' ')",
  "(36872, Token.Literal.String.Double, '\"$dlopen_support\"')",
  "(36889, Token.Text.Whitespace, ' ')",
  "(36890, Token.Text, '=')",
  "(36891, Token.Text.Whitespace, ' ')",
  "(36892, Token.Text, 'yes;')",
  "(36896, Token.Text.Whitespace, ' ')",
  "(36897, Token.Text, 'then')",
  "(36901, Token.Text.NewLine, '\\n')",
  "(36902, Token.Text.Whitespace, '\\t\\t      ')",
  "(36910, Token.Text, 'dlfiles=\"$dlfiles')",
  "(36927, Token.Text.Whitespace, ' ')",
  "(36928, Token.Text, '$pic_object\"')",
  "(36940, Token.Text.NewLine, '\\n')",
  "(36941, Token.Text.Whitespace, '\\t\\t      ')",
  "(36949, Token.Text, 'prev=')",
  "(36954, Token.Text.NewLine, '\\n')",
  "(36955, Token.Text.Whitespace, '\\t\\t      ')",
  "(36963, Token.Text, 'continue')",
  "(36971, Token.Text.NewLine, '\\n')",
  "(36972, Token.Text.Whitespace, '\\t\\t    ')",
  "(36978, Token.Text, 'else')",
  "(36982, Token.Text.NewLine, '\\n')",
  "(36983, Token.Text.Whitespace, '\\t\\t      ')",
  "(36991, Token.Comment.Single, '# If libtool objects are unsupported, then we need to preload.')",
  "(37053, Token.Text.NewLine, '\\n')",
  "(37054, Token.Text.Whitespace, '\\t\\t      ')",
  "(37062, Token.Text, 'prev=dlprefiles')",
  "(37077, Token.Text.NewLine, '\\n')",
  "(37078, Token.Text.Whitespace, '\\t\\t    ')",
  "(37084, Token.Text, 'fi')",
  "(37086, Token.Text.NewLine, '\\n')",
  "(37087, Token.Text.Whitespace, '\\t\\t  ')",
  "(37091, Token.Text, 'fi')",
  "(37093, Token.Text.NewLine, '\\n\\n')",
  "(37095, Token.Text.Whitespace, '\\t\\t  ')",
  "(37099, Token.Comment.Single, '# CHECK ME:  I think I busted this.  -Ossama')",
  "(37143, Token.Text.NewLine, '\\n')",
  "(37144, Token.Text.Whitespace, '\\t\\t  ')",
  "(37148, Token.Text, 'if')",
  "(37150, Token.Text.Whitespace, ' ')",
  "(37151, Token.Text, 'test')",
  "(37155, Token.Text.Whitespace, ' ')",
  "(37156, Token.Literal.String.Double, '\"$prev\"')",
  "(37163, Token.Text.Whitespace, ' ')",
  "(37164, Token.Text, '=')",
  "(37165, Token.Text.Whitespace, ' ')",
  "(37166, Token.Text, 'dlprefiles;')",
  "(37177, Token.Text.Whitespace, ' ')",
  "(37178, Token.Text, 'then')",
  "(37182, Token.Text.NewLine, '\\n')",
  "(37183, Token.Text.Whitespace, '\\t\\t    ')",
  "(37189, Token.Comment.Single, '# Preload the old-style object.')",
  "(37220, Token.Text.NewLine, '\\n')",
  "(37221, Token.Text.Whitespace, '\\t\\t    ')",
  "(37227, Token.Text, 'dlprefiles=\"$dlprefiles')",
  "(37250, Token.Text.Whitespace, ' ')",
  "(37251, Token.Text, '$pic_object\"')",
  "(37263, Token.Text.NewLine, '\\n')",
  "(37264, Token.Text.Whitespace, '\\t\\t    ')",
  "(37270, Token.Text, 'prev=')",
  "(37275, Token.Text.NewLine, '\\n')",
  "(37276, Token.Text.Whitespace, '\\t\\t  ')",
  "(37280, Token.Text, 'fi')",
  "(37282, Token.Text.NewLine, '\\n\\n')",
  "(37284, Token.Text.Whitespace, '\\t\\t  ')",
  "(37288, Token.Comment.Single, '# A PIC object.')",
  "(37303, Token.Text.NewLine, '\\n')",
  "(37304, Token.Text.Whitespace, '\\t\\t  ')",
  "(37308, Token.Text, 'libobjs=\"$libobjs')",
  "(37325, Token.Text.Whitespace, ' ')",
  "(37326, Token.Text, '$pic_object\"')",
  "(37338, Token.Text.NewLine, '\\n')",
  "(37339, Token.Text.Whitespace, '\\t\\t  ')",
  "(37343, Token.Text, 'arg=\"$pic_object\"')",
  "(37360, Token.Text.NewLine, '\\n')",
  "(37361, Token.Text.Whitespace, '\\t\\t')",
  "(37363, Token.Text, 'fi')",
  "(37365, Token.Text.NewLine, '\\n\\n')",
  "(37367, Token.Text.Whitespace, '\\t\\t')",
  "(37369, Token.Comment.Single, '# Non-PIC object.')",
  "(37386, Token.Text.NewLine, '\\n')",
  "(37387, Token.Text.Whitespace, '\\t\\t')",
  "(37389, Token.Text, 'if')",
  "(37391, Token.Text.Whitespace, ' ')",
  "(37392, Token.Text, 'test')",
  "(37396, Token.Text.Whitespace, ' ')",
  "(37397, Token.Literal.String.Double, '\"$non_pic_object\"')",
  "(37414, Token.Text.Whitespace, ' ')",
  "(37415, Token.Text, '!=')",
  "(37417, Token.Text.Whitespace, ' ')",
  "(37418, Token.Text, 'none;')",
  "(37423, Token.Text.Whitespace, ' ')",
  "(37424, Token.Text, 'then')",
  "(37428, Token.Text.NewLine, '\\n')",
  "(37429, Token.Text.Whitespace, '\\t\\t  ')",
  "(37433, Token.Comment.Single, '# Prepend the subdirectory the object is found in.')",
  "(37483, Token.Text.NewLine, '\\n')",
  "(37484, Token.Text.Whitespace, '\\t\\t  ')",
  "(37488, Token.Text, 'non_pic_object=\"$xdir$non_pic_object\"')",
  "(37525, Token.Text.NewLine, '\\n\\n')",
  "(37527, Token.Text.Whitespace, '\\t\\t  ')",
  "(37531, Token.Comment.Single, '# A standard non-PIC object')",
  "(37558, Token.Text.NewLine, '\\n')",
  "(37559, Token.Text.Whitespace, '\\t\\t  ')",
  "(37563, Token.Text, 'non_pic_objects=\"$non_pic_objects')",
  "(37596, Token.Text.Whitespace, ' ')",
  "(37597, Token.Text, '$non_pic_object\"')",
  "(37613, Token.Text.NewLine, '\\n')",
  "(37614, Token.Text.Whitespace, '\\t\\t  ')",
  "(37618, Token.Text, 'if')",
  "(37620, Token.Text.Whitespace, ' ')",
  "(37621, Token.Text, 'test')",
  "(37625, Token.Text.Whitespace, ' ')",
  "(37626, Token.Text, '-z')",
  "(37628, Token.Text.Whitespace, ' ')",
  "(37629, Token.Literal.String.Double, '\"$pic_object\"')",
  "(37642, Token.Text.Whitespace, ' ')",
  "(37643, Token.Text, '||')",
  "(37645, Token.Text.Whitespace, ' ')",
  "(37646, Token.Text, 'test')",
  "(37650, Token.Text.Whitespace, ' ')",
  "(37651, Token.Literal.String.Double, '\"$pic_object\"')",
  "(37664, Token.Text.Whitespace, ' ')",
  "(37665, Token.Text, '=')",
  "(37666, Token.Text.Whitespace, ' ')",
  "(37667, Token.Text, 'none')",
  "(37671, Token.Text.Whitespace, ' ')",
  "(37672, Token.Text, ';')",
  "(37673, Token.Text.Whitespace, ' ')",
  "(37674, Token.Text, 'then')",
  "(37678, Token.Text.NewLine, '\\n')",
  "(37679, Token.Text.Whitespace, '\\t\\t    ')",
  "(37685, Token.Text, 'arg=\"$non_pic_object\"')",
  "(37706, Token.Text.NewLine, '\\n')",
  "(37707, Token.Text.Whitespace, '\\t\\t  ')",
  "(37711, Token.Text, 'fi')",
  "(37713, Token.Text.NewLine, '\\n')",
  "(37714, Token.Text.Whitespace, '\\t\\t')",
  "(37716, Token.Text, 'else')",
  "(37720, Token.Text.NewLine, '\\n')",
  "(37721, Token.Text.Whitespace, '\\t\\t  ')",
  "(37725, Token.Comment.Single, '# If the PIC object exists, use it instead.')",
  "(37768, Token.Text.NewLine, '\\n')",
  "(37769, Token.Text.Whitespace, '\\t\\t  ')",
  "(37773, Token.Comment.Single, '# $xdir was prepended to $pic_object above.')",
  "(37816, Token.Text.NewLine, '\\n')",
  "(37817, Token.Text.Whitespace, '\\t\\t  ')",
  "(37821, Token.Text, 'non_pic_object=\"$pic_object\"')",
  "(37849, Token.Text.NewLine, '\\n')",
  "(37850, Token.Text.Whitespace, '\\t\\t  ')",
  "(37854, Token.Text, 'non_pic_objects=\"$non_pic_objects')",
  "(37887, Token.Text.Whitespace, ' ')",
  "(37888, Token.Text, '$non_pic_object\"')",
  "(37904, Token.Text.NewLine, '\\n')",
  "(37905, Token.Text.Whitespace, '\\t\\t')",
  "(37907, Token.Text, 'fi')",
  "(37909, Token.Text.NewLine, '\\n')",
  "(37910, Token.Text.Whitespace, '\\t      ')",
  "(37917, Token.Text, 'else')",
  "(37921, Token.Text.NewLine, '\\n')",
  "(37922, Token.Text.Whitespace, '\\t\\t')",
  "(37924, Token.Comment.Single, '# Only an error if not doing a dry-run.')",
  "(37963, Token.Text.NewLine, '\\n')",
  "(37964, Token.Text.Whitespace, '\\t\\t')",
  "(37966, Token.Text, 'if')",
  "(37968, Token.Text.Whitespace, ' ')",
  "(37969, Token.Text, 'test')",
  "(37973, Token.Text.Whitespace, ' ')",
  "(37974, Token.Text, '-z')",
  "(37976, Token.Text.Whitespace, ' ')",
  "(37977, Token.Literal.String.Double, '\"$run\"')",
  "(37983, Token.Text, ';')",
  "(37984, Token.Text.Whitespace, ' ')",
  "(37985, Token.Text, 'then')",
  "(37989, Token.Text.NewLine, '\\n')",
  "(37990, Token.Text.Whitespace, '\\t\\t  ')",
  "(37994, Token.Text, '$echo')",
  "(37999, Token.Text.Whitespace, ' ')",
  "(38000, Token.Literal.String.Double, '\"$modename: \\\\`$arg\\' is not a valid libtool object\"')",
  "(38050, Token.Text.Whitespace, ' ')",
  "(38051, Token.Text, '1>&2')",
  "(38055, Token.Text.NewLine, '\\n')",
  "(38056, Token.Text.Whitespace, '\\t\\t  ')",
  "(38060, Token.Text, 'exit')",
  "(38064, Token.Text.Whitespace, ' ')",
  "(38065, Token.Text, '$EXIT_FAILURE')",
  "(38078, Token.Text.NewLine, '\\n')",
  "(38079, Token.Text.Whitespace, '\\t\\t')",
  "(38081, Token.Text, 'else')",
  "(38085, Token.Text.NewLine, '\\n')",
  "(38086, Token.Text.Whitespace, '\\t\\t  ')",
  "(38090, Token.Comment.Single, '# Dry-run case.')",
  "(38105, Token.Text.NewLine, '\\n\\n')",
  "(38107, Token.Text.Whitespace, '\\t\\t  ')",
  "(38111, Token.Comment.Single, '# Extract subdirectory from the argument.')",
  "(38152, Token.Text.NewLine, '\\n')",
  "(38153, Token.Text.Whitespace, '\\t\\t  ')",
  "(38157, Token.Text, 'xdir=`$echo')",
  "(38168, Token.Text.Whitespace, ' ')",
  "(38169, Token.Literal.String.Double, '\"X$arg\"')",
  "(38176, Token.Text.Whitespace, ' ')",
  "(38177, Token.Text, '|')",
  "(38178, Token.Text.Whitespace, ' ')",
  "(38179, Token.Text, '$Xsed')",
  "(38184, Token.Text.Whitespace, ' ')",
  "(38185, Token.Text, '-e')",
  "(38187, Token.Text.Whitespace, ' ')",
  "(38188, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(38201, Token.Text, '`')",
  "(38202, Token.Text.NewLine, '\\n')",
  "(38203, Token.Text.Whitespace, '\\t\\t  ')",
  "(38207, Token.Text, 'if')",
  "(38209, Token.Text.Whitespace, ' ')",
  "(38210, Token.Text, 'test')",
  "(38214, Token.Text.Whitespace, ' ')",
  "(38215, Token.Literal.String.Double, '\"X$xdir\"')",
  "(38223, Token.Text.Whitespace, ' ')",
  "(38224, Token.Text, '=')",
  "(38225, Token.Text.Whitespace, ' ')",
  "(38226, Token.Literal.String.Double, '\"X$arg\"')",
  "(38233, Token.Text, ';')",
  "(38234, Token.Text.Whitespace, ' ')",
  "(38235, Token.Text, 'then')",
  "(38239, Token.Text.NewLine, '\\n')",
  "(38240, Token.Text.Whitespace, '\\t\\t    ')",
  "(38246, Token.Text, 'xdir=')",
  "(38251, Token.Text.NewLine, '\\n')",
  "(38252, Token.Text.Whitespace, '\\t\\t  ')",
  "(38256, Token.Text, 'else')",
  "(38260, Token.Text.NewLine, '\\n')",
  "(38261, Token.Text.Whitespace, '\\t\\t    ')",
  "(38267, Token.Text, 'xdir=\"$xdir/\"')",
  "(38280, Token.Text.NewLine, '\\n')",
  "(38281, Token.Text.Whitespace, '\\t\\t  ')",
  "(38285, Token.Text, 'fi')",
  "(38287, Token.Text.NewLine, '\\n\\n')",
  "(38289, Token.Text.Whitespace, '\\t\\t  ')",
  "(38293, Token.Text, 'pic_object=`$echo')",
  "(38310, Token.Text.Whitespace, ' ')",
  "(38311, Token.Literal.String.Double, '\"X${xdir}${objdir}/${arg}\"')",
  "(38337, Token.Text.Whitespace, ' ')",
  "(38338, Token.Text, '|')",
  "(38339, Token.Text.Whitespace, ' ')",
  "(38340, Token.Text, '$Xsed')",
  "(38345, Token.Text.Whitespace, ' ')",
  "(38346, Token.Text, '-e')",
  "(38348, Token.Text.Whitespace, ' ')",
  "(38349, Token.Literal.String.Double, '\"$lo2o\"')",
  "(38356, Token.Text, '`')",
  "(38357, Token.Text.NewLine, '\\n')",
  "(38358, Token.Text.Whitespace, '\\t\\t  ')",
  "(38362, Token.Text, 'non_pic_object=`$echo')",
  "(38383, Token.Text.Whitespace, ' ')",
  "(38384, Token.Literal.String.Double, '\"X${xdir}${arg}\"')",
  "(38400, Token.Text.Whitespace, ' ')",
  "(38401, Token.Text, '|')",
  "(38402, Token.Text.Whitespace, ' ')",
  "(38403, Token.Text, '$Xsed')",
  "(38408, Token.Text.Whitespace, ' ')",
  "(38409, Token.Text, '-e')",
  "(38411, Token.Text.Whitespace, ' ')",
  "(38412, Token.Literal.String.Double, '\"$lo2o\"')",
  "(38419, Token.Text, '`')",
  "(38420, Token.Text.NewLine, '\\n')",
  "(38421, Token.Text.Whitespace, '\\t\\t  ')",
  "(38425, Token.Text, 'libobjs=\"$libobjs')",
  "(38442, Token.Text.Whitespace, ' ')",
  "(38443, Token.Text, '$pic_object\"')",
  "(38455, Token.Text.NewLine, '\\n')",
  "(38456, Token.Text.Whitespace, '\\t\\t  ')",
  "(38460, Token.Text, 'non_pic_objects=\"$non_pic_objects')",
  "(38493, Token.Text.Whitespace, ' ')",
  "(38494, Token.Text, '$non_pic_object\"')",
  "(38510, Token.Text.NewLine, '\\n')",
  "(38511, Token.Text.Whitespace, '\\t\\t')",
  "(38513, Token.Text, 'fi')",
  "(38515, Token.Text.NewLine, '\\n')",
  "(38516, Token.Text.Whitespace, '\\t      ')",
  "(38523, Token.Text, 'fi')",
  "(38525, Token.Text.NewLine, '\\n')",
  "(38526, Token.Text.Whitespace, '\\t    ')",
  "(38531, Token.Text, 'done')",
  "(38535, Token.Text.NewLine, '\\n')",
  "(38536, Token.Text.Whitespace, '\\t  ')",
  "(38539, Token.Text, 'else')",
  "(38543, Token.Text.NewLine, '\\n')",
  "(38544, Token.Text.Whitespace, '\\t    ')",
  "(38549, Token.Text, '$echo')",
  "(38554, Token.Text.Whitespace, ' ')",
  "(38555, Token.Literal.String.Double, '\"$modename: link input file \\\\`$save_arg\\' does not exist\"')",
  "(38611, Token.Text.NewLine, '\\n')",
  "(38612, Token.Text.Whitespace, '\\t    ')",
  "(38617, Token.Text, 'exit')",
  "(38621, Token.Text.Whitespace, ' ')",
  "(38622, Token.Text, '$EXIT_FAILURE')",
  "(38635, Token.Text.NewLine, '\\n')",
  "(38636, Token.Text.Whitespace, '\\t  ')",
  "(38639, Token.Text, 'fi')",
  "(38641, Token.Text.NewLine, '\\n')",
  "(38642, Token.Text.Whitespace, '\\t  ')",
  "(38645, Token.Text, 'arg=$save_arg')",
  "(38658, Token.Text.NewLine, '\\n')",
  "(38659, Token.Text.Whitespace, '\\t  ')",
  "(38662, Token.Text, 'prev=')",
  "(38667, Token.Text.NewLine, '\\n')",
  "(38668, Token.Text.Whitespace, '\\t  ')",
  "(38671, Token.Text, 'continue')",
  "(38679, Token.Text.NewLine, '\\n')",
  "(38680, Token.Text.Whitespace, '\\t  ')",
  "(38683, Token.Text, ';;')",
  "(38685, Token.Text.NewLine, '\\n')",
  "(38686, Token.Text.Whitespace, '\\t')",
  "(38687, Token.Text, 'rpath')",
  "(38692, Token.Text.Whitespace, ' ')",
  "(38693, Token.Text, '|')",
  "(38694, Token.Text.Whitespace, ' ')",
  "(38695, Token.Text, 'xrpath)')",
  "(38702, Token.Text.NewLine, '\\n')",
  "(38703, Token.Text.Whitespace, '\\t  ')",
  "(38706, Token.Comment.Single, '# We need an absolute path.')",
  "(38733, Token.Text.NewLine, '\\n')",
  "(38734, Token.Text.Whitespace, '\\t  ')",
  "(38737, Token.Text, 'case')",
  "(38741, Token.Text.Whitespace, ' ')",
  "(38742, Token.Text, '$arg')",
  "(38746, Token.Text.Whitespace, ' ')",
  "(38747, Token.Text, 'in')",
  "(38749, Token.Text.NewLine, '\\n')",
  "(38750, Token.Text.Whitespace, '\\t  ')",
  "(38753, Token.Text, '[\\\\\\\\/]*')",
  "(38759, Token.Text.Whitespace, ' ')",
  "(38760, Token.Text, '|')",
  "(38761, Token.Text.Whitespace, ' ')",
  "(38762, Token.Text, '[A-Za-z]:[\\\\\\\\/]*)')",
  "(38778, Token.Text.Whitespace, ' ')",
  "(38779, Token.Text, ';;')",
  "(38781, Token.Text.NewLine, '\\n')",
  "(38782, Token.Text.Whitespace, '\\t  ')",
  "(38785, Token.Text, '*)')",
  "(38787, Token.Text.NewLine, '\\n')",
  "(38788, Token.Text.Whitespace, '\\t    ')",
  "(38793, Token.Text, '$echo')",
  "(38798, Token.Text.Whitespace, ' ')",
  "(38799, Token.Literal.String.Double, '\"$modename: only absolute run-paths are allowed\"')",
  "(38847, Token.Text.Whitespace, ' ')",
  "(38848, Token.Text, '1>&2')",
  "(38852, Token.Text.NewLine, '\\n')",
  "(38853, Token.Text.Whitespace, '\\t    ')",
  "(38858, Token.Text, 'exit')",
  "(38862, Token.Text.Whitespace, ' ')",
  "(38863, Token.Text, '$EXIT_FAILURE')",
  "(38876, Token.Text.NewLine, '\\n')",
  "(38877, Token.Text.Whitespace, '\\t    ')",
  "(38882, Token.Text, ';;')",
  "(38884, Token.Text.NewLine, '\\n')",
  "(38885, Token.Text.Whitespace, '\\t  ')",
  "(38888, Token.Text, 'esac')",
  "(38892, Token.Text.NewLine, '\\n')",
  "(38893, Token.Text.Whitespace, '\\t  ')",
  "(38896, Token.Text, 'if')",
  "(38898, Token.Text.Whitespace, ' ')",
  "(38899, Token.Text, 'test')",
  "(38903, Token.Text.Whitespace, ' ')",
  "(38904, Token.Literal.String.Double, '\"$prev\"')",
  "(38911, Token.Text.Whitespace, ' ')",
  "(38912, Token.Text, '=')",
  "(38913, Token.Text.Whitespace, ' ')",
  "(38914, Token.Text, 'rpath;')",
  "(38920, Token.Text.Whitespace, ' ')",
  "(38921, Token.Text, 'then')",
  "(38925, Token.Text.NewLine, '\\n')",
  "(38926, Token.Text.Whitespace, '\\t    ')",
  "(38931, Token.Text, 'case')",
  "(38935, Token.Text.Whitespace, ' ')",
  "(38936, Token.Literal.String.Double, '\"$rpath \"')",
  "(38945, Token.Text.Whitespace, ' ')",
  "(38946, Token.Text, 'in')",
  "(38948, Token.Text.NewLine, '\\n')",
  "(38949, Token.Text.Whitespace, '\\t    ')",
  "(38954, Token.Text, '*\"')",
  "(38956, Token.Text.Whitespace, ' ')",
  "(38957, Token.Text, '$arg')",
  "(38961, Token.Text.Whitespace, ' ')",
  "(38962, Token.Literal.String.Double, '\"*) ;;\\n\\t    *) rpath=\"')",
  "(38984, Token.Text, '$rpath')",
  "(38990, Token.Text.Whitespace, ' ')",
  "(38991, Token.Text, '$arg\"')",
  "(38996, Token.Text.Whitespace, ' ')",
  "(38997, Token.Text, ';;')",
  "(38999, Token.Text.NewLine, '\\n')",
  "(39000, Token.Text.Whitespace, '\\t    ')",
  "(39005, Token.Text, 'esac')",
  "(39009, Token.Text.NewLine, '\\n')",
  "(39010, Token.Text.Whitespace, '\\t  ')",
  "(39013, Token.Text, 'else')",
  "(39017, Token.Text.NewLine, '\\n')",
  "(39018, Token.Text.Whitespace, '\\t    ')",
  "(39023, Token.Text, 'case')",
  "(39027, Token.Text.Whitespace, ' ')",
  "(39028, Token.Literal.String.Double, '\"$xrpath \"')",
  "(39038, Token.Text.Whitespace, ' ')",
  "(39039, Token.Text, 'in')",
  "(39041, Token.Text.NewLine, '\\n')",
  "(39042, Token.Text.Whitespace, '\\t    ')",
  "(39047, Token.Text, '*\"')",
  "(39049, Token.Text.Whitespace, ' ')",
  "(39050, Token.Text, '$arg')",
  "(39054, Token.Text.Whitespace, ' ')",
  "(39055, Token.Literal.String.Double, '\"*) ;;\\n\\t    *) xrpath=\"')",
  "(39078, Token.Text, '$xrpath')",
  "(39085, Token.Text.Whitespace, ' ')",
  "(39086, Token.Text, '$arg\"')",
  "(39091, Token.Text.Whitespace, ' ')",
  "(39092, Token.Text, ';;')",
  "(39094, Token.Text.NewLine, '\\n')",
  "(39095, Token.Text.Whitespace, '\\t    ')",
  "(39100, Token.Text, 'esac')",
  "(39104, Token.Text.NewLine, '\\n')",
  "(39105, Token.Text.Whitespace, '\\t  ')",
  "(39108, Token.Text, 'fi')",
  "(39110, Token.Text.NewLine, '\\n')",
  "(39111, Token.Text.Whitespace, '\\t  ')",
  "(39114, Token.Text, 'prev=')",
  "(39119, Token.Text.NewLine, '\\n')",
  "(39120, Token.Text.Whitespace, '\\t  ')",
  "(39123, Token.Text, 'continue')",
  "(39131, Token.Text.NewLine, '\\n')",
  "(39132, Token.Text.Whitespace, '\\t  ')",
  "(39135, Token.Text, ';;')",
  "(39137, Token.Text.NewLine, '\\n')",
  "(39138, Token.Text.Whitespace, '\\t')",
  "(39139, Token.Text, 'xcompiler)')",
  "(39149, Token.Text.NewLine, '\\n')",
  "(39150, Token.Text.Whitespace, '\\t  ')",
  "(39153, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(39184, Token.Text.Whitespace, ' ')",
  "(39185, Token.Text, '$qarg\"')",
  "(39191, Token.Text.NewLine, '\\n')",
  "(39192, Token.Text.Whitespace, '\\t  ')",
  "(39195, Token.Text, 'prev=')",
  "(39200, Token.Text.NewLine, '\\n')",
  "(39201, Token.Text.Whitespace, '\\t  ')",
  "(39204, Token.Text, 'compile_command=\"$compile_command')",
  "(39237, Token.Text.Whitespace, ' ')",
  "(39238, Token.Text, '$qarg\"')",
  "(39244, Token.Text.NewLine, '\\n')",
  "(39245, Token.Text.Whitespace, '\\t  ')",
  "(39248, Token.Text, 'finalize_command=\"$finalize_command')",
  "(39283, Token.Text.Whitespace, ' ')",
  "(39284, Token.Text, '$qarg\"')",
  "(39290, Token.Text.NewLine, '\\n')",
  "(39291, Token.Text.Whitespace, '\\t  ')",
  "(39294, Token.Text, 'continue')",
  "(39302, Token.Text.NewLine, '\\n')",
  "(39303, Token.Text.Whitespace, '\\t  ')",
  "(39306, Token.Text, ';;')",
  "(39308, Token.Text.NewLine, '\\n')",
  "(39309, Token.Text.Whitespace, '\\t')",
  "(39310, Token.Text, 'xlinker)')",
  "(39318, Token.Text.NewLine, '\\n')",
  "(39319, Token.Text.Whitespace, '\\t  ')",
  "(39322, Token.Text, 'linker_flags=\"$linker_flags')",
  "(39349, Token.Text.Whitespace, ' ')",
  "(39350, Token.Text, '$qarg\"')",
  "(39356, Token.Text.NewLine, '\\n')",
  "(39357, Token.Text.Whitespace, '\\t  ')",
  "(39360, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(39391, Token.Text.Whitespace, ' ')",
  "(39392, Token.Text, '$wl$qarg\"')",
  "(39401, Token.Text.NewLine, '\\n')",
  "(39402, Token.Text.Whitespace, '\\t  ')",
  "(39405, Token.Text, 'prev=')",
  "(39410, Token.Text.NewLine, '\\n')",
  "(39411, Token.Text.Whitespace, '\\t  ')",
  "(39414, Token.Text, 'compile_command=\"$compile_command')",
  "(39447, Token.Text.Whitespace, ' ')",
  "(39448, Token.Text, '$wl$qarg\"')",
  "(39457, Token.Text.NewLine, '\\n')",
  "(39458, Token.Text.Whitespace, '\\t  ')",
  "(39461, Token.Text, 'finalize_command=\"$finalize_command')",
  "(39496, Token.Text.Whitespace, ' ')",
  "(39497, Token.Text, '$wl$qarg\"')",
  "(39506, Token.Text.NewLine, '\\n')",
  "(39507, Token.Text.Whitespace, '\\t  ')",
  "(39510, Token.Text, 'continue')",
  "(39518, Token.Text.NewLine, '\\n')",
  "(39519, Token.Text.Whitespace, '\\t  ')",
  "(39522, Token.Text, ';;')",
  "(39524, Token.Text.NewLine, '\\n')",
  "(39525, Token.Text.Whitespace, '\\t')",
  "(39526, Token.Text, 'xcclinker)')",
  "(39536, Token.Text.NewLine, '\\n')",
  "(39537, Token.Text.Whitespace, '\\t  ')",
  "(39540, Token.Text, 'linker_flags=\"$linker_flags')",
  "(39567, Token.Text.Whitespace, ' ')",
  "(39568, Token.Text, '$qarg\"')",
  "(39574, Token.Text.NewLine, '\\n')",
  "(39575, Token.Text.Whitespace, '\\t  ')",
  "(39578, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(39609, Token.Text.Whitespace, ' ')",
  "(39610, Token.Text, '$qarg\"')",
  "(39616, Token.Text.NewLine, '\\n')",
  "(39617, Token.Text.Whitespace, '\\t  ')",
  "(39620, Token.Text, 'prev=')",
  "(39625, Token.Text.NewLine, '\\n')",
  "(39626, Token.Text.Whitespace, '\\t  ')",
  "(39629, Token.Text, 'compile_command=\"$compile_command')",
  "(39662, Token.Text.Whitespace, ' ')",
  "(39663, Token.Text, '$qarg\"')",
  "(39669, Token.Text.NewLine, '\\n')",
  "(39670, Token.Text.Whitespace, '\\t  ')",
  "(39673, Token.Text, 'finalize_command=\"$finalize_command')",
  "(39708, Token.Text.Whitespace, ' ')",
  "(39709, Token.Text, '$qarg\"')",
  "(39715, Token.Text.NewLine, '\\n')",
  "(39716, Token.Text.Whitespace, '\\t  ')",
  "(39719, Token.Text, 'continue')",
  "(39727, Token.Text.NewLine, '\\n')",
  "(39728, Token.Text.Whitespace, '\\t  ')",
  "(39731, Token.Text, ';;')",
  "(39733, Token.Text.NewLine, '\\n')",
  "(39734, Token.Text.Whitespace, '\\t')",
  "(39735, Token.Text, 'shrext)')",
  "(39742, Token.Text.NewLine, '\\n')",
  "(39743, Token.Text.Whitespace, '  \\t  ')",
  "(39748, Token.Text, 'shrext_cmds=\"$arg\"')",
  "(39766, Token.Text.NewLine, '\\n')",
  "(39767, Token.Text.Whitespace, '\\t  ')",
  "(39770, Token.Text, 'prev=')",
  "(39775, Token.Text.NewLine, '\\n')",
  "(39776, Token.Text.Whitespace, '\\t  ')",
  "(39779, Token.Text, 'continue')",
  "(39787, Token.Text.NewLine, '\\n')",
  "(39788, Token.Text.Whitespace, '\\t  ')",
  "(39791, Token.Text, ';;')",
  "(39793, Token.Text.NewLine, '\\n')",
  "(39794, Token.Text.Whitespace, '\\t')",
  "(39795, Token.Text, 'darwin_framework|darwin_framework_skip)')",
  "(39834, Token.Text.NewLine, '\\n')",
  "(39835, Token.Text.Whitespace, '\\t  ')",
  "(39838, Token.Text, 'test')",
  "(39842, Token.Text.Whitespace, ' ')",
  "(39843, Token.Literal.String.Double, '\"$prev\"')",
  "(39850, Token.Text.Whitespace, ' ')",
  "(39851, Token.Text, '=')",
  "(39852, Token.Text.Whitespace, ' ')",
  "(39853, Token.Literal.String.Double, '\"darwin_framework\"')",
  "(39871, Token.Text.Whitespace, ' ')",
  "(39872, Token.Text, '&&')",
  "(39874, Token.Text.Whitespace, ' ')",
  "(39875, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(39906, Token.Text.Whitespace, ' ')",
  "(39907, Token.Text, '$arg\"')",
  "(39912, Token.Text.NewLine, '\\n')",
  "(39913, Token.Text.Whitespace, '\\t  ')",
  "(39916, Token.Text, 'compile_command=\"$compile_command')",
  "(39949, Token.Text.Whitespace, ' ')",
  "(39950, Token.Text, '$arg\"')",
  "(39955, Token.Text.NewLine, '\\n')",
  "(39956, Token.Text.Whitespace, '\\t  ')",
  "(39959, Token.Text, 'finalize_command=\"$finalize_command')",
  "(39994, Token.Text.Whitespace, ' ')",
  "(39995, Token.Text, '$arg\"')",
  "(40000, Token.Text.NewLine, '\\n')",
  "(40001, Token.Text.Whitespace, '\\t  ')",
  "(40004, Token.Text, 'prev=')",
  "(40009, Token.Text.NewLine, '\\n')",
  "(40010, Token.Text.Whitespace, '\\t  ')",
  "(40013, Token.Text, 'continue')",
  "(40021, Token.Text.NewLine, '\\n')",
  "(40022, Token.Text.Whitespace, '\\t  ')",
  "(40025, Token.Text, ';;')",
  "(40027, Token.Text.NewLine, '\\n')",
  "(40028, Token.Text.Whitespace, '\\t')",
  "(40029, Token.Text, '*)')",
  "(40031, Token.Text.NewLine, '\\n')",
  "(40032, Token.Text.Whitespace, '\\t  ')",
  "(40035, Token.Text, 'eval')",
  "(40039, Token.Text.Whitespace, ' ')",
  "(40040, Token.Literal.String.Double, '\"$prev=\\\\\"\\\\$arg\\\\\"\"')",
  "(40057, Token.Text.NewLine, '\\n')",
  "(40058, Token.Text.Whitespace, '\\t  ')",
  "(40061, Token.Text, 'prev=')",
  "(40066, Token.Text.NewLine, '\\n')",
  "(40067, Token.Text.Whitespace, '\\t  ')",
  "(40070, Token.Text, 'continue')",
  "(40078, Token.Text.NewLine, '\\n')",
  "(40079, Token.Text.Whitespace, '\\t  ')",
  "(40082, Token.Text, ';;')",
  "(40084, Token.Text.NewLine, '\\n')",
  "(40085, Token.Text.Whitespace, '\\t')",
  "(40086, Token.Text, 'esac')",
  "(40090, Token.Text.NewLine, '\\n')",
  "(40091, Token.Text.Whitespace, '      ')",
  "(40097, Token.Text, 'fi')",
  "(40099, Token.Text.Whitespace, ' ')",
  "(40100, Token.Comment.Single, '# test -n \"$prev\"')",
  "(40117, Token.Text.NewLine, '\\n\\n')",
  "(40119, Token.Text.Whitespace, '      ')",
  "(40125, Token.Text, 'prevarg=\"$arg\"')",
  "(40139, Token.Text.NewLine, '\\n\\n')",
  "(40141, Token.Text.Whitespace, '      ')",
  "(40147, Token.Text, 'case')",
  "(40151, Token.Text.Whitespace, ' ')",
  "(40152, Token.Text, '$arg')",
  "(40156, Token.Text.Whitespace, ' ')",
  "(40157, Token.Text, 'in')",
  "(40159, Token.Text.NewLine, '\\n')",
  "(40160, Token.Text.Whitespace, '      ')",
  "(40166, Token.Text, '-all-static)')",
  "(40178, Token.Text.NewLine, '\\n')",
  "(40179, Token.Text.Whitespace, '\\t')",
  "(40180, Token.Text, 'if')",
  "(40182, Token.Text.Whitespace, ' ')",
  "(40183, Token.Text, 'test')",
  "(40187, Token.Text.Whitespace, ' ')",
  "(40188, Token.Text, '-n')",
  "(40190, Token.Text.Whitespace, ' ')",
  "(40191, Token.Literal.String.Double, '\"$link_static_flag\"')",
  "(40210, Token.Text, ';')",
  "(40211, Token.Text.Whitespace, ' ')",
  "(40212, Token.Text, 'then')",
  "(40216, Token.Text.NewLine, '\\n')",
  "(40217, Token.Text.Whitespace, '\\t  ')",
  "(40220, Token.Text, 'compile_command=\"$compile_command')",
  "(40253, Token.Text.Whitespace, ' ')",
  "(40254, Token.Text, '$link_static_flag\"')",
  "(40272, Token.Text.NewLine, '\\n')",
  "(40273, Token.Text.Whitespace, '\\t  ')",
  "(40276, Token.Text, 'finalize_command=\"$finalize_command')",
  "(40311, Token.Text.Whitespace, ' ')",
  "(40312, Token.Text, '$link_static_flag\"')",
  "(40330, Token.Text.NewLine, '\\n')",
  "(40331, Token.Text.Whitespace, '\\t')",
  "(40332, Token.Text, 'fi')",
  "(40334, Token.Text.NewLine, '\\n')",
  "(40335, Token.Text.Whitespace, '\\t')",
  "(40336, Token.Text, 'continue')",
  "(40344, Token.Text.NewLine, '\\n')",
  "(40345, Token.Text.Whitespace, '\\t')",
  "(40346, Token.Text, ';;')",
  "(40348, Token.Text.NewLine, '\\n\\n')",
  "(40350, Token.Text.Whitespace, '      ')",
  "(40356, Token.Text, '-allow-undefined)')",
  "(40373, Token.Text.NewLine, '\\n')",
  "(40374, Token.Text.Whitespace, '\\t')",
  "(40375, Token.Comment.Single, '# FIXME: remove this flag sometime in the future.')",
  "(40424, Token.Text.NewLine, '\\n')",
  "(40425, Token.Text.Whitespace, '\\t')",
  "(40426, Token.Text, '$echo')",
  "(40431, Token.Text.Whitespace, ' ')",
  "(40432, Token.Literal.String.Double, '\"$modename: \\\\`-allow-undefined\\' is deprecated because it is the default\"')",
  "(40504, Token.Text.Whitespace, ' ')",
  "(40505, Token.Text, '1>&2')",
  "(40509, Token.Text.NewLine, '\\n')",
  "(40510, Token.Text.Whitespace, '\\t')",
  "(40511, Token.Text, 'continue')",
  "(40519, Token.Text.NewLine, '\\n')",
  "(40520, Token.Text.Whitespace, '\\t')",
  "(40521, Token.Text, ';;')",
  "(40523, Token.Text.NewLine, '\\n\\n')",
  "(40525, Token.Text.Whitespace, '      ')",
  "(40531, Token.Text, '-avoid-version)')",
  "(40546, Token.Text.NewLine, '\\n')",
  "(40547, Token.Text.Whitespace, '\\t')",
  "(40548, Token.Text, 'avoid_version=yes')",
  "(40565, Token.Text.NewLine, '\\n')",
  "(40566, Token.Text.Whitespace, '\\t')",
  "(40567, Token.Text, 'continue')",
  "(40575, Token.Text.NewLine, '\\n')",
  "(40576, Token.Text.Whitespace, '\\t')",
  "(40577, Token.Text, ';;')",
  "(40579, Token.Text.NewLine, '\\n\\n')",
  "(40581, Token.Text.Whitespace, '      ')",
  "(40587, Token.Text, '-dlopen)')",
  "(40595, Token.Text.NewLine, '\\n')",
  "(40596, Token.Text.Whitespace, '\\t')",
  "(40597, Token.Text, 'prev=dlfiles')",
  "(40609, Token.Text.NewLine, '\\n')",
  "(40610, Token.Text.Whitespace, '\\t')",
  "(40611, Token.Text, 'continue')",
  "(40619, Token.Text.NewLine, '\\n')",
  "(40620, Token.Text.Whitespace, '\\t')",
  "(40621, Token.Text, ';;')",
  "(40623, Token.Text.NewLine, '\\n\\n')",
  "(40625, Token.Text.Whitespace, '      ')",
  "(40631, Token.Text, '-dlpreopen)')",
  "(40642, Token.Text.NewLine, '\\n')",
  "(40643, Token.Text.Whitespace, '\\t')",
  "(40644, Token.Text, 'prev=dlprefiles')",
  "(40659, Token.Text.NewLine, '\\n')",
  "(40660, Token.Text.Whitespace, '\\t')",
  "(40661, Token.Text, 'continue')",
  "(40669, Token.Text.NewLine, '\\n')",
  "(40670, Token.Text.Whitespace, '\\t')",
  "(40671, Token.Text, ';;')",
  "(40673, Token.Text.NewLine, '\\n\\n')",
  "(40675, Token.Text.Whitespace, '      ')",
  "(40681, Token.Text, '-export-dynamic)')",
  "(40697, Token.Text.NewLine, '\\n')",
  "(40698, Token.Text.Whitespace, '\\t')",
  "(40699, Token.Text, 'export_dynamic=yes')",
  "(40717, Token.Text.NewLine, '\\n')",
  "(40718, Token.Text.Whitespace, '\\t')",
  "(40719, Token.Text, 'continue')",
  "(40727, Token.Text.NewLine, '\\n')",
  "(40728, Token.Text.Whitespace, '\\t')",
  "(40729, Token.Text, ';;')",
  "(40731, Token.Text.NewLine, '\\n\\n')",
  "(40733, Token.Text.Whitespace, '      ')",
  "(40739, Token.Text, '-export-symbols')",
  "(40754, Token.Text.Whitespace, ' ')",
  "(40755, Token.Text, '|')",
  "(40756, Token.Text.Whitespace, ' ')",
  "(40757, Token.Text, '-export-symbols-regex)')",
  "(40779, Token.Text.NewLine, '\\n')",
  "(40780, Token.Text.Whitespace, '\\t')",
  "(40781, Token.Text, 'if')",
  "(40783, Token.Text.Whitespace, ' ')",
  "(40784, Token.Text, 'test')",
  "(40788, Token.Text.Whitespace, ' ')",
  "(40789, Token.Text, '-n')",
  "(40791, Token.Text.Whitespace, ' ')",
  "(40792, Token.Literal.String.Double, '\"$export_symbols\"')",
  "(40809, Token.Text.Whitespace, ' ')",
  "(40810, Token.Text, '||')",
  "(40812, Token.Text.Whitespace, ' ')",
  "(40813, Token.Text, 'test')",
  "(40817, Token.Text.Whitespace, ' ')",
  "(40818, Token.Text, '-n')",
  "(40820, Token.Text.Whitespace, ' ')",
  "(40821, Token.Literal.String.Double, '\"$export_symbols_regex\"')",
  "(40844, Token.Text, ';')",
  "(40845, Token.Text.Whitespace, ' ')",
  "(40846, Token.Text, 'then')",
  "(40850, Token.Text.NewLine, '\\n')",
  "(40851, Token.Text.Whitespace, '\\t  ')",
  "(40854, Token.Text, '$echo')",
  "(40859, Token.Text.Whitespace, ' ')",
  "(40860, Token.Literal.String.Double, '\"$modename: more than one -exported-symbols argument is not allowed\"')",
  "(40928, Token.Text.NewLine, '\\n')",
  "(40929, Token.Text.Whitespace, '\\t  ')",
  "(40932, Token.Text, 'exit')",
  "(40936, Token.Text.Whitespace, ' ')",
  "(40937, Token.Text, '$EXIT_FAILURE')",
  "(40950, Token.Text.NewLine, '\\n')",
  "(40951, Token.Text.Whitespace, '\\t')",
  "(40952, Token.Text, 'fi')",
  "(40954, Token.Text.NewLine, '\\n')",
  "(40955, Token.Text.Whitespace, '\\t')",
  "(40956, Token.Text, 'if')",
  "(40958, Token.Text.Whitespace, ' ')",
  "(40959, Token.Text, 'test')",
  "(40963, Token.Text.Whitespace, ' ')",
  "(40964, Token.Literal.String.Double, '\"X$arg\"')",
  "(40971, Token.Text.Whitespace, ' ')",
  "(40972, Token.Text, '=')",
  "(40973, Token.Text.Whitespace, ' ')",
  "(40974, Token.Literal.String.Double, '\"X-export-symbols\"')",
  "(40992, Token.Text, ';')",
  "(40993, Token.Text.Whitespace, ' ')",
  "(40994, Token.Text, 'then')",
  "(40998, Token.Text.NewLine, '\\n')",
  "(40999, Token.Text.Whitespace, '\\t  ')",
  "(41002, Token.Text, 'prev=expsyms')",
  "(41014, Token.Text.NewLine, '\\n')",
  "(41015, Token.Text.Whitespace, '\\t')",
  "(41016, Token.Text, 'else')",
  "(41020, Token.Text.NewLine, '\\n')",
  "(41021, Token.Text.Whitespace, '\\t  ')",
  "(41024, Token.Text, 'prev=expsyms_regex')",
  "(41042, Token.Text.NewLine, '\\n')",
  "(41043, Token.Text.Whitespace, '\\t')",
  "(41044, Token.Text, 'fi')",
  "(41046, Token.Text.NewLine, '\\n')",
  "(41047, Token.Text.Whitespace, '\\t')",
  "(41048, Token.Text, 'continue')",
  "(41056, Token.Text.NewLine, '\\n')",
  "(41057, Token.Text.Whitespace, '\\t')",
  "(41058, Token.Text, ';;')",
  "(41060, Token.Text.NewLine, '\\n\\n')",
  "(41062, Token.Text.Whitespace, '      ')",
  "(41068, Token.Text, '-framework|-arch|-isysroot)')",
  "(41095, Token.Text.NewLine, '\\n')",
  "(41096, Token.Text.Whitespace, '\\t')",
  "(41097, Token.Text, 'case')",
  "(41101, Token.Text.Whitespace, ' ')",
  "(41102, Token.Literal.String.Double, '\" $CC \"')",
  "(41109, Token.Text.Whitespace, ' ')",
  "(41110, Token.Text, 'in')",
  "(41112, Token.Text.NewLine, '\\n')",
  "(41113, Token.Text.Whitespace, '\\t  ')",
  "(41116, Token.Text, '*\"')",
  "(41118, Token.Text.Whitespace, ' ')",
  "(41119, Token.Text, '${arg}')",
  "(41125, Token.Text.Whitespace, ' ')",
  "(41126, Token.Text, '${1}')",
  "(41130, Token.Text.Whitespace, ' ')",
  "(41131, Token.Literal.String.Double, '\"* | *\"')",
  "(41138, Token.Text.Whitespace, ' ')",
  "(41139, Token.Text, '${arg}')",
  "(41145, Token.Text.Whitespace, '\\t')",
  "(41146, Token.Text, '${1}')",
  "(41150, Token.Text.Whitespace, ' ')",
  "(41151, Token.Literal.String.Double, '\"*) \\n\\t\\tprev=darwin_framework_skip ;;\\n\\t  *) compiler_flags=\"')",
  "(41210, Token.Text, '$compiler_flags')",
  "(41225, Token.Text.Whitespace, ' ')",
  "(41226, Token.Text, '$arg\"')",
  "(41231, Token.Text.NewLine, '\\n')",
  "(41232, Token.Text.Whitespace, '\\t     ')",
  "(41238, Token.Text, 'prev=darwin_framework')",
  "(41259, Token.Text.Whitespace, ' ')",
  "(41260, Token.Text, ';;')",
  "(41262, Token.Text.NewLine, '\\n')",
  "(41263, Token.Text.Whitespace, '\\t')",
  "(41264, Token.Text, 'esac')",
  "(41268, Token.Text.NewLine, '\\n')",
  "(41269, Token.Text.Whitespace, '\\t')",
  "(41270, Token.Text, 'compile_command=\"$compile_command')",
  "(41303, Token.Text.Whitespace, ' ')",
  "(41304, Token.Text, '$arg\"')",
  "(41309, Token.Text.NewLine, '\\n')",
  "(41310, Token.Text.Whitespace, '\\t')",
  "(41311, Token.Text, 'finalize_command=\"$finalize_command')",
  "(41346, Token.Text.Whitespace, ' ')",
  "(41347, Token.Text, '$arg\"')",
  "(41352, Token.Text.NewLine, '\\n')",
  "(41353, Token.Text.Whitespace, '\\t')",
  "(41354, Token.Text, 'continue')",
  "(41362, Token.Text.NewLine, '\\n')",
  "(41363, Token.Text.Whitespace, '\\t')",
  "(41364, Token.Text, ';;')",
  "(41366, Token.Text.NewLine, '\\n\\n')",
  "(41368, Token.Text.Whitespace, '      ')",
  "(41374, Token.Text, '-inst-prefix-dir)')",
  "(41391, Token.Text.NewLine, '\\n')",
  "(41392, Token.Text.Whitespace, '\\t')",
  "(41393, Token.Text, 'prev=inst_prefix')",
  "(41409, Token.Text.NewLine, '\\n')",
  "(41410, Token.Text.Whitespace, '\\t')",
  "(41411, Token.Text, 'continue')",
  "(41419, Token.Text.NewLine, '\\n')",
  "(41420, Token.Text.Whitespace, '\\t')",
  "(41421, Token.Text, ';;')",
  "(41423, Token.Text.NewLine, '\\n\\n')",
  "(41425, Token.Text.Whitespace, '      ')",
  "(41431, Token.Comment.Single, '# The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*')",
  "(41495, Token.Text.NewLine, '\\n')",
  "(41496, Token.Text.Whitespace, '      ')",
  "(41502, Token.Comment.Single, '# so, if we see these flags be careful not to treat them like -L')",
  "(41566, Token.Text.NewLine, '\\n')",
  "(41567, Token.Text.Whitespace, '      ')",
  "(41573, Token.Text, '-L[A-Z][A-Z]*:*)')",
  "(41589, Token.Text.NewLine, '\\n')",
  "(41590, Token.Text.Whitespace, '\\t')",
  "(41591, Token.Text, 'case')",
  "(41595, Token.Text.Whitespace, ' ')",
  "(41596, Token.Text, '$with_gcc/$host')",
  "(41611, Token.Text.Whitespace, ' ')",
  "(41612, Token.Text, 'in')",
  "(41614, Token.Text.NewLine, '\\n')",
  "(41615, Token.Text.Whitespace, '\\t')",
  "(41616, Token.Text, 'no/*-*-irix*')",
  "(41628, Token.Text.Whitespace, ' ')",
  "(41629, Token.Text, '|')",
  "(41630, Token.Text.Whitespace, ' ')",
  "(41631, Token.Text, '/*-*-irix*)')",
  "(41642, Token.Text.NewLine, '\\n')",
  "(41643, Token.Text.Whitespace, '\\t  ')",
  "(41646, Token.Text, 'compile_command=\"$compile_command')",
  "(41679, Token.Text.Whitespace, ' ')",
  "(41680, Token.Text, '$arg\"')",
  "(41685, Token.Text.NewLine, '\\n')",
  "(41686, Token.Text.Whitespace, '\\t  ')",
  "(41689, Token.Text, 'finalize_command=\"$finalize_command')",
  "(41724, Token.Text.Whitespace, ' ')",
  "(41725, Token.Text, '$arg\"')",
  "(41730, Token.Text.NewLine, '\\n')",
  "(41731, Token.Text.Whitespace, '\\t  ')",
  "(41734, Token.Text, ';;')",
  "(41736, Token.Text.NewLine, '\\n')",
  "(41737, Token.Text.Whitespace, '\\t')",
  "(41738, Token.Text, 'esac')",
  "(41742, Token.Text.NewLine, '\\n')",
  "(41743, Token.Text.Whitespace, '\\t')",
  "(41744, Token.Text, 'continue')",
  "(41752, Token.Text.NewLine, '\\n')",
  "(41753, Token.Text.Whitespace, '\\t')",
  "(41754, Token.Text, ';;')",
  "(41756, Token.Text.NewLine, '\\n\\n')",
  "(41758, Token.Text.Whitespace, '      ')",
  "(41764, Token.Text, '-L*)')",
  "(41768, Token.Text.NewLine, '\\n')",
  "(41769, Token.Text.Whitespace, '\\t')",
  "(41770, Token.Text, 'dir=`$echo')",
  "(41780, Token.Text.Whitespace, ' ')",
  "(41781, Token.Literal.String.Double, '\"X$arg\"')",
  "(41788, Token.Text.Whitespace, ' ')",
  "(41789, Token.Text, '|')",
  "(41790, Token.Text.Whitespace, ' ')",
  "(41791, Token.Text, '$Xsed')",
  "(41796, Token.Text.Whitespace, ' ')",
  "(41797, Token.Text, '-e')",
  "(41799, Token.Text.Whitespace, ' ')",
  "(41800, Token.Literal.String.Single, \"'s/^-L//'\")",
  "(41809, Token.Text, '`')",
  "(41810, Token.Text.NewLine, '\\n')",
  "(41811, Token.Text.Whitespace, '\\t')",
  "(41812, Token.Comment.Single, '# We need an absolute path.')",
  "(41839, Token.Text.NewLine, '\\n')",
  "(41840, Token.Text.Whitespace, '\\t')",
  "(41841, Token.Text, 'case')",
  "(41845, Token.Text.Whitespace, ' ')",
  "(41846, Token.Text, '$dir')",
  "(41850, Token.Text.Whitespace, ' ')",
  "(41851, Token.Text, 'in')",
  "(41853, Token.Text.NewLine, '\\n')",
  "(41854, Token.Text.Whitespace, '\\t')",
  "(41855, Token.Text, '[\\\\\\\\/]*')",
  "(41861, Token.Text.Whitespace, ' ')",
  "(41862, Token.Text, '|')",
  "(41863, Token.Text.Whitespace, ' ')",
  "(41864, Token.Text, '[A-Za-z]:[\\\\\\\\/]*)')",
  "(41880, Token.Text.Whitespace, ' ')",
  "(41881, Token.Text, ';;')",
  "(41883, Token.Text.NewLine, '\\n')",
  "(41884, Token.Text.Whitespace, '\\t')",
  "(41885, Token.Text, '*)')",
  "(41887, Token.Text.NewLine, '\\n')",
  "(41888, Token.Text.Whitespace, '\\t  ')",
  "(41891, Token.Text, 'absdir=`cd')",
  "(41901, Token.Text.Whitespace, ' ')",
  "(41902, Token.Literal.String.Double, '\"$dir\"')",
  "(41908, Token.Text.Whitespace, ' ')",
  "(41909, Token.Text, '&&')",
  "(41911, Token.Text.Whitespace, ' ')",
  "(41912, Token.Text, 'pwd`')",
  "(41916, Token.Text.NewLine, '\\n')",
  "(41917, Token.Text.Whitespace, '\\t  ')",
  "(41920, Token.Text, 'if')",
  "(41922, Token.Text.Whitespace, ' ')",
  "(41923, Token.Text, 'test')",
  "(41927, Token.Text.Whitespace, ' ')",
  "(41928, Token.Text, '-z')",
  "(41930, Token.Text.Whitespace, ' ')",
  "(41931, Token.Literal.String.Double, '\"$absdir\"')",
  "(41940, Token.Text, ';')",
  "(41941, Token.Text.Whitespace, ' ')",
  "(41942, Token.Text, 'then')",
  "(41946, Token.Text.NewLine, '\\n')",
  "(41947, Token.Text.Whitespace, '\\t    ')",
  "(41952, Token.Text, '$echo')",
  "(41957, Token.Text.Whitespace, ' ')",
  "(41958, Token.Literal.String.Double, '\"$modename: cannot determine absolute directory name of \\\\`$dir\\'\"')",
  "(42022, Token.Text.Whitespace, ' ')",
  "(42023, Token.Text, '1>&2')",
  "(42027, Token.Text.NewLine, '\\n')",
  "(42028, Token.Text.Whitespace, '\\t    ')",
  "(42033, Token.Text, 'absdir=\"$dir\"')",
  "(42046, Token.Text.NewLine, '\\n')",
  "(42047, Token.Text.Whitespace, '\\t    ')",
  "(42052, Token.Text, 'notinst_path=\"$notinst_path')",
  "(42079, Token.Text.Whitespace, ' ')",
  "(42080, Token.Text, '$dir\"')",
  "(42085, Token.Text.NewLine, '\\n')",
  "(42086, Token.Text.Whitespace, '\\t  ')",
  "(42089, Token.Text, 'fi')",
  "(42091, Token.Text.NewLine, '\\n')",
  "(42092, Token.Text.Whitespace, '\\t  ')",
  "(42095, Token.Text, 'dir=\"$absdir\"')",
  "(42108, Token.Text.NewLine, '\\n')",
  "(42109, Token.Text.Whitespace, '\\t  ')",
  "(42112, Token.Text, ';;')",
  "(42114, Token.Text.NewLine, '\\n')",
  "(42115, Token.Text.Whitespace, '\\t')",
  "(42116, Token.Text, 'esac')",
  "(42120, Token.Text.NewLine, '\\n')",
  "(42121, Token.Text.Whitespace, '\\t')",
  "(42122, Token.Text, 'case')",
  "(42126, Token.Text.Whitespace, ' ')",
  "(42127, Token.Literal.String.Double, '\"$deplibs \"')",
  "(42138, Token.Text.Whitespace, ' ')",
  "(42139, Token.Text, 'in')",
  "(42141, Token.Text.NewLine, '\\n')",
  "(42142, Token.Text.Whitespace, '\\t')",
  "(42143, Token.Text, '*\"')",
  "(42145, Token.Text.Whitespace, ' ')",
  "(42146, Token.Text, '-L$dir')",
  "(42152, Token.Text.Whitespace, ' ')",
  "(42153, Token.Literal.String.Double, '\"*) ;;\\n\\t*)\\n\\t  deplibs=\"')",
  "(42176, Token.Text, '$deplibs')",
  "(42184, Token.Text.Whitespace, ' ')",
  "(42185, Token.Text, '-L$dir\"')",
  "(42192, Token.Text.NewLine, '\\n')",
  "(42193, Token.Text.Whitespace, '\\t  ')",
  "(42196, Token.Text, 'lib_search_path=\"$lib_search_path')",
  "(42229, Token.Text.Whitespace, ' ')",
  "(42230, Token.Text, '$dir\"')",
  "(42235, Token.Text.NewLine, '\\n')",
  "(42236, Token.Text.Whitespace, '\\t  ')",
  "(42239, Token.Text, ';;')",
  "(42241, Token.Text.NewLine, '\\n')",
  "(42242, Token.Text.Whitespace, '\\t')",
  "(42243, Token.Text, 'esac')",
  "(42247, Token.Text.NewLine, '\\n')",
  "(42248, Token.Text.Whitespace, '\\t')",
  "(42249, Token.Text, 'case')",
  "(42253, Token.Text.Whitespace, ' ')",
  "(42254, Token.Text, '$host')",
  "(42259, Token.Text.Whitespace, ' ')",
  "(42260, Token.Text, 'in')",
  "(42262, Token.Text.NewLine, '\\n')",
  "(42263, Token.Text.Whitespace, '\\t')",
  "(42264, Token.Text, '*-*-cygwin*')",
  "(42275, Token.Text.Whitespace, ' ')",
  "(42276, Token.Text, '|')",
  "(42277, Token.Text.Whitespace, ' ')",
  "(42278, Token.Text, '*-*-mingw*')",
  "(42288, Token.Text.Whitespace, ' ')",
  "(42289, Token.Text, '|')",
  "(42290, Token.Text.Whitespace, ' ')",
  "(42291, Token.Text, '*-*-pw32*')",
  "(42300, Token.Text.Whitespace, ' ')",
  "(42301, Token.Text, '|')",
  "(42302, Token.Text.Whitespace, ' ')",
  "(42303, Token.Text, '*-*-os2*)')",
  "(42312, Token.Text.NewLine, '\\n')",
  "(42313, Token.Text.Whitespace, '\\t  ')",
  "(42316, Token.Text, 'testbindir=`$echo')",
  "(42333, Token.Text.Whitespace, ' ')",
  "(42334, Token.Literal.String.Double, '\"X$dir\"')",
  "(42341, Token.Text.Whitespace, ' ')",
  "(42342, Token.Text, '|')",
  "(42343, Token.Text.Whitespace, ' ')",
  "(42344, Token.Text, '$Xsed')",
  "(42349, Token.Text.Whitespace, ' ')",
  "(42350, Token.Text, '-e')",
  "(42352, Token.Text.Whitespace, ' ')",
  "(42353, Token.Literal.String.Single, \"'s*/lib$*/bin*'\")",
  "(42368, Token.Text, '`')",
  "(42369, Token.Text.NewLine, '\\n')",
  "(42370, Token.Text.Whitespace, '\\t  ')",
  "(42373, Token.Text, 'case')",
  "(42377, Token.Text.Whitespace, ' ')",
  "(42378, Token.Text, ':$dllsearchpath:')",
  "(42394, Token.Text.Whitespace, ' ')",
  "(42395, Token.Text, 'in')",
  "(42397, Token.Text.NewLine, '\\n')",
  "(42398, Token.Text.Whitespace, '\\t  ')",
  "(42401, Token.Text, '*\":$dir:\"*)')",
  "(42412, Token.Text.Whitespace, ' ')",
  "(42413, Token.Text, ';;')",
  "(42415, Token.Text.NewLine, '\\n')",
  "(42416, Token.Text.Whitespace, '\\t  ')",
  "(42419, Token.Text, '*)')",
  "(42421, Token.Text.Whitespace, ' ')",
  "(42422, Token.Text, 'dllsearchpath=\"$dllsearchpath:$dir\";;')",
  "(42459, Token.Text.NewLine, '\\n')",
  "(42460, Token.Text.Whitespace, '\\t  ')",
  "(42463, Token.Text, 'esac')",
  "(42467, Token.Text.NewLine, '\\n')",
  "(42468, Token.Text.Whitespace, '\\t  ')",
  "(42471, Token.Text, 'case')",
  "(42475, Token.Text.Whitespace, ' ')",
  "(42476, Token.Text, ':$dllsearchpath:')",
  "(42492, Token.Text.Whitespace, ' ')",
  "(42493, Token.Text, 'in')",
  "(42495, Token.Text.NewLine, '\\n')",
  "(42496, Token.Text.Whitespace, '\\t  ')",
  "(42499, Token.Text, '*\":$testbindir:\"*)')",
  "(42517, Token.Text.Whitespace, ' ')",
  "(42518, Token.Text, ';;')",
  "(42520, Token.Text.NewLine, '\\n')",
  "(42521, Token.Text.Whitespace, '\\t  ')",
  "(42524, Token.Text, '*)')",
  "(42526, Token.Text.Whitespace, ' ')",
  "(42527, Token.Text, 'dllsearchpath=\"$dllsearchpath:$testbindir\";;')",
  "(42571, Token.Text.NewLine, '\\n')",
  "(42572, Token.Text.Whitespace, '\\t  ')",
  "(42575, Token.Text, 'esac')",
  "(42579, Token.Text.NewLine, '\\n')",
  "(42580, Token.Text.Whitespace, '\\t  ')",
  "(42583, Token.Text, ';;')",
  "(42585, Token.Text.NewLine, '\\n')",
  "(42586, Token.Text.Whitespace, '\\t')",
  "(42587, Token.Text, 'esac')",
  "(42591, Token.Text.NewLine, '\\n')",
  "(42592, Token.Text.Whitespace, '\\t')",
  "(42593, Token.Text, 'continue')",
  "(42601, Token.Text.NewLine, '\\n')",
  "(42602, Token.Text.Whitespace, '\\t')",
  "(42603, Token.Text, ';;')",
  "(42605, Token.Text.NewLine, '\\n\\n')",
  "(42607, Token.Text.Whitespace, '      ')",
  "(42613, Token.Text, '-l*)')",
  "(42617, Token.Text.NewLine, '\\n')",
  "(42618, Token.Text.Whitespace, '\\t')",
  "(42619, Token.Text, 'if')",
  "(42621, Token.Text.Whitespace, ' ')",
  "(42622, Token.Text, 'test')",
  "(42626, Token.Text.Whitespace, ' ')",
  "(42627, Token.Literal.String.Double, '\"X$arg\"')",
  "(42634, Token.Text.Whitespace, ' ')",
  "(42635, Token.Text, '=')",
  "(42636, Token.Text.Whitespace, ' ')",
  "(42637, Token.Literal.String.Double, '\"X-lc\"')",
  "(42643, Token.Text.Whitespace, ' ')",
  "(42644, Token.Text, '||')",
  "(42646, Token.Text.Whitespace, ' ')",
  "(42647, Token.Text, 'test')",
  "(42651, Token.Text.Whitespace, ' ')",
  "(42652, Token.Literal.String.Double, '\"X$arg\"')",
  "(42659, Token.Text.Whitespace, ' ')",
  "(42660, Token.Text, '=')",
  "(42661, Token.Text.Whitespace, ' ')",
  "(42662, Token.Literal.String.Double, '\"X-lm\"')",
  "(42668, Token.Text, ';')",
  "(42669, Token.Text.Whitespace, ' ')",
  "(42670, Token.Text, 'then')",
  "(42674, Token.Text.NewLine, '\\n')",
  "(42675, Token.Text.Whitespace, '\\t  ')",
  "(42678, Token.Text, 'case')",
  "(42682, Token.Text.Whitespace, ' ')",
  "(42683, Token.Text, '$host')",
  "(42688, Token.Text.Whitespace, ' ')",
  "(42689, Token.Text, 'in')",
  "(42691, Token.Text.NewLine, '\\n')",
  "(42692, Token.Text.Whitespace, '\\t  ')",
  "(42695, Token.Text, '*-*-cygwin*')",
  "(42706, Token.Text.Whitespace, ' ')",
  "(42707, Token.Text, '|')",
  "(42708, Token.Text.Whitespace, ' ')",
  "(42709, Token.Text, '*-*-mingw*')",
  "(42719, Token.Text.Whitespace, ' ')",
  "(42720, Token.Text, '|')",
  "(42721, Token.Text.Whitespace, ' ')",
  "(42722, Token.Text, '*-*-pw32*')",
  "(42731, Token.Text.Whitespace, ' ')",
  "(42732, Token.Text, '|')",
  "(42733, Token.Text.Whitespace, ' ')",
  "(42734, Token.Text, '*-*-beos*)')",
  "(42744, Token.Text.NewLine, '\\n')",
  "(42745, Token.Text.Whitespace, '\\t    ')",
  "(42750, Token.Comment.Single, \"# These systems don't actually have a C or math library (as such)\")",
  "(42815, Token.Text.NewLine, '\\n')",
  "(42816, Token.Text.Whitespace, '\\t    ')",
  "(42821, Token.Text, 'continue')",
  "(42829, Token.Text.NewLine, '\\n')",
  "(42830, Token.Text.Whitespace, '\\t    ')",
  "(42835, Token.Text, ';;')",
  "(42837, Token.Text.NewLine, '\\n')",
  "(42838, Token.Text.Whitespace, '\\t  ')",
  "(42841, Token.Text, '*-*-os2*)')",
  "(42850, Token.Text.NewLine, '\\n')",
  "(42851, Token.Text.Whitespace, '\\t    ')",
  "(42856, Token.Comment.Single, \"# These systems don't actually have a C library (as such)\")",
  "(42913, Token.Text.NewLine, '\\n')",
  "(42914, Token.Text.Whitespace, '\\t    ')",
  "(42919, Token.Text, 'test')",
  "(42923, Token.Text.Whitespace, ' ')",
  "(42924, Token.Literal.String.Double, '\"X$arg\"')",
  "(42931, Token.Text.Whitespace, ' ')",
  "(42932, Token.Text, '=')",
  "(42933, Token.Text.Whitespace, ' ')",
  "(42934, Token.Literal.String.Double, '\"X-lc\"')",
  "(42940, Token.Text.Whitespace, ' ')",
  "(42941, Token.Text, '&&')",
  "(42943, Token.Text.Whitespace, ' ')",
  "(42944, Token.Text, 'continue')",
  "(42952, Token.Text.NewLine, '\\n')",
  "(42953, Token.Text.Whitespace, '\\t    ')",
  "(42958, Token.Text, ';;')",
  "(42960, Token.Text.NewLine, '\\n')",
  "(42961, Token.Text.Whitespace, '\\t  ')",
  "(42964, Token.Text, '*-*-openbsd*')",
  "(42976, Token.Text.Whitespace, ' ')",
  "(42977, Token.Text, '|')",
  "(42978, Token.Text.Whitespace, ' ')",
  "(42979, Token.Text, '*-*-freebsd*')",
  "(42991, Token.Text.Whitespace, ' ')",
  "(42992, Token.Text, '|')",
  "(42993, Token.Text.Whitespace, ' ')",
  "(42994, Token.Text, '*-*-dragonfly*)')",
  "(43009, Token.Text.NewLine, '\\n')",
  "(43010, Token.Text.Whitespace, '\\t    ')",
  "(43015, Token.Comment.Single, '# Do not include libc due to us having libc/libc_r.')",
  "(43066, Token.Text.NewLine, '\\n')",
  "(43067, Token.Text.Whitespace, '\\t    ')",
  "(43072, Token.Text, 'test')",
  "(43076, Token.Text.Whitespace, ' ')",
  "(43077, Token.Literal.String.Double, '\"X$arg\"')",
  "(43084, Token.Text.Whitespace, ' ')",
  "(43085, Token.Text, '=')",
  "(43086, Token.Text.Whitespace, ' ')",
  "(43087, Token.Literal.String.Double, '\"X-lc\"')",
  "(43093, Token.Text.Whitespace, ' ')",
  "(43094, Token.Text, '&&')",
  "(43096, Token.Text.Whitespace, ' ')",
  "(43097, Token.Text, 'continue')",
  "(43105, Token.Text.NewLine, '\\n')",
  "(43106, Token.Text.Whitespace, '\\t    ')",
  "(43111, Token.Text, ';;')",
  "(43113, Token.Text.NewLine, '\\n')",
  "(43114, Token.Text.Whitespace, '\\t  ')",
  "(43117, Token.Text, '*-*-rhapsody*')",
  "(43130, Token.Text.Whitespace, ' ')",
  "(43131, Token.Text, '|')",
  "(43132, Token.Text.Whitespace, ' ')",
  "(43133, Token.Text, '*-*-darwin1.[012])')",
  "(43151, Token.Text.NewLine, '\\n')",
  "(43152, Token.Text.Whitespace, '\\t    ')",
  "(43157, Token.Comment.Single, '# Rhapsody C and math libraries are in the System framework')",
  "(43216, Token.Text.NewLine, '\\n')",
  "(43217, Token.Text.Whitespace, '\\t    ')",
  "(43222, Token.Text, 'deplibs=\"$deplibs')",
  "(43239, Token.Text.Whitespace, ' ')",
  "(43240, Token.Text, '-framework')",
  "(43250, Token.Text.Whitespace, ' ')",
  "(43251, Token.Text, 'System\"')",
  "(43258, Token.Text.NewLine, '\\n')",
  "(43259, Token.Text.Whitespace, '\\t    ')",
  "(43264, Token.Text, 'continue')",
  "(43272, Token.Text.NewLine, '\\n')",
  "(43273, Token.Text.Whitespace, '\\t    ')",
  "(43278, Token.Text, ';;')",
  "(43280, Token.Text.NewLine, '\\n')",
  "(43281, Token.Text.Whitespace, '\\t  ')",
  "(43284, Token.Text, '*-*-sco3.2v5*')",
  "(43297, Token.Text.Whitespace, ' ')",
  "(43298, Token.Text, '|')",
  "(43299, Token.Text.Whitespace, ' ')",
  "(43300, Token.Text, '*-*-sco5v6*)')",
  "(43312, Token.Text.NewLine, '\\n')",
  "(43313, Token.Text.Whitespace, '\\t    ')",
  "(43318, Token.Comment.Single, '# Causes problems with __ctype')",
  "(43348, Token.Text.NewLine, '\\n')",
  "(43349, Token.Text.Whitespace, '\\t    ')",
  "(43354, Token.Text, 'test')",
  "(43358, Token.Text.Whitespace, ' ')",
  "(43359, Token.Literal.String.Double, '\"X$arg\"')",
  "(43366, Token.Text.Whitespace, ' ')",
  "(43367, Token.Text, '=')",
  "(43368, Token.Text.Whitespace, ' ')",
  "(43369, Token.Literal.String.Double, '\"X-lc\"')",
  "(43375, Token.Text.Whitespace, ' ')",
  "(43376, Token.Text, '&&')",
  "(43378, Token.Text.Whitespace, ' ')",
  "(43379, Token.Text, 'continue')",
  "(43387, Token.Text.NewLine, '\\n')",
  "(43388, Token.Text.Whitespace, '\\t    ')",
  "(43393, Token.Text, ';;')",
  "(43395, Token.Text.NewLine, '\\n')",
  "(43396, Token.Text.Whitespace, '\\t  ')",
  "(43399, Token.Text, '*-*-sysv4.2uw2*')",
  "(43414, Token.Text.Whitespace, ' ')",
  "(43415, Token.Text, '|')",
  "(43416, Token.Text.Whitespace, ' ')",
  "(43417, Token.Text, '*-*-sysv5*')",
  "(43427, Token.Text.Whitespace, ' ')",
  "(43428, Token.Text, '|')",
  "(43429, Token.Text.Whitespace, ' ')",
  "(43430, Token.Text, '*-*-unixware*')",
  "(43443, Token.Text.Whitespace, ' ')",
  "(43444, Token.Text, '|')",
  "(43445, Token.Text.Whitespace, ' ')",
  "(43446, Token.Text, '*-*-OpenUNIX*)')",
  "(43460, Token.Text.NewLine, '\\n')",
  "(43461, Token.Text.Whitespace, '\\t    ')",
  "(43466, Token.Comment.Single, '# Compiler inserts libc in the correct place for threads to work')",
  "(43530, Token.Text.NewLine, '\\n')",
  "(43531, Token.Text.Whitespace, '\\t    ')",
  "(43536, Token.Text, 'test')",
  "(43540, Token.Text.Whitespace, ' ')",
  "(43541, Token.Literal.String.Double, '\"X$arg\"')",
  "(43548, Token.Text.Whitespace, ' ')",
  "(43549, Token.Text, '=')",
  "(43550, Token.Text.Whitespace, ' ')",
  "(43551, Token.Literal.String.Double, '\"X-lc\"')",
  "(43557, Token.Text.Whitespace, ' ')",
  "(43558, Token.Text, '&&')",
  "(43560, Token.Text.Whitespace, ' ')",
  "(43561, Token.Text, 'continue')",
  "(43569, Token.Text.NewLine, '\\n')",
  "(43570, Token.Text.Whitespace, '\\t    ')",
  "(43575, Token.Text, ';;')",
  "(43577, Token.Text.NewLine, '\\n')",
  "(43578, Token.Text.Whitespace, '\\t  ')",
  "(43581, Token.Text, 'esac')",
  "(43585, Token.Text.NewLine, '\\n')",
  "(43586, Token.Text.Whitespace, '\\t')",
  "(43587, Token.Text, 'elif')",
  "(43591, Token.Text.Whitespace, ' ')",
  "(43592, Token.Text, 'test')",
  "(43596, Token.Text.Whitespace, ' ')",
  "(43597, Token.Literal.String.Double, '\"X$arg\"')",
  "(43604, Token.Text.Whitespace, ' ')",
  "(43605, Token.Text, '=')",
  "(43606, Token.Text.Whitespace, ' ')",
  "(43607, Token.Literal.String.Double, '\"X-lc_r\"')",
  "(43615, Token.Text, ';')",
  "(43616, Token.Text.Whitespace, ' ')",
  "(43617, Token.Text, 'then')",
  "(43621, Token.Text.NewLine, '\\n')",
  "(43622, Token.Text.Whitespace, '\\t ')",
  "(43624, Token.Text, 'case')",
  "(43628, Token.Text.Whitespace, ' ')",
  "(43629, Token.Text, '$host')",
  "(43634, Token.Text.Whitespace, ' ')",
  "(43635, Token.Text, 'in')",
  "(43637, Token.Text.NewLine, '\\n')",
  "(43638, Token.Text.Whitespace, '\\t ')",
  "(43640, Token.Text, '*-*-openbsd*')",
  "(43652, Token.Text.Whitespace, ' ')",
  "(43653, Token.Text, '|')",
  "(43654, Token.Text.Whitespace, ' ')",
  "(43655, Token.Text, '*-*-freebsd*')",
  "(43667, Token.Text.Whitespace, ' ')",
  "(43668, Token.Text, '|')",
  "(43669, Token.Text.Whitespace, ' ')",
  "(43670, Token.Text, '*-*-dragonfly*)')",
  "(43685, Token.Text.NewLine, '\\n')",
  "(43686, Token.Text.Whitespace, '\\t   ')",
  "(43690, Token.Comment.Single, '# Do not include libc_r directly, use -pthread flag.')",
  "(43742, Token.Text.NewLine, '\\n')",
  "(43743, Token.Text.Whitespace, '\\t   ')",
  "(43747, Token.Text, 'continue')",
  "(43755, Token.Text.NewLine, '\\n')",
  "(43756, Token.Text.Whitespace, '\\t   ')",
  "(43760, Token.Text, ';;')",
  "(43762, Token.Text.NewLine, '\\n')",
  "(43763, Token.Text.Whitespace, '\\t ')",
  "(43765, Token.Text, 'esac')",
  "(43769, Token.Text.NewLine, '\\n')",
  "(43770, Token.Text.Whitespace, '\\t')",
  "(43771, Token.Text, 'fi')",
  "(43773, Token.Text.NewLine, '\\n')",
  "(43774, Token.Text.Whitespace, '\\t')",
  "(43775, Token.Text, 'deplibs=\"$deplibs')",
  "(43792, Token.Text.Whitespace, ' ')",
  "(43793, Token.Text, '$arg\"')",
  "(43798, Token.Text.NewLine, '\\n')",
  "(43799, Token.Text.Whitespace, '\\t')",
  "(43800, Token.Text, 'continue')",
  "(43808, Token.Text.NewLine, '\\n')",
  "(43809, Token.Text.Whitespace, '\\t')",
  "(43810, Token.Text, ';;')",
  "(43812, Token.Text.NewLine, '\\n\\n')",
  "(43814, Token.Text.Whitespace, '      ')",
  "(43820, Token.Comment.Single, '# Tru64 UNIX uses -model [arg] to determine the layout of C++')",
  "(43881, Token.Text.NewLine, '\\n')",
  "(43882, Token.Text.Whitespace, '      ')",
  "(43888, Token.Comment.Single, '# classes, name mangling, and exception handling.')",
  "(43937, Token.Text.NewLine, '\\n')",
  "(43938, Token.Text.Whitespace, '      ')",
  "(43944, Token.Text, '-model)')",
  "(43951, Token.Text.NewLine, '\\n')",
  "(43952, Token.Text.Whitespace, '\\t')",
  "(43953, Token.Text, 'compile_command=\"$compile_command')",
  "(43986, Token.Text.Whitespace, ' ')",
  "(43987, Token.Text, '$arg\"')",
  "(43992, Token.Text.NewLine, '\\n')",
  "(43993, Token.Text.Whitespace, '\\t')",
  "(43994, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(44025, Token.Text.Whitespace, ' ')",
  "(44026, Token.Text, '$arg\"')",
  "(44031, Token.Text.NewLine, '\\n')",
  "(44032, Token.Text.Whitespace, '\\t')",
  "(44033, Token.Text, 'finalize_command=\"$finalize_command')",
  "(44068, Token.Text.Whitespace, ' ')",
  "(44069, Token.Text, '$arg\"')",
  "(44074, Token.Text.NewLine, '\\n')",
  "(44075, Token.Text.Whitespace, '\\t')",
  "(44076, Token.Text, 'prev=xcompiler')",
  "(44090, Token.Text.NewLine, '\\n')",
  "(44091, Token.Text.Whitespace, '\\t')",
  "(44092, Token.Text, 'continue')",
  "(44100, Token.Text.NewLine, '\\n')",
  "(44101, Token.Text.Whitespace, '\\t')",
  "(44102, Token.Text, ';;')",
  "(44104, Token.Text.NewLine, '\\n\\n')",
  "(44106, Token.Text.Whitespace, '     ')",
  "(44111, Token.Text, '-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)')",
  "(44176, Token.Text.NewLine, '\\n')",
  "(44177, Token.Text.Whitespace, '\\t')",
  "(44178, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(44209, Token.Text.Whitespace, ' ')",
  "(44210, Token.Text, '$arg\"')",
  "(44215, Token.Text.NewLine, '\\n')",
  "(44216, Token.Text.Whitespace, '\\t')",
  "(44217, Token.Text, 'compile_command=\"$compile_command')",
  "(44250, Token.Text.Whitespace, ' ')",
  "(44251, Token.Text, '$arg\"')",
  "(44256, Token.Text.NewLine, '\\n')",
  "(44257, Token.Text.Whitespace, '\\t')",
  "(44258, Token.Text, 'finalize_command=\"$finalize_command')",
  "(44293, Token.Text.Whitespace, ' ')",
  "(44294, Token.Text, '$arg\"')",
  "(44299, Token.Text.NewLine, '\\n')",
  "(44300, Token.Text.Whitespace, '\\t')",
  "(44301, Token.Text, 'continue')",
  "(44309, Token.Text.NewLine, '\\n')",
  "(44310, Token.Text.Whitespace, '\\t')",
  "(44311, Token.Text, ';;')",
  "(44313, Token.Text.NewLine, '\\n\\n')",
  "(44315, Token.Text.Whitespace, '      ')",
  "(44321, Token.Text, '-module)')",
  "(44329, Token.Text.NewLine, '\\n')",
  "(44330, Token.Text.Whitespace, '\\t')",
  "(44331, Token.Text, 'module=yes')",
  "(44341, Token.Text.NewLine, '\\n')",
  "(44342, Token.Text.Whitespace, '\\t')",
  "(44343, Token.Text, 'continue')",
  "(44351, Token.Text.NewLine, '\\n')",
  "(44352, Token.Text.Whitespace, '\\t')",
  "(44353, Token.Text, ';;')",
  "(44355, Token.Text.NewLine, '\\n\\n')",
  "(44357, Token.Text.Whitespace, '      ')",
  "(44363, Token.Comment.Single, '# -64, -mips[0-9] enable 64-bit mode on the SGI compiler')",
  "(44419, Token.Text.NewLine, '\\n')",
  "(44420, Token.Text.Whitespace, '      ')",
  "(44426, Token.Comment.Single, '# -r[0-9][0-9]* specifies the processor on the SGI compiler')",
  "(44485, Token.Text.NewLine, '\\n')",
  "(44486, Token.Text.Whitespace, '      ')",
  "(44492, Token.Comment.Single, '# -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler')",
  "(44553, Token.Text.NewLine, '\\n')",
  "(44554, Token.Text.Whitespace, '      ')",
  "(44560, Token.Comment.Single, '# +DA*, +DD* enable 64-bit mode on the HP compiler')",
  "(44610, Token.Text.NewLine, '\\n')",
  "(44611, Token.Text.Whitespace, '      ')",
  "(44617, Token.Comment.Single, '# -q* pass through compiler args for the IBM compiler')",
  "(44670, Token.Text.NewLine, '\\n')",
  "(44671, Token.Text.Whitespace, '      ')",
  "(44677, Token.Comment.Single, '# -m* pass through architecture-specific compiler args for GCC')",
  "(44739, Token.Text.NewLine, '\\n')",
  "(44740, Token.Text.Whitespace, '      ')",
  "(44746, Token.Comment.Single, '# -m*, -t[45]*, -txscale* pass through architecture-specific')",
  "(44806, Token.Text.NewLine, '\\n')",
  "(44807, Token.Text.Whitespace, '      ')",
  "(44813, Token.Comment.Single, '# compiler args for GCC')",
  "(44836, Token.Text.NewLine, '\\n')",
  "(44837, Token.Text.Whitespace, '      ')",
  "(44843, Token.Comment.Single, '# -pg pass through profiling flag for GCC')",
  "(44884, Token.Text.NewLine, '\\n')",
  "(44885, Token.Text.Whitespace, '      ')",
  "(44891, Token.Comment.Single, '# @file GCC response files')",
  "(44917, Token.Text.NewLine, '\\n')",
  "(44918, Token.Text.Whitespace, '      ')",
  "(44924, Token.Text, '-64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*|-pg|')",
  "(44995, Token.Text.Whitespace, ' ')",
  "(44996, Token.Text, '\\\\')",
  "(44997, Token.Text.NewLine, '\\n')",
  "(44998, Token.Text.Whitespace, '      ')",
  "(45004, Token.Text, '-t[45]*|-txscale*|@*)')",
  "(45025, Token.Text.NewLine, '\\n\\n')",
  "(45027, Token.Text.Whitespace, '\\t')",
  "(45028, Token.Comment.Single, '# Unknown arguments in both finalize_command and compile_command need')",
  "(45097, Token.Text.NewLine, '\\n')",
  "(45098, Token.Text.Whitespace, '\\t')",
  "(45099, Token.Comment.Single, '# to be aesthetically quoted because they are evaled later.')",
  "(45158, Token.Text.NewLine, '\\n')",
  "(45159, Token.Text.Whitespace, '\\t')",
  "(45160, Token.Text, 'arg=`$echo')",
  "(45170, Token.Text.Whitespace, ' ')",
  "(45171, Token.Literal.String.Double, '\"X$arg\"')",
  "(45178, Token.Text.Whitespace, ' ')",
  "(45179, Token.Text, '|')",
  "(45180, Token.Text.Whitespace, ' ')",
  "(45181, Token.Text, '$Xsed')",
  "(45186, Token.Text.Whitespace, ' ')",
  "(45187, Token.Text, '-e')",
  "(45189, Token.Text.Whitespace, ' ')",
  "(45190, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(45208, Token.Text, '`')",
  "(45209, Token.Text.NewLine, '\\n')",
  "(45210, Token.Text.Whitespace, '\\t')",
  "(45211, Token.Text, 'case')",
  "(45215, Token.Text.Whitespace, ' ')",
  "(45216, Token.Text, '$arg')",
  "(45220, Token.Text.Whitespace, ' ')",
  "(45221, Token.Text, 'in')",
  "(45223, Token.Text.NewLine, '\\n')",
  "(45224, Token.Text.Whitespace, '\\t')",
  "(45225, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(45260, Token.Text.Whitespace, ' ')",
  "(45261, Token.Text, '\\\\')",
  "(45262, Token.Text.Whitespace, '\\t')",
  "(45263, Token.Text, ']*|*]*|\"\")')",
  "(45273, Token.Text.NewLine, '\\n')",
  "(45274, Token.Text.Whitespace, '\\t  ')",
  "(45277, Token.Text, 'arg=\"\\\\\"$arg\\\\\"\"')",
  "(45291, Token.Text.NewLine, '\\n')",
  "(45292, Token.Text.Whitespace, '\\t  ')",
  "(45295, Token.Text, ';;')",
  "(45297, Token.Text.NewLine, '\\n')",
  "(45298, Token.Text.Whitespace, '\\t')",
  "(45299, Token.Text, 'esac')",
  "(45303, Token.Text.NewLine, '\\n')",
  "(45304, Token.Text.Whitespace, '        ')",
  "(45312, Token.Text, 'compile_command=\"$compile_command')",
  "(45345, Token.Text.Whitespace, ' ')",
  "(45346, Token.Text, '$arg\"')",
  "(45351, Token.Text.NewLine, '\\n')",
  "(45352, Token.Text.Whitespace, '        ')",
  "(45360, Token.Text, 'finalize_command=\"$finalize_command')",
  "(45395, Token.Text.Whitespace, ' ')",
  "(45396, Token.Text, '$arg\"')",
  "(45401, Token.Text.NewLine, '\\n')",
  "(45402, Token.Text.Whitespace, '        ')",
  "(45410, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(45441, Token.Text.Whitespace, ' ')",
  "(45442, Token.Text, '$arg\"')",
  "(45447, Token.Text.NewLine, '\\n')",
  "(45448, Token.Text.Whitespace, '        ')",
  "(45456, Token.Text, 'continue')",
  "(45464, Token.Text.NewLine, '\\n')",
  "(45465, Token.Text.Whitespace, '        ')",
  "(45473, Token.Text, ';;')",
  "(45475, Token.Text.NewLine, '\\n\\n')",
  "(45477, Token.Text.Whitespace, '      ')",
  "(45483, Token.Text, '-shrext)')",
  "(45491, Token.Text.NewLine, '\\n')",
  "(45492, Token.Text.Whitespace, '\\t')",
  "(45493, Token.Text, 'prev=shrext')",
  "(45504, Token.Text.NewLine, '\\n')",
  "(45505, Token.Text.Whitespace, '\\t')",
  "(45506, Token.Text, 'continue')",
  "(45514, Token.Text.NewLine, '\\n')",
  "(45515, Token.Text.Whitespace, '\\t')",
  "(45516, Token.Text, ';;')",
  "(45518, Token.Text.NewLine, '\\n\\n')",
  "(45520, Token.Text.Whitespace, '      ')",
  "(45526, Token.Text, '-no-fast-install)')",
  "(45543, Token.Text.NewLine, '\\n')",
  "(45544, Token.Text.Whitespace, '\\t')",
  "(45545, Token.Text, 'fast_install=no')",
  "(45560, Token.Text.NewLine, '\\n')",
  "(45561, Token.Text.Whitespace, '\\t')",
  "(45562, Token.Text, 'continue')",
  "(45570, Token.Text.NewLine, '\\n')",
  "(45571, Token.Text.Whitespace, '\\t')",
  "(45572, Token.Text, ';;')",
  "(45574, Token.Text.NewLine, '\\n\\n')",
  "(45576, Token.Text.Whitespace, '      ')",
  "(45582, Token.Text, '-no-install)')",
  "(45594, Token.Text.NewLine, '\\n')",
  "(45595, Token.Text.Whitespace, '\\t')",
  "(45596, Token.Text, 'case')",
  "(45600, Token.Text.Whitespace, ' ')",
  "(45601, Token.Text, '$host')",
  "(45606, Token.Text.Whitespace, ' ')",
  "(45607, Token.Text, 'in')",
  "(45609, Token.Text.NewLine, '\\n')",
  "(45610, Token.Text.Whitespace, '\\t')",
  "(45611, Token.Text, '*-*-cygwin*')",
  "(45622, Token.Text.Whitespace, ' ')",
  "(45623, Token.Text, '|')",
  "(45624, Token.Text.Whitespace, ' ')",
  "(45625, Token.Text, '*-*-mingw*')",
  "(45635, Token.Text.Whitespace, ' ')",
  "(45636, Token.Text, '|')",
  "(45637, Token.Text.Whitespace, ' ')",
  "(45638, Token.Text, '*-*-pw32*')",
  "(45647, Token.Text.Whitespace, ' ')",
  "(45648, Token.Text, '|')",
  "(45649, Token.Text.Whitespace, ' ')",
  "(45650, Token.Text, '*-*-os2*)')",
  "(45659, Token.Text.NewLine, '\\n')",
  "(45660, Token.Text.Whitespace, '\\t  ')",
  "(45663, Token.Comment.Single, '# The PATH hackery in wrapper scripts is required on Windows')",
  "(45723, Token.Text.NewLine, '\\n')",
  "(45724, Token.Text.Whitespace, '\\t  ')",
  "(45727, Token.Comment.Single, '# in order for the loader to find any dlls it needs.')",
  "(45779, Token.Text.NewLine, '\\n')",
  "(45780, Token.Text.Whitespace, '\\t  ')",
  "(45783, Token.Text, '$echo')",
  "(45788, Token.Text.Whitespace, ' ')",
  "(45789, Token.Literal.String.Double, '\"$modename: warning: \\\\`-no-install\\' is ignored for $host\"')",
  "(45846, Token.Text.Whitespace, ' ')",
  "(45847, Token.Text, '1>&2')",
  "(45851, Token.Text.NewLine, '\\n')",
  "(45852, Token.Text.Whitespace, '\\t  ')",
  "(45855, Token.Text, '$echo')",
  "(45860, Token.Text.Whitespace, ' ')",
  "(45861, Token.Literal.String.Double, '\"$modename: warning: assuming \\\\`-no-fast-install\\' instead\"')",
  "(45919, Token.Text.Whitespace, ' ')",
  "(45920, Token.Text, '1>&2')",
  "(45924, Token.Text.NewLine, '\\n')",
  "(45925, Token.Text.Whitespace, '\\t  ')",
  "(45928, Token.Text, 'fast_install=no')",
  "(45943, Token.Text.NewLine, '\\n')",
  "(45944, Token.Text.Whitespace, '\\t  ')",
  "(45947, Token.Text, ';;')",
  "(45949, Token.Text.NewLine, '\\n')",
  "(45950, Token.Text.Whitespace, '\\t')",
  "(45951, Token.Text, '*)')",
  "(45953, Token.Text.Whitespace, ' ')",
  "(45954, Token.Text, 'no_install=yes')",
  "(45968, Token.Text.Whitespace, ' ')",
  "(45969, Token.Text, ';;')",
  "(45971, Token.Text.NewLine, '\\n')",
  "(45972, Token.Text.Whitespace, '\\t')",
  "(45973, Token.Text, 'esac')",
  "(45977, Token.Text.NewLine, '\\n')",
  "(45978, Token.Text.Whitespace, '\\t')",
  "(45979, Token.Text, 'continue')",
  "(45987, Token.Text.NewLine, '\\n')",
  "(45988, Token.Text.Whitespace, '\\t')",
  "(45989, Token.Text, ';;')",
  "(45991, Token.Text.NewLine, '\\n\\n')",
  "(45993, Token.Text.Whitespace, '      ')",
  "(45999, Token.Text, '-no-undefined)')",
  "(46013, Token.Text.NewLine, '\\n')",
  "(46014, Token.Text.Whitespace, '\\t')",
  "(46015, Token.Text, 'allow_undefined=no')",
  "(46033, Token.Text.NewLine, '\\n')",
  "(46034, Token.Text.Whitespace, '\\t')",
  "(46035, Token.Text, 'continue')",
  "(46043, Token.Text.NewLine, '\\n')",
  "(46044, Token.Text.Whitespace, '\\t')",
  "(46045, Token.Text, ';;')",
  "(46047, Token.Text.NewLine, '\\n\\n')",
  "(46049, Token.Text.Whitespace, '      ')",
  "(46055, Token.Text, '-objectlist)')",
  "(46067, Token.Text.NewLine, '\\n')",
  "(46068, Token.Text.Whitespace, '\\t')",
  "(46069, Token.Text, 'prev=objectlist')",
  "(46084, Token.Text.NewLine, '\\n')",
  "(46085, Token.Text.Whitespace, '\\t')",
  "(46086, Token.Text, 'continue')",
  "(46094, Token.Text.NewLine, '\\n')",
  "(46095, Token.Text.Whitespace, '\\t')",
  "(46096, Token.Text, ';;')",
  "(46098, Token.Text.NewLine, '\\n\\n')",
  "(46100, Token.Text.Whitespace, '      ')",
  "(46106, Token.Text, '-o)')",
  "(46109, Token.Text.Whitespace, ' ')",
  "(46110, Token.Text, 'prev=output')",
  "(46121, Token.Text.Whitespace, ' ')",
  "(46122, Token.Text, ';;')",
  "(46124, Token.Text.NewLine, '\\n\\n')",
  "(46126, Token.Text.Whitespace, '      ')",
  "(46132, Token.Text, '-precious-files-regex)')",
  "(46154, Token.Text.NewLine, '\\n')",
  "(46155, Token.Text.Whitespace, '\\t')",
  "(46156, Token.Text, 'prev=precious_regex')",
  "(46175, Token.Text.NewLine, '\\n')",
  "(46176, Token.Text.Whitespace, '\\t')",
  "(46177, Token.Text, 'continue')",
  "(46185, Token.Text.NewLine, '\\n')",
  "(46186, Token.Text.Whitespace, '\\t')",
  "(46187, Token.Text, ';;')",
  "(46189, Token.Text.NewLine, '\\n\\n')",
  "(46191, Token.Text.Whitespace, '      ')",
  "(46197, Token.Text, '-release)')",
  "(46206, Token.Text.NewLine, '\\n')",
  "(46207, Token.Text.Whitespace, '\\t')",
  "(46208, Token.Text, 'prev=release')",
  "(46220, Token.Text.NewLine, '\\n')",
  "(46221, Token.Text.Whitespace, '\\t')",
  "(46222, Token.Text, 'continue')",
  "(46230, Token.Text.NewLine, '\\n')",
  "(46231, Token.Text.Whitespace, '\\t')",
  "(46232, Token.Text, ';;')",
  "(46234, Token.Text.NewLine, '\\n\\n')",
  "(46236, Token.Text.Whitespace, '      ')",
  "(46242, Token.Text, '-rpath)')",
  "(46249, Token.Text.NewLine, '\\n')",
  "(46250, Token.Text.Whitespace, '\\t')",
  "(46251, Token.Text, 'prev=rpath')",
  "(46261, Token.Text.NewLine, '\\n')",
  "(46262, Token.Text.Whitespace, '\\t')",
  "(46263, Token.Text, 'continue')",
  "(46271, Token.Text.NewLine, '\\n')",
  "(46272, Token.Text.Whitespace, '\\t')",
  "(46273, Token.Text, ';;')",
  "(46275, Token.Text.NewLine, '\\n\\n')",
  "(46277, Token.Text.Whitespace, '      ')",
  "(46283, Token.Text, '-R)')",
  "(46286, Token.Text.NewLine, '\\n')",
  "(46287, Token.Text.Whitespace, '\\t')",
  "(46288, Token.Text, 'prev=xrpath')",
  "(46299, Token.Text.NewLine, '\\n')",
  "(46300, Token.Text.Whitespace, '\\t')",
  "(46301, Token.Text, 'continue')",
  "(46309, Token.Text.NewLine, '\\n')",
  "(46310, Token.Text.Whitespace, '\\t')",
  "(46311, Token.Text, ';;')",
  "(46313, Token.Text.NewLine, '\\n\\n')",
  "(46315, Token.Text.Whitespace, '      ')",
  "(46321, Token.Text, '-R*)')",
  "(46325, Token.Text.NewLine, '\\n')",
  "(46326, Token.Text.Whitespace, '\\t')",
  "(46327, Token.Text, 'dir=`$echo')",
  "(46337, Token.Text.Whitespace, ' ')",
  "(46338, Token.Literal.String.Double, '\"X$arg\"')",
  "(46345, Token.Text.Whitespace, ' ')",
  "(46346, Token.Text, '|')",
  "(46347, Token.Text.Whitespace, ' ')",
  "(46348, Token.Text, '$Xsed')",
  "(46353, Token.Text.Whitespace, ' ')",
  "(46354, Token.Text, '-e')",
  "(46356, Token.Text.Whitespace, ' ')",
  "(46357, Token.Literal.String.Single, \"'s/^-R//'\")",
  "(46366, Token.Text, '`')",
  "(46367, Token.Text.NewLine, '\\n')",
  "(46368, Token.Text.Whitespace, '\\t')",
  "(46369, Token.Comment.Single, '# We need an absolute path.')",
  "(46396, Token.Text.NewLine, '\\n')",
  "(46397, Token.Text.Whitespace, '\\t')",
  "(46398, Token.Text, 'case')",
  "(46402, Token.Text.Whitespace, ' ')",
  "(46403, Token.Text, '$dir')",
  "(46407, Token.Text.Whitespace, ' ')",
  "(46408, Token.Text, 'in')",
  "(46410, Token.Text.NewLine, '\\n')",
  "(46411, Token.Text.Whitespace, '\\t')",
  "(46412, Token.Text, '[\\\\\\\\/]*')",
  "(46418, Token.Text.Whitespace, ' ')",
  "(46419, Token.Text, '|')",
  "(46420, Token.Text.Whitespace, ' ')",
  "(46421, Token.Text, '[A-Za-z]:[\\\\\\\\/]*)')",
  "(46437, Token.Text.Whitespace, ' ')",
  "(46438, Token.Text, ';;')",
  "(46440, Token.Text.NewLine, '\\n')",
  "(46441, Token.Text.Whitespace, '\\t')",
  "(46442, Token.Text, '*)')",
  "(46444, Token.Text.NewLine, '\\n')",
  "(46445, Token.Text.Whitespace, '\\t  ')",
  "(46448, Token.Text, '$echo')",
  "(46453, Token.Text.Whitespace, ' ')",
  "(46454, Token.Literal.String.Double, '\"$modename: only absolute run-paths are allowed\"')",
  "(46502, Token.Text.Whitespace, ' ')",
  "(46503, Token.Text, '1>&2')",
  "(46507, Token.Text.NewLine, '\\n')",
  "(46508, Token.Text.Whitespace, '\\t  ')",
  "(46511, Token.Text, 'exit')",
  "(46515, Token.Text.Whitespace, ' ')",
  "(46516, Token.Text, '$EXIT_FAILURE')",
  "(46529, Token.Text.NewLine, '\\n')",
  "(46530, Token.Text.Whitespace, '\\t  ')",
  "(46533, Token.Text, ';;')",
  "(46535, Token.Text.NewLine, '\\n')",
  "(46536, Token.Text.Whitespace, '\\t')",
  "(46537, Token.Text, 'esac')",
  "(46541, Token.Text.NewLine, '\\n')",
  "(46542, Token.Text.Whitespace, '\\t')",
  "(46543, Token.Text, 'case')",
  "(46547, Token.Text.Whitespace, ' ')",
  "(46548, Token.Literal.String.Double, '\"$xrpath \"')",
  "(46558, Token.Text.Whitespace, ' ')",
  "(46559, Token.Text, 'in')",
  "(46561, Token.Text.NewLine, '\\n')",
  "(46562, Token.Text.Whitespace, '\\t')",
  "(46563, Token.Text, '*\"')",
  "(46565, Token.Text.Whitespace, ' ')",
  "(46566, Token.Text, '$dir')",
  "(46570, Token.Text.Whitespace, ' ')",
  "(46571, Token.Literal.String.Double, '\"*) ;;\\n\\t*) xrpath=\"')",
  "(46590, Token.Text, '$xrpath')",
  "(46597, Token.Text.Whitespace, ' ')",
  "(46598, Token.Text, '$dir\"')",
  "(46603, Token.Text.Whitespace, ' ')",
  "(46604, Token.Text, ';;')",
  "(46606, Token.Text.NewLine, '\\n')",
  "(46607, Token.Text.Whitespace, '\\t')",
  "(46608, Token.Text, 'esac')",
  "(46612, Token.Text.NewLine, '\\n')",
  "(46613, Token.Text.Whitespace, '\\t')",
  "(46614, Token.Text, 'continue')",
  "(46622, Token.Text.NewLine, '\\n')",
  "(46623, Token.Text.Whitespace, '\\t')",
  "(46624, Token.Text, ';;')",
  "(46626, Token.Text.NewLine, '\\n\\n')",
  "(46628, Token.Text.Whitespace, '      ')",
  "(46634, Token.Text, '-static)')",
  "(46642, Token.Text.NewLine, '\\n')",
  "(46643, Token.Text.Whitespace, '\\t')",
  "(46644, Token.Comment.Single, '# The effects of -static are defined in a previous loop.')",
  "(46700, Token.Text.NewLine, '\\n')",
  "(46701, Token.Text.Whitespace, '\\t')",
  "(46702, Token.Comment.Single, '# We used to do the same as -all-static on platforms that')",
  "(46759, Token.Text.NewLine, '\\n')",
  "(46760, Token.Text.Whitespace, '\\t')",
  "(46761, Token.Comment.Single, \"# didn't have a PIC flag, but the assumption that the effects\")",
  "(46822, Token.Text.NewLine, '\\n')",
  "(46823, Token.Text.Whitespace, '\\t')",
  "(46824, Token.Comment.Single, '# would be equivalent was wrong.  It would break on at least')",
  "(46884, Token.Text.NewLine, '\\n')",
  "(46885, Token.Text.Whitespace, '\\t')",
  "(46886, Token.Comment.Single, '# Digital Unix and AIX.')",
  "(46909, Token.Text.NewLine, '\\n')",
  "(46910, Token.Text.Whitespace, '\\t')",
  "(46911, Token.Text, 'continue')",
  "(46919, Token.Text.NewLine, '\\n')",
  "(46920, Token.Text.Whitespace, '\\t')",
  "(46921, Token.Text, ';;')",
  "(46923, Token.Text.NewLine, '\\n\\n')",
  "(46925, Token.Text.Whitespace, '      ')",
  "(46931, Token.Text, '-thread-safe)')",
  "(46944, Token.Text.NewLine, '\\n')",
  "(46945, Token.Text.Whitespace, '\\t')",
  "(46946, Token.Text, 'thread_safe=yes')",
  "(46961, Token.Text.NewLine, '\\n')",
  "(46962, Token.Text.Whitespace, '\\t')",
  "(46963, Token.Text, 'continue')",
  "(46971, Token.Text.NewLine, '\\n')",
  "(46972, Token.Text.Whitespace, '\\t')",
  "(46973, Token.Text, ';;')",
  "(46975, Token.Text.NewLine, '\\n\\n')",
  "(46977, Token.Text.Whitespace, '      ')",
  "(46983, Token.Text, '-version-info)')",
  "(46997, Token.Text.NewLine, '\\n')",
  "(46998, Token.Text.Whitespace, '\\t')",
  "(46999, Token.Text, 'prev=vinfo')",
  "(47009, Token.Text.NewLine, '\\n')",
  "(47010, Token.Text.Whitespace, '\\t')",
  "(47011, Token.Text, 'continue')",
  "(47019, Token.Text.NewLine, '\\n')",
  "(47020, Token.Text.Whitespace, '\\t')",
  "(47021, Token.Text, ';;')",
  "(47023, Token.Text.NewLine, '\\n')",
  "(47024, Token.Text.Whitespace, '      ')",
  "(47030, Token.Text, '-version-number)')",
  "(47046, Token.Text.NewLine, '\\n')",
  "(47047, Token.Text.Whitespace, '\\t')",
  "(47048, Token.Text, 'prev=vinfo')",
  "(47058, Token.Text.NewLine, '\\n')",
  "(47059, Token.Text.Whitespace, '\\t')",
  "(47060, Token.Text, 'vinfo_number=yes')",
  "(47076, Token.Text.NewLine, '\\n')",
  "(47077, Token.Text.Whitespace, '\\t')",
  "(47078, Token.Text, 'continue')",
  "(47086, Token.Text.NewLine, '\\n')",
  "(47087, Token.Text.Whitespace, '\\t')",
  "(47088, Token.Text, ';;')",
  "(47090, Token.Text.NewLine, '\\n\\n')",
  "(47092, Token.Text.Whitespace, '      ')",
  "(47098, Token.Text, '-Wc,*)')",
  "(47104, Token.Text.NewLine, '\\n')",
  "(47105, Token.Text.Whitespace, '\\t')",
  "(47106, Token.Text, 'args=`$echo')",
  "(47117, Token.Text.Whitespace, ' ')",
  "(47118, Token.Literal.String.Double, '\"X$arg\"')",
  "(47125, Token.Text.Whitespace, ' ')",
  "(47126, Token.Text, '|')",
  "(47127, Token.Text.Whitespace, ' ')",
  "(47128, Token.Text, '$Xsed')",
  "(47133, Token.Text.Whitespace, ' ')",
  "(47134, Token.Text, '-e')",
  "(47136, Token.Text.Whitespace, ' ')",
  "(47137, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(47155, Token.Text.Whitespace, ' ')",
  "(47156, Token.Text, '-e')",
  "(47158, Token.Text.Whitespace, ' ')",
  "(47159, Token.Literal.String.Single, \"'s/^-Wc,//'\")",
  "(47170, Token.Text, '`')",
  "(47171, Token.Text.NewLine, '\\n')",
  "(47172, Token.Text.Whitespace, '\\t')",
  "(47173, Token.Text, 'arg=')",
  "(47177, Token.Text.NewLine, '\\n')",
  "(47178, Token.Text.Whitespace, '\\t')",
  "(47179, Token.Text, 'save_ifs=\"$IFS\";')",
  "(47195, Token.Text.Whitespace, ' ')",
  "(47196, Token.Text, \"IFS=','\")",
  "(47203, Token.Text.NewLine, '\\n')",
  "(47204, Token.Text.Whitespace, '\\t')",
  "(47205, Token.Text, 'for')",
  "(47208, Token.Text.Whitespace, ' ')",
  "(47209, Token.Text, 'flag')",
  "(47213, Token.Text.Whitespace, ' ')",
  "(47214, Token.Text, 'in')",
  "(47216, Token.Text.Whitespace, ' ')",
  "(47217, Token.Text, '$args;')",
  "(47223, Token.Text.Whitespace, ' ')",
  "(47224, Token.Text, 'do')",
  "(47226, Token.Text.NewLine, '\\n')",
  "(47227, Token.Text.Whitespace, '\\t  ')",
  "(47230, Token.Text, 'IFS=\"$save_ifs\"')",
  "(47245, Token.Text.NewLine, '\\n')",
  "(47246, Token.Text.Whitespace, '\\t  ')",
  "(47249, Token.Text, 'case')",
  "(47253, Token.Text.Whitespace, ' ')",
  "(47254, Token.Text, '$flag')",
  "(47259, Token.Text.Whitespace, ' ')",
  "(47260, Token.Text, 'in')",
  "(47262, Token.Text.NewLine, '\\n')",
  "(47263, Token.Text.Whitespace, '\\t    ')",
  "(47268, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(47303, Token.Text.Whitespace, ' ')",
  "(47304, Token.Text, '\\\\')",
  "(47305, Token.Text.Whitespace, '\\t')",
  "(47306, Token.Text, ']*|*]*|\"\")')",
  "(47316, Token.Text.NewLine, '\\n')",
  "(47317, Token.Text.Whitespace, '\\t    ')",
  "(47322, Token.Text, 'flag=\"\\\\\"$flag\\\\\"\"')",
  "(47338, Token.Text.NewLine, '\\n')",
  "(47339, Token.Text.Whitespace, '\\t    ')",
  "(47344, Token.Text, ';;')",
  "(47346, Token.Text.NewLine, '\\n')",
  "(47347, Token.Text.Whitespace, '\\t  ')",
  "(47350, Token.Text, 'esac')",
  "(47354, Token.Text.NewLine, '\\n')",
  "(47355, Token.Text.Whitespace, '\\t  ')",
  "(47358, Token.Text, 'arg=\"$arg')",
  "(47367, Token.Text.Whitespace, ' ')",
  "(47368, Token.Text, '$wl$flag\"')",
  "(47377, Token.Text.NewLine, '\\n')",
  "(47378, Token.Text.Whitespace, '\\t  ')",
  "(47381, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(47412, Token.Text.Whitespace, ' ')",
  "(47413, Token.Text, '$flag\"')",
  "(47419, Token.Text.NewLine, '\\n')",
  "(47420, Token.Text.Whitespace, '\\t')",
  "(47421, Token.Text, 'done')",
  "(47425, Token.Text.NewLine, '\\n')",
  "(47426, Token.Text.Whitespace, '\\t')",
  "(47427, Token.Text, 'IFS=\"$save_ifs\"')",
  "(47442, Token.Text.NewLine, '\\n')",
  "(47443, Token.Text.Whitespace, '\\t')",
  "(47444, Token.Text, 'arg=`$echo')",
  "(47454, Token.Text.Whitespace, ' ')",
  "(47455, Token.Literal.String.Double, '\"X$arg\"')",
  "(47462, Token.Text.Whitespace, ' ')",
  "(47463, Token.Text, '|')",
  "(47464, Token.Text.Whitespace, ' ')",
  "(47465, Token.Text, '$Xsed')",
  "(47470, Token.Text.Whitespace, ' ')",
  "(47471, Token.Text, '-e')",
  "(47473, Token.Text.Whitespace, ' ')",
  "(47474, Token.Literal.String.Double, '\"s/^ //\"')",
  "(47482, Token.Text, '`')",
  "(47483, Token.Text.NewLine, '\\n')",
  "(47484, Token.Text.Whitespace, '\\t')",
  "(47485, Token.Text, ';;')",
  "(47487, Token.Text.NewLine, '\\n\\n')",
  "(47489, Token.Text.Whitespace, '      ')",
  "(47495, Token.Text, '-Wl,*)')",
  "(47501, Token.Text.NewLine, '\\n')",
  "(47502, Token.Text.Whitespace, '\\t')",
  "(47503, Token.Text, 'args=`$echo')",
  "(47514, Token.Text.Whitespace, ' ')",
  "(47515, Token.Literal.String.Double, '\"X$arg\"')",
  "(47522, Token.Text.Whitespace, ' ')",
  "(47523, Token.Text, '|')",
  "(47524, Token.Text.Whitespace, ' ')",
  "(47525, Token.Text, '$Xsed')",
  "(47530, Token.Text.Whitespace, ' ')",
  "(47531, Token.Text, '-e')",
  "(47533, Token.Text.Whitespace, ' ')",
  "(47534, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(47552, Token.Text.Whitespace, ' ')",
  "(47553, Token.Text, '-e')",
  "(47555, Token.Text.Whitespace, ' ')",
  "(47556, Token.Literal.String.Single, \"'s/^-Wl,//'\")",
  "(47567, Token.Text, '`')",
  "(47568, Token.Text.NewLine, '\\n')",
  "(47569, Token.Text.Whitespace, '\\t')",
  "(47570, Token.Text, 'arg=')",
  "(47574, Token.Text.NewLine, '\\n')",
  "(47575, Token.Text.Whitespace, '\\t')",
  "(47576, Token.Text, 'save_ifs=\"$IFS\";')",
  "(47592, Token.Text.Whitespace, ' ')",
  "(47593, Token.Text, \"IFS=','\")",
  "(47600, Token.Text.NewLine, '\\n')",
  "(47601, Token.Text.Whitespace, '\\t')",
  "(47602, Token.Text, 'for')",
  "(47605, Token.Text.Whitespace, ' ')",
  "(47606, Token.Text, 'flag')",
  "(47610, Token.Text.Whitespace, ' ')",
  "(47611, Token.Text, 'in')",
  "(47613, Token.Text.Whitespace, ' ')",
  "(47614, Token.Text, '$args;')",
  "(47620, Token.Text.Whitespace, ' ')",
  "(47621, Token.Text, 'do')",
  "(47623, Token.Text.NewLine, '\\n')",
  "(47624, Token.Text.Whitespace, '\\t  ')",
  "(47627, Token.Text, 'IFS=\"$save_ifs\"')",
  "(47642, Token.Text.NewLine, '\\n')",
  "(47643, Token.Text.Whitespace, '\\t  ')",
  "(47646, Token.Text, 'case')",
  "(47650, Token.Text.Whitespace, ' ')",
  "(47651, Token.Text, '$flag')",
  "(47656, Token.Text.Whitespace, ' ')",
  "(47657, Token.Text, 'in')",
  "(47659, Token.Text.NewLine, '\\n')",
  "(47660, Token.Text.Whitespace, '\\t    ')",
  "(47665, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(47700, Token.Text.Whitespace, ' ')",
  "(47701, Token.Text, '\\\\')",
  "(47702, Token.Text.Whitespace, '\\t')",
  "(47703, Token.Text, ']*|*]*|\"\")')",
  "(47713, Token.Text.NewLine, '\\n')",
  "(47714, Token.Text.Whitespace, '\\t    ')",
  "(47719, Token.Text, 'flag=\"\\\\\"$flag\\\\\"\"')",
  "(47735, Token.Text.NewLine, '\\n')",
  "(47736, Token.Text.Whitespace, '\\t    ')",
  "(47741, Token.Text, ';;')",
  "(47743, Token.Text.NewLine, '\\n')",
  "(47744, Token.Text.Whitespace, '\\t  ')",
  "(47747, Token.Text, 'esac')",
  "(47751, Token.Text.NewLine, '\\n')",
  "(47752, Token.Text.Whitespace, '\\t  ')",
  "(47755, Token.Text, 'arg=\"$arg')",
  "(47764, Token.Text.Whitespace, ' ')",
  "(47765, Token.Text, '$wl$flag\"')",
  "(47774, Token.Text.NewLine, '\\n')",
  "(47775, Token.Text.Whitespace, '\\t  ')",
  "(47778, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(47809, Token.Text.Whitespace, ' ')",
  "(47810, Token.Text, '$wl$flag\"')",
  "(47819, Token.Text.NewLine, '\\n')",
  "(47820, Token.Text.Whitespace, '\\t  ')",
  "(47823, Token.Text, 'linker_flags=\"$linker_flags')",
  "(47850, Token.Text.Whitespace, ' ')",
  "(47851, Token.Text, '$flag\"')",
  "(47857, Token.Text.NewLine, '\\n')",
  "(47858, Token.Text.Whitespace, '\\t')",
  "(47859, Token.Text, 'done')",
  "(47863, Token.Text.NewLine, '\\n')",
  "(47864, Token.Text.Whitespace, '\\t')",
  "(47865, Token.Text, 'IFS=\"$save_ifs\"')",
  "(47880, Token.Text.NewLine, '\\n')",
  "(47881, Token.Text.Whitespace, '\\t')",
  "(47882, Token.Text, 'arg=`$echo')",
  "(47892, Token.Text.Whitespace, ' ')",
  "(47893, Token.Literal.String.Double, '\"X$arg\"')",
  "(47900, Token.Text.Whitespace, ' ')",
  "(47901, Token.Text, '|')",
  "(47902, Token.Text.Whitespace, ' ')",
  "(47903, Token.Text, '$Xsed')",
  "(47908, Token.Text.Whitespace, ' ')",
  "(47909, Token.Text, '-e')",
  "(47911, Token.Text.Whitespace, ' ')",
  "(47912, Token.Literal.String.Double, '\"s/^ //\"')",
  "(47920, Token.Text, '`')",
  "(47921, Token.Text.NewLine, '\\n')",
  "(47922, Token.Text.Whitespace, '\\t')",
  "(47923, Token.Text, ';;')",
  "(47925, Token.Text.NewLine, '\\n\\n')",
  "(47927, Token.Text.Whitespace, '      ')",
  "(47933, Token.Text, '-Xcompiler)')",
  "(47944, Token.Text.NewLine, '\\n')",
  "(47945, Token.Text.Whitespace, '\\t')",
  "(47946, Token.Text, 'prev=xcompiler')",
  "(47960, Token.Text.NewLine, '\\n')",
  "(47961, Token.Text.Whitespace, '\\t')",
  "(47962, Token.Text, 'continue')",
  "(47970, Token.Text.NewLine, '\\n')",
  "(47971, Token.Text.Whitespace, '\\t')",
  "(47972, Token.Text, ';;')",
  "(47974, Token.Text.NewLine, '\\n\\n')",
  "(47976, Token.Text.Whitespace, '      ')",
  "(47982, Token.Text, '-Xlinker)')",
  "(47991, Token.Text.NewLine, '\\n')",
  "(47992, Token.Text.Whitespace, '\\t')",
  "(47993, Token.Text, 'prev=xlinker')",
  "(48005, Token.Text.NewLine, '\\n')",
  "(48006, Token.Text.Whitespace, '\\t')",
  "(48007, Token.Text, 'continue')",
  "(48015, Token.Text.NewLine, '\\n')",
  "(48016, Token.Text.Whitespace, '\\t')",
  "(48017, Token.Text, ';;')",
  "(48019, Token.Text.NewLine, '\\n\\n')",
  "(48021, Token.Text.Whitespace, '      ')",
  "(48027, Token.Text, '-XCClinker)')",
  "(48038, Token.Text.NewLine, '\\n')",
  "(48039, Token.Text.Whitespace, '\\t')",
  "(48040, Token.Text, 'prev=xcclinker')",
  "(48054, Token.Text.NewLine, '\\n')",
  "(48055, Token.Text.Whitespace, '\\t')",
  "(48056, Token.Text, 'continue')",
  "(48064, Token.Text.NewLine, '\\n')",
  "(48065, Token.Text.Whitespace, '\\t')",
  "(48066, Token.Text, ';;')",
  "(48068, Token.Text.NewLine, '\\n\\n')",
  "(48070, Token.Text.Whitespace, '      ')",
  "(48076, Token.Comment.Single, '# Some other compiler flag.')",
  "(48103, Token.Text.NewLine, '\\n')",
  "(48104, Token.Text.Whitespace, '      ')",
  "(48110, Token.Text, '-*')",
  "(48112, Token.Text.Whitespace, ' ')",
  "(48113, Token.Text, '|')",
  "(48114, Token.Text.Whitespace, ' ')",
  "(48115, Token.Text, '+*)')",
  "(48118, Token.Text.NewLine, '\\n')",
  "(48119, Token.Text.Whitespace, '\\t')",
  "(48120, Token.Comment.Single, '# Unknown arguments in both finalize_command and compile_command need')",
  "(48189, Token.Text.NewLine, '\\n')",
  "(48190, Token.Text.Whitespace, '\\t')",
  "(48191, Token.Comment.Single, '# to be aesthetically quoted because they are evaled later.')",
  "(48250, Token.Text.NewLine, '\\n')",
  "(48251, Token.Text.Whitespace, '\\t')",
  "(48252, Token.Text, 'arg=`$echo')",
  "(48262, Token.Text.Whitespace, ' ')",
  "(48263, Token.Literal.String.Double, '\"X$arg\"')",
  "(48270, Token.Text.Whitespace, ' ')",
  "(48271, Token.Text, '|')",
  "(48272, Token.Text.Whitespace, ' ')",
  "(48273, Token.Text, '$Xsed')",
  "(48278, Token.Text.Whitespace, ' ')",
  "(48279, Token.Text, '-e')",
  "(48281, Token.Text.Whitespace, ' ')",
  "(48282, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(48300, Token.Text, '`')",
  "(48301, Token.Text.NewLine, '\\n')",
  "(48302, Token.Text.Whitespace, '\\t')",
  "(48303, Token.Text, 'case')",
  "(48307, Token.Text.Whitespace, ' ')",
  "(48308, Token.Text, '$arg')",
  "(48312, Token.Text.Whitespace, ' ')",
  "(48313, Token.Text, 'in')",
  "(48315, Token.Text.NewLine, '\\n')",
  "(48316, Token.Text.Whitespace, '\\t')",
  "(48317, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(48352, Token.Text.Whitespace, ' ')",
  "(48353, Token.Text, '\\\\')",
  "(48354, Token.Text.Whitespace, '\\t')",
  "(48355, Token.Text, ']*|*]*|\"\")')",
  "(48365, Token.Text.NewLine, '\\n')",
  "(48366, Token.Text.Whitespace, '\\t  ')",
  "(48369, Token.Text, 'arg=\"\\\\\"$arg\\\\\"\"')",
  "(48383, Token.Text.NewLine, '\\n')",
  "(48384, Token.Text.Whitespace, '\\t  ')",
  "(48387, Token.Text, ';;')",
  "(48389, Token.Text.NewLine, '\\n')",
  "(48390, Token.Text.Whitespace, '\\t')",
  "(48391, Token.Text, 'esac')",
  "(48395, Token.Text.NewLine, '\\n')",
  "(48396, Token.Text.Whitespace, '\\t')",
  "(48397, Token.Text, ';;')",
  "(48399, Token.Text.NewLine, '\\n\\n')",
  "(48401, Token.Text.Whitespace, '      ')",
  "(48407, Token.Text, '*.$objext)')",
  "(48417, Token.Text.NewLine, '\\n')",
  "(48418, Token.Text.Whitespace, '\\t')",
  "(48419, Token.Comment.Single, '# A standard object.')",
  "(48439, Token.Text.NewLine, '\\n')",
  "(48440, Token.Text.Whitespace, '\\t')",
  "(48441, Token.Text, 'objs=\"$objs')",
  "(48452, Token.Text.Whitespace, ' ')",
  "(48453, Token.Text, '$arg\"')",
  "(48458, Token.Text.NewLine, '\\n')",
  "(48459, Token.Text.Whitespace, '\\t')",
  "(48460, Token.Text, ';;')",
  "(48462, Token.Text.NewLine, '\\n\\n')",
  "(48464, Token.Text.Whitespace, '      ')",
  "(48470, Token.Text, '*.lo)')",
  "(48475, Token.Text.NewLine, '\\n')",
  "(48476, Token.Text.Whitespace, '\\t')",
  "(48477, Token.Comment.Single, '# A libtool-controlled object.')",
  "(48507, Token.Text.NewLine, '\\n\\n')",
  "(48509, Token.Text.Whitespace, '\\t')",
  "(48510, Token.Comment.Single, '# Check to see that this really is a libtool object.')",
  "(48562, Token.Text.NewLine, '\\n')",
  "(48563, Token.Text.Whitespace, '\\t')",
  "(48564, Token.Text, 'if')",
  "(48566, Token.Text.Whitespace, ' ')",
  "(48567, Token.Text, '(${SED}')",
  "(48574, Token.Text.Whitespace, ' ')",
  "(48575, Token.Text, '-e')",
  "(48577, Token.Text.Whitespace, ' ')",
  "(48578, Token.Literal.String.Single, \"'2q'\")",
  "(48582, Token.Text.Whitespace, ' ')",
  "(48583, Token.Text, '$arg')",
  "(48587, Token.Text.Whitespace, ' ')",
  "(48588, Token.Text, '|')",
  "(48589, Token.Text.Whitespace, ' ')",
  "(48590, Token.Text, 'grep')",
  "(48594, Token.Text.Whitespace, ' ')",
  "(48595, Token.Literal.String.Double, '\"^# Generated by .*$PACKAGE\"')",
  "(48623, Token.Text, ')')",
  "(48624, Token.Text.Whitespace, ' ')",
  "(48625, Token.Text, '>/dev/null')",
  "(48635, Token.Text.Whitespace, ' ')",
  "(48636, Token.Text, '2>&1;')",
  "(48641, Token.Text.Whitespace, ' ')",
  "(48642, Token.Text, 'then')",
  "(48646, Token.Text.NewLine, '\\n')",
  "(48647, Token.Text.Whitespace, '\\t  ')",
  "(48650, Token.Text, 'pic_object=')",
  "(48661, Token.Text.NewLine, '\\n')",
  "(48662, Token.Text.Whitespace, '\\t  ')",
  "(48665, Token.Text, 'non_pic_object=')",
  "(48680, Token.Text.NewLine, '\\n\\n')",
  "(48682, Token.Text.Whitespace, '\\t  ')",
  "(48685, Token.Comment.Single, '# Read the .lo file')",
  "(48704, Token.Text.NewLine, '\\n')",
  "(48705, Token.Text.Whitespace, '\\t  ')",
  "(48708, Token.Comment.Single, '# If there is no directory component, then add one.')",
  "(48759, Token.Text.NewLine, '\\n')",
  "(48760, Token.Text.Whitespace, '\\t  ')",
  "(48763, Token.Text, 'case')",
  "(48767, Token.Text.Whitespace, ' ')",
  "(48768, Token.Text, '$arg')",
  "(48772, Token.Text.Whitespace, ' ')",
  "(48773, Token.Text, 'in')",
  "(48775, Token.Text.NewLine, '\\n')",
  "(48776, Token.Text.Whitespace, '\\t  ')",
  "(48779, Token.Text, '*/*')",
  "(48782, Token.Text.Whitespace, ' ')",
  "(48783, Token.Text, '|')",
  "(48784, Token.Text.Whitespace, ' ')",
  "(48785, Token.Text, '*\\\\\\\\*)')",
  "(48790, Token.Text.Whitespace, ' ')",
  "(48791, Token.Text, '.')",
  "(48792, Token.Text.Whitespace, ' ')",
  "(48793, Token.Text, '$arg')",
  "(48797, Token.Text.Whitespace, ' ')",
  "(48798, Token.Text, ';;')",
  "(48800, Token.Text.NewLine, '\\n')",
  "(48801, Token.Text.Whitespace, '\\t  ')",
  "(48804, Token.Text, '*)')",
  "(48806, Token.Text.Whitespace, ' ')",
  "(48807, Token.Text, '.')",
  "(48808, Token.Text.Whitespace, ' ')",
  "(48809, Token.Text, './$arg')",
  "(48815, Token.Text.Whitespace, ' ')",
  "(48816, Token.Text, ';;')",
  "(48818, Token.Text.NewLine, '\\n')",
  "(48819, Token.Text.Whitespace, '\\t  ')",
  "(48822, Token.Text, 'esac')",
  "(48826, Token.Text.NewLine, '\\n\\n')",
  "(48828, Token.Text.Whitespace, '\\t  ')",
  "(48831, Token.Text, 'if')",
  "(48833, Token.Text.Whitespace, ' ')",
  "(48834, Token.Text, 'test')",
  "(48838, Token.Text.Whitespace, ' ')",
  "(48839, Token.Text, '-z')",
  "(48841, Token.Text.Whitespace, ' ')",
  "(48842, Token.Literal.String.Double, '\"$pic_object\"')",
  "(48855, Token.Text.Whitespace, ' ')",
  "(48856, Token.Text, '||')",
  "(48858, Token.Text.Whitespace, ' ')",
  "(48859, Token.Text, '\\\\')",
  "(48860, Token.Text.NewLine, '\\n')",
  "(48861, Token.Text.Whitespace, '\\t     ')",
  "(48867, Token.Text, 'test')",
  "(48871, Token.Text.Whitespace, ' ')",
  "(48872, Token.Text, '-z')",
  "(48874, Token.Text.Whitespace, ' ')",
  "(48875, Token.Literal.String.Double, '\"$non_pic_object\"')",
  "(48892, Token.Text.Whitespace, ' ')",
  "(48893, Token.Text, '||')",
  "(48895, Token.Text.NewLine, '\\n')",
  "(48896, Token.Text.Whitespace, '\\t     ')",
  "(48902, Token.Text, 'test')",
  "(48906, Token.Text.Whitespace, ' ')",
  "(48907, Token.Literal.String.Double, '\"$pic_object\"')",
  "(48920, Token.Text.Whitespace, ' ')",
  "(48921, Token.Text, '=')",
  "(48922, Token.Text.Whitespace, ' ')",
  "(48923, Token.Text, 'none')",
  "(48927, Token.Text.Whitespace, ' ')",
  "(48928, Token.Text, '&&')",
  "(48930, Token.Text.Whitespace, ' ')",
  "(48931, Token.Text, '\\\\')",
  "(48932, Token.Text.NewLine, '\\n')",
  "(48933, Token.Text.Whitespace, '\\t     ')",
  "(48939, Token.Text, 'test')",
  "(48943, Token.Text.Whitespace, ' ')",
  "(48944, Token.Literal.String.Double, '\"$non_pic_object\"')",
  "(48961, Token.Text.Whitespace, ' ')",
  "(48962, Token.Text, '=')",
  "(48963, Token.Text.Whitespace, ' ')",
  "(48964, Token.Text, 'none;')",
  "(48969, Token.Text.Whitespace, ' ')",
  "(48970, Token.Text, 'then')",
  "(48974, Token.Text.NewLine, '\\n')",
  "(48975, Token.Text.Whitespace, '\\t    ')",
  "(48980, Token.Text, '$echo')",
  "(48985, Token.Text.Whitespace, ' ')",
  "(48986, Token.Literal.String.Double, '\"$modename: cannot find name of object for \\\\`$arg\\'\"')",
  "(49037, Token.Text.Whitespace, ' ')",
  "(49038, Token.Text, '1>&2')",
  "(49042, Token.Text.NewLine, '\\n')",
  "(49043, Token.Text.Whitespace, '\\t    ')",
  "(49048, Token.Text, 'exit')",
  "(49052, Token.Text.Whitespace, ' ')",
  "(49053, Token.Text, '$EXIT_FAILURE')",
  "(49066, Token.Text.NewLine, '\\n')",
  "(49067, Token.Text.Whitespace, '\\t  ')",
  "(49070, Token.Text, 'fi')",
  "(49072, Token.Text.NewLine, '\\n\\n')",
  "(49074, Token.Text.Whitespace, '\\t  ')",
  "(49077, Token.Comment.Single, '# Extract subdirectory from the argument.')",
  "(49118, Token.Text.NewLine, '\\n')",
  "(49119, Token.Text.Whitespace, '\\t  ')",
  "(49122, Token.Text, 'xdir=`$echo')",
  "(49133, Token.Text.Whitespace, ' ')",
  "(49134, Token.Literal.String.Double, '\"X$arg\"')",
  "(49141, Token.Text.Whitespace, ' ')",
  "(49142, Token.Text, '|')",
  "(49143, Token.Text.Whitespace, ' ')",
  "(49144, Token.Text, '$Xsed')",
  "(49149, Token.Text.Whitespace, ' ')",
  "(49150, Token.Text, '-e')",
  "(49152, Token.Text.Whitespace, ' ')",
  "(49153, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(49166, Token.Text, '`')",
  "(49167, Token.Text.NewLine, '\\n')",
  "(49168, Token.Text.Whitespace, '\\t  ')",
  "(49171, Token.Text, 'if')",
  "(49173, Token.Text.Whitespace, ' ')",
  "(49174, Token.Text, 'test')",
  "(49178, Token.Text.Whitespace, ' ')",
  "(49179, Token.Literal.String.Double, '\"X$xdir\"')",
  "(49187, Token.Text.Whitespace, ' ')",
  "(49188, Token.Text, '=')",
  "(49189, Token.Text.Whitespace, ' ')",
  "(49190, Token.Literal.String.Double, '\"X$arg\"')",
  "(49197, Token.Text, ';')",
  "(49198, Token.Text.Whitespace, ' ')",
  "(49199, Token.Text, 'then')",
  "(49203, Token.Text.NewLine, '\\n')",
  "(49204, Token.Text.Whitespace, '\\t    ')",
  "(49209, Token.Text, 'xdir=')",
  "(49214, Token.Text.NewLine, '\\n')",
  "(49215, Token.Text.Whitespace, ' \\t  ')",
  "(49219, Token.Text, 'else')",
  "(49223, Token.Text.NewLine, '\\n')",
  "(49224, Token.Text.Whitespace, '\\t    ')",
  "(49229, Token.Text, 'xdir=\"$xdir/\"')",
  "(49242, Token.Text.NewLine, '\\n')",
  "(49243, Token.Text.Whitespace, '\\t  ')",
  "(49246, Token.Text, 'fi')",
  "(49248, Token.Text.NewLine, '\\n\\n')",
  "(49250, Token.Text.Whitespace, '\\t  ')",
  "(49253, Token.Text, 'if')",
  "(49255, Token.Text.Whitespace, ' ')",
  "(49256, Token.Text, 'test')",
  "(49260, Token.Text.Whitespace, ' ')",
  "(49261, Token.Literal.String.Double, '\"$pic_object\"')",
  "(49274, Token.Text.Whitespace, ' ')",
  "(49275, Token.Text, '!=')",
  "(49277, Token.Text.Whitespace, ' ')",
  "(49278, Token.Text, 'none;')",
  "(49283, Token.Text.Whitespace, ' ')",
  "(49284, Token.Text, 'then')",
  "(49288, Token.Text.NewLine, '\\n')",
  "(49289, Token.Text.Whitespace, '\\t    ')",
  "(49294, Token.Comment.Single, '# Prepend the subdirectory the object is found in.')",
  "(49344, Token.Text.NewLine, '\\n')",
  "(49345, Token.Text.Whitespace, '\\t    ')",
  "(49350, Token.Text, 'pic_object=\"$xdir$pic_object\"')",
  "(49379, Token.Text.NewLine, '\\n\\n')",
  "(49381, Token.Text.Whitespace, '\\t    ')",
  "(49386, Token.Text, 'if')",
  "(49388, Token.Text.Whitespace, ' ')",
  "(49389, Token.Text, 'test')",
  "(49393, Token.Text.Whitespace, ' ')",
  "(49394, Token.Literal.String.Double, '\"$prev\"')",
  "(49401, Token.Text.Whitespace, ' ')",
  "(49402, Token.Text, '=')",
  "(49403, Token.Text.Whitespace, ' ')",
  "(49404, Token.Text, 'dlfiles;')",
  "(49412, Token.Text.Whitespace, ' ')",
  "(49413, Token.Text, 'then')",
  "(49417, Token.Text.NewLine, '\\n')",
  "(49418, Token.Text.Whitespace, '\\t      ')",
  "(49425, Token.Text, 'if')",
  "(49427, Token.Text.Whitespace, ' ')",
  "(49428, Token.Text, 'test')",
  "(49432, Token.Text.Whitespace, ' ')",
  "(49433, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(49454, Token.Text.Whitespace, ' ')",
  "(49455, Token.Text, '=')",
  "(49456, Token.Text.Whitespace, ' ')",
  "(49457, Token.Text, 'yes')",
  "(49460, Token.Text.Whitespace, ' ')",
  "(49461, Token.Text, '&&')",
  "(49463, Token.Text.Whitespace, ' ')",
  "(49464, Token.Text, 'test')",
  "(49468, Token.Text.Whitespace, ' ')",
  "(49469, Token.Literal.String.Double, '\"$dlopen_support\"')",
  "(49486, Token.Text.Whitespace, ' ')",
  "(49487, Token.Text, '=')",
  "(49488, Token.Text.Whitespace, ' ')",
  "(49489, Token.Text, 'yes;')",
  "(49493, Token.Text.Whitespace, ' ')",
  "(49494, Token.Text, 'then')",
  "(49498, Token.Text.NewLine, '\\n')",
  "(49499, Token.Text.Whitespace, '\\t\\t')",
  "(49501, Token.Text, 'dlfiles=\"$dlfiles')",
  "(49518, Token.Text.Whitespace, ' ')",
  "(49519, Token.Text, '$pic_object\"')",
  "(49531, Token.Text.NewLine, '\\n')",
  "(49532, Token.Text.Whitespace, '\\t\\t')",
  "(49534, Token.Text, 'prev=')",
  "(49539, Token.Text.NewLine, '\\n')",
  "(49540, Token.Text.Whitespace, '\\t\\t')",
  "(49542, Token.Text, 'continue')",
  "(49550, Token.Text.NewLine, '\\n')",
  "(49551, Token.Text.Whitespace, '\\t      ')",
  "(49558, Token.Text, 'else')",
  "(49562, Token.Text.NewLine, '\\n')",
  "(49563, Token.Text.Whitespace, '\\t\\t')",
  "(49565, Token.Comment.Single, '# If libtool objects are unsupported, then we need to preload.')",
  "(49627, Token.Text.NewLine, '\\n')",
  "(49628, Token.Text.Whitespace, '\\t\\t')",
  "(49630, Token.Text, 'prev=dlprefiles')",
  "(49645, Token.Text.NewLine, '\\n')",
  "(49646, Token.Text.Whitespace, '\\t      ')",
  "(49653, Token.Text, 'fi')",
  "(49655, Token.Text.NewLine, '\\n')",
  "(49656, Token.Text.Whitespace, '\\t    ')",
  "(49661, Token.Text, 'fi')",
  "(49663, Token.Text.NewLine, '\\n\\n')",
  "(49665, Token.Text.Whitespace, '\\t    ')",
  "(49670, Token.Comment.Single, '# CHECK ME:  I think I busted this.  -Ossama')",
  "(49714, Token.Text.NewLine, '\\n')",
  "(49715, Token.Text.Whitespace, '\\t    ')",
  "(49720, Token.Text, 'if')",
  "(49722, Token.Text.Whitespace, ' ')",
  "(49723, Token.Text, 'test')",
  "(49727, Token.Text.Whitespace, ' ')",
  "(49728, Token.Literal.String.Double, '\"$prev\"')",
  "(49735, Token.Text.Whitespace, ' ')",
  "(49736, Token.Text, '=')",
  "(49737, Token.Text.Whitespace, ' ')",
  "(49738, Token.Text, 'dlprefiles;')",
  "(49749, Token.Text.Whitespace, ' ')",
  "(49750, Token.Text, 'then')",
  "(49754, Token.Text.NewLine, '\\n')",
  "(49755, Token.Text.Whitespace, '\\t      ')",
  "(49762, Token.Comment.Single, '# Preload the old-style object.')",
  "(49793, Token.Text.NewLine, '\\n')",
  "(49794, Token.Text.Whitespace, '\\t      ')",
  "(49801, Token.Text, 'dlprefiles=\"$dlprefiles')",
  "(49824, Token.Text.Whitespace, ' ')",
  "(49825, Token.Text, '$pic_object\"')",
  "(49837, Token.Text.NewLine, '\\n')",
  "(49838, Token.Text.Whitespace, '\\t      ')",
  "(49845, Token.Text, 'prev=')",
  "(49850, Token.Text.NewLine, '\\n')",
  "(49851, Token.Text.Whitespace, '\\t    ')",
  "(49856, Token.Text, 'fi')",
  "(49858, Token.Text.NewLine, '\\n\\n')",
  "(49860, Token.Text.Whitespace, '\\t    ')",
  "(49865, Token.Comment.Single, '# A PIC object.')",
  "(49880, Token.Text.NewLine, '\\n')",
  "(49881, Token.Text.Whitespace, '\\t    ')",
  "(49886, Token.Text, 'libobjs=\"$libobjs')",
  "(49903, Token.Text.Whitespace, ' ')",
  "(49904, Token.Text, '$pic_object\"')",
  "(49916, Token.Text.NewLine, '\\n')",
  "(49917, Token.Text.Whitespace, '\\t    ')",
  "(49922, Token.Text, 'arg=\"$pic_object\"')",
  "(49939, Token.Text.NewLine, '\\n')",
  "(49940, Token.Text.Whitespace, '\\t  ')",
  "(49943, Token.Text, 'fi')",
  "(49945, Token.Text.NewLine, '\\n\\n')",
  "(49947, Token.Text.Whitespace, '\\t  ')",
  "(49950, Token.Comment.Single, '# Non-PIC object.')",
  "(49967, Token.Text.NewLine, '\\n')",
  "(49968, Token.Text.Whitespace, '\\t  ')",
  "(49971, Token.Text, 'if')",
  "(49973, Token.Text.Whitespace, ' ')",
  "(49974, Token.Text, 'test')",
  "(49978, Token.Text.Whitespace, ' ')",
  "(49979, Token.Literal.String.Double, '\"$non_pic_object\"')",
  "(49996, Token.Text.Whitespace, ' ')",
  "(49997, Token.Text, '!=')",
  "(49999, Token.Text.Whitespace, ' ')",
  "(50000, Token.Text, 'none;')",
  "(50005, Token.Text.Whitespace, ' ')",
  "(50006, Token.Text, 'then')",
  "(50010, Token.Text.NewLine, '\\n')",
  "(50011, Token.Text.Whitespace, '\\t    ')",
  "(50016, Token.Comment.Single, '# Prepend the subdirectory the object is found in.')",
  "(50066, Token.Text.NewLine, '\\n')",
  "(50067, Token.Text.Whitespace, '\\t    ')",
  "(50072, Token.Text, 'non_pic_object=\"$xdir$non_pic_object\"')",
  "(50109, Token.Text.NewLine, '\\n\\n')",
  "(50111, Token.Text.Whitespace, '\\t    ')",
  "(50116, Token.Comment.Single, '# A standard non-PIC object')",
  "(50143, Token.Text.NewLine, '\\n')",
  "(50144, Token.Text.Whitespace, '\\t    ')",
  "(50149, Token.Text, 'non_pic_objects=\"$non_pic_objects')",
  "(50182, Token.Text.Whitespace, ' ')",
  "(50183, Token.Text, '$non_pic_object\"')",
  "(50199, Token.Text.NewLine, '\\n')",
  "(50200, Token.Text.Whitespace, '\\t    ')",
  "(50205, Token.Text, 'if')",
  "(50207, Token.Text.Whitespace, ' ')",
  "(50208, Token.Text, 'test')",
  "(50212, Token.Text.Whitespace, ' ')",
  "(50213, Token.Text, '-z')",
  "(50215, Token.Text.Whitespace, ' ')",
  "(50216, Token.Literal.String.Double, '\"$pic_object\"')",
  "(50229, Token.Text.Whitespace, ' ')",
  "(50230, Token.Text, '||')",
  "(50232, Token.Text.Whitespace, ' ')",
  "(50233, Token.Text, 'test')",
  "(50237, Token.Text.Whitespace, ' ')",
  "(50238, Token.Literal.String.Double, '\"$pic_object\"')",
  "(50251, Token.Text.Whitespace, ' ')",
  "(50252, Token.Text, '=')",
  "(50253, Token.Text.Whitespace, ' ')",
  "(50254, Token.Text, 'none')",
  "(50258, Token.Text.Whitespace, ' ')",
  "(50259, Token.Text, ';')",
  "(50260, Token.Text.Whitespace, ' ')",
  "(50261, Token.Text, 'then')",
  "(50265, Token.Text.NewLine, '\\n')",
  "(50266, Token.Text.Whitespace, '\\t      ')",
  "(50273, Token.Text, 'arg=\"$non_pic_object\"')",
  "(50294, Token.Text.NewLine, '\\n')",
  "(50295, Token.Text.Whitespace, '\\t    ')",
  "(50300, Token.Text, 'fi')",
  "(50302, Token.Text.NewLine, '\\n')",
  "(50303, Token.Text.Whitespace, '\\t  ')",
  "(50306, Token.Text, 'else')",
  "(50310, Token.Text.NewLine, '\\n')",
  "(50311, Token.Text.Whitespace, '\\t    ')",
  "(50316, Token.Comment.Single, '# If the PIC object exists, use it instead.')",
  "(50359, Token.Text.NewLine, '\\n')",
  "(50360, Token.Text.Whitespace, '\\t    ')",
  "(50365, Token.Comment.Single, '# $xdir was prepended to $pic_object above.')",
  "(50408, Token.Text.NewLine, '\\n')",
  "(50409, Token.Text.Whitespace, '\\t    ')",
  "(50414, Token.Text, 'non_pic_object=\"$pic_object\"')",
  "(50442, Token.Text.NewLine, '\\n')",
  "(50443, Token.Text.Whitespace, '\\t    ')",
  "(50448, Token.Text, 'non_pic_objects=\"$non_pic_objects')",
  "(50481, Token.Text.Whitespace, ' ')",
  "(50482, Token.Text, '$non_pic_object\"')",
  "(50498, Token.Text.NewLine, '\\n')",
  "(50499, Token.Text.Whitespace, '\\t  ')",
  "(50502, Token.Text, 'fi')",
  "(50504, Token.Text.NewLine, '\\n')",
  "(50505, Token.Text.Whitespace, '\\t')",
  "(50506, Token.Text, 'else')",
  "(50510, Token.Text.NewLine, '\\n')",
  "(50511, Token.Text.Whitespace, '\\t  ')",
  "(50514, Token.Comment.Single, '# Only an error if not doing a dry-run.')",
  "(50553, Token.Text.NewLine, '\\n')",
  "(50554, Token.Text.Whitespace, '\\t  ')",
  "(50557, Token.Text, 'if')",
  "(50559, Token.Text.Whitespace, ' ')",
  "(50560, Token.Text, 'test')",
  "(50564, Token.Text.Whitespace, ' ')",
  "(50565, Token.Text, '-z')",
  "(50567, Token.Text.Whitespace, ' ')",
  "(50568, Token.Literal.String.Double, '\"$run\"')",
  "(50574, Token.Text, ';')",
  "(50575, Token.Text.Whitespace, ' ')",
  "(50576, Token.Text, 'then')",
  "(50580, Token.Text.NewLine, '\\n')",
  "(50581, Token.Text.Whitespace, '\\t    ')",
  "(50586, Token.Text, '$echo')",
  "(50591, Token.Text.Whitespace, ' ')",
  "(50592, Token.Literal.String.Double, '\"$modename: \\\\`$arg\\' is not a valid libtool object\"')",
  "(50642, Token.Text.Whitespace, ' ')",
  "(50643, Token.Text, '1>&2')",
  "(50647, Token.Text.NewLine, '\\n')",
  "(50648, Token.Text.Whitespace, '\\t    ')",
  "(50653, Token.Text, 'exit')",
  "(50657, Token.Text.Whitespace, ' ')",
  "(50658, Token.Text, '$EXIT_FAILURE')",
  "(50671, Token.Text.NewLine, '\\n')",
  "(50672, Token.Text.Whitespace, '\\t  ')",
  "(50675, Token.Text, 'else')",
  "(50679, Token.Text.NewLine, '\\n')",
  "(50680, Token.Text.Whitespace, '\\t    ')",
  "(50685, Token.Comment.Single, '# Dry-run case.')",
  "(50700, Token.Text.NewLine, '\\n\\n')",
  "(50702, Token.Text.Whitespace, '\\t    ')",
  "(50707, Token.Comment.Single, '# Extract subdirectory from the argument.')",
  "(50748, Token.Text.NewLine, '\\n')",
  "(50749, Token.Text.Whitespace, '\\t    ')",
  "(50754, Token.Text, 'xdir=`$echo')",
  "(50765, Token.Text.Whitespace, ' ')",
  "(50766, Token.Literal.String.Double, '\"X$arg\"')",
  "(50773, Token.Text.Whitespace, ' ')",
  "(50774, Token.Text, '|')",
  "(50775, Token.Text.Whitespace, ' ')",
  "(50776, Token.Text, '$Xsed')",
  "(50781, Token.Text.Whitespace, ' ')",
  "(50782, Token.Text, '-e')",
  "(50784, Token.Text.Whitespace, ' ')",
  "(50785, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(50798, Token.Text, '`')",
  "(50799, Token.Text.NewLine, '\\n')",
  "(50800, Token.Text.Whitespace, '\\t    ')",
  "(50805, Token.Text, 'if')",
  "(50807, Token.Text.Whitespace, ' ')",
  "(50808, Token.Text, 'test')",
  "(50812, Token.Text.Whitespace, ' ')",
  "(50813, Token.Literal.String.Double, '\"X$xdir\"')",
  "(50821, Token.Text.Whitespace, ' ')",
  "(50822, Token.Text, '=')",
  "(50823, Token.Text.Whitespace, ' ')",
  "(50824, Token.Literal.String.Double, '\"X$arg\"')",
  "(50831, Token.Text, ';')",
  "(50832, Token.Text.Whitespace, ' ')",
  "(50833, Token.Text, 'then')",
  "(50837, Token.Text.NewLine, '\\n')",
  "(50838, Token.Text.Whitespace, '\\t      ')",
  "(50845, Token.Text, 'xdir=')",
  "(50850, Token.Text.NewLine, '\\n')",
  "(50851, Token.Text.Whitespace, '\\t    ')",
  "(50856, Token.Text, 'else')",
  "(50860, Token.Text.NewLine, '\\n')",
  "(50861, Token.Text.Whitespace, '\\t      ')",
  "(50868, Token.Text, 'xdir=\"$xdir/\"')",
  "(50881, Token.Text.NewLine, '\\n')",
  "(50882, Token.Text.Whitespace, '\\t    ')",
  "(50887, Token.Text, 'fi')",
  "(50889, Token.Text.NewLine, '\\n\\n')",
  "(50891, Token.Text.Whitespace, '\\t    ')",
  "(50896, Token.Text, 'pic_object=`$echo')",
  "(50913, Token.Text.Whitespace, ' ')",
  "(50914, Token.Literal.String.Double, '\"X${xdir}${objdir}/${arg}\"')",
  "(50940, Token.Text.Whitespace, ' ')",
  "(50941, Token.Text, '|')",
  "(50942, Token.Text.Whitespace, ' ')",
  "(50943, Token.Text, '$Xsed')",
  "(50948, Token.Text.Whitespace, ' ')",
  "(50949, Token.Text, '-e')",
  "(50951, Token.Text.Whitespace, ' ')",
  "(50952, Token.Literal.String.Double, '\"$lo2o\"')",
  "(50959, Token.Text, '`')",
  "(50960, Token.Text.NewLine, '\\n')",
  "(50961, Token.Text.Whitespace, '\\t    ')",
  "(50966, Token.Text, 'non_pic_object=`$echo')",
  "(50987, Token.Text.Whitespace, ' ')",
  "(50988, Token.Literal.String.Double, '\"X${xdir}${arg}\"')",
  "(51004, Token.Text.Whitespace, ' ')",
  "(51005, Token.Text, '|')",
  "(51006, Token.Text.Whitespace, ' ')",
  "(51007, Token.Text, '$Xsed')",
  "(51012, Token.Text.Whitespace, ' ')",
  "(51013, Token.Text, '-e')",
  "(51015, Token.Text.Whitespace, ' ')",
  "(51016, Token.Literal.String.Double, '\"$lo2o\"')",
  "(51023, Token.Text, '`')",
  "(51024, Token.Text.NewLine, '\\n')",
  "(51025, Token.Text.Whitespace, '\\t    ')",
  "(51030, Token.Text, 'libobjs=\"$libobjs')",
  "(51047, Token.Text.Whitespace, ' ')",
  "(51048, Token.Text, '$pic_object\"')",
  "(51060, Token.Text.NewLine, '\\n')",
  "(51061, Token.Text.Whitespace, '\\t    ')",
  "(51066, Token.Text, 'non_pic_objects=\"$non_pic_objects')",
  "(51099, Token.Text.Whitespace, ' ')",
  "(51100, Token.Text, '$non_pic_object\"')",
  "(51116, Token.Text.NewLine, '\\n')",
  "(51117, Token.Text.Whitespace, '\\t  ')",
  "(51120, Token.Text, 'fi')",
  "(51122, Token.Text.NewLine, '\\n')",
  "(51123, Token.Text.Whitespace, '\\t')",
  "(51124, Token.Text, 'fi')",
  "(51126, Token.Text.NewLine, '\\n')",
  "(51127, Token.Text.Whitespace, '\\t')",
  "(51128, Token.Text, ';;')",
  "(51130, Token.Text.NewLine, '\\n\\n')",
  "(51132, Token.Text.Whitespace, '      ')",
  "(51138, Token.Text, '*.$libext)')",
  "(51148, Token.Text.NewLine, '\\n')",
  "(51149, Token.Text.Whitespace, '\\t')",
  "(51150, Token.Comment.Single, '# An archive.')",
  "(51163, Token.Text.NewLine, '\\n')",
  "(51164, Token.Text.Whitespace, '\\t')",
  "(51165, Token.Text, 'deplibs=\"$deplibs')",
  "(51182, Token.Text.Whitespace, ' ')",
  "(51183, Token.Text, '$arg\"')",
  "(51188, Token.Text.NewLine, '\\n')",
  "(51189, Token.Text.Whitespace, '\\t')",
  "(51190, Token.Text, 'old_deplibs=\"$old_deplibs')",
  "(51215, Token.Text.Whitespace, ' ')",
  "(51216, Token.Text, '$arg\"')",
  "(51221, Token.Text.NewLine, '\\n')",
  "(51222, Token.Text.Whitespace, '\\t')",
  "(51223, Token.Text, 'continue')",
  "(51231, Token.Text.NewLine, '\\n')",
  "(51232, Token.Text.Whitespace, '\\t')",
  "(51233, Token.Text, ';;')",
  "(51235, Token.Text.NewLine, '\\n\\n')",
  "(51237, Token.Text.Whitespace, '      ')",
  "(51243, Token.Text, '*.la)')",
  "(51248, Token.Text.NewLine, '\\n')",
  "(51249, Token.Text.Whitespace, '\\t')",
  "(51250, Token.Comment.Single, '# A libtool-controlled library.')",
  "(51281, Token.Text.NewLine, '\\n\\n')",
  "(51283, Token.Text.Whitespace, '\\t')",
  "(51284, Token.Text, 'if')",
  "(51286, Token.Text.Whitespace, ' ')",
  "(51287, Token.Text, 'test')",
  "(51291, Token.Text.Whitespace, ' ')",
  "(51292, Token.Literal.String.Double, '\"$prev\"')",
  "(51299, Token.Text.Whitespace, ' ')",
  "(51300, Token.Text, '=')",
  "(51301, Token.Text.Whitespace, ' ')",
  "(51302, Token.Text, 'dlfiles;')",
  "(51310, Token.Text.Whitespace, ' ')",
  "(51311, Token.Text, 'then')",
  "(51315, Token.Text.NewLine, '\\n')",
  "(51316, Token.Text.Whitespace, '\\t  ')",
  "(51319, Token.Comment.Single, '# This library was specified with -dlopen.')",
  "(51361, Token.Text.NewLine, '\\n')",
  "(51362, Token.Text.Whitespace, '\\t  ')",
  "(51365, Token.Text, 'dlfiles=\"$dlfiles')",
  "(51382, Token.Text.Whitespace, ' ')",
  "(51383, Token.Text, '$arg\"')",
  "(51388, Token.Text.NewLine, '\\n')",
  "(51389, Token.Text.Whitespace, '\\t  ')",
  "(51392, Token.Text, 'prev=')",
  "(51397, Token.Text.NewLine, '\\n')",
  "(51398, Token.Text.Whitespace, '\\t')",
  "(51399, Token.Text, 'elif')",
  "(51403, Token.Text.Whitespace, ' ')",
  "(51404, Token.Text, 'test')",
  "(51408, Token.Text.Whitespace, ' ')",
  "(51409, Token.Literal.String.Double, '\"$prev\"')",
  "(51416, Token.Text.Whitespace, ' ')",
  "(51417, Token.Text, '=')",
  "(51418, Token.Text.Whitespace, ' ')",
  "(51419, Token.Text, 'dlprefiles;')",
  "(51430, Token.Text.Whitespace, ' ')",
  "(51431, Token.Text, 'then')",
  "(51435, Token.Text.NewLine, '\\n')",
  "(51436, Token.Text.Whitespace, '\\t  ')",
  "(51439, Token.Comment.Single, '# The library was specified with -dlpreopen.')",
  "(51483, Token.Text.NewLine, '\\n')",
  "(51484, Token.Text.Whitespace, '\\t  ')",
  "(51487, Token.Text, 'dlprefiles=\"$dlprefiles')",
  "(51510, Token.Text.Whitespace, ' ')",
  "(51511, Token.Text, '$arg\"')",
  "(51516, Token.Text.NewLine, '\\n')",
  "(51517, Token.Text.Whitespace, '\\t  ')",
  "(51520, Token.Text, 'prev=')",
  "(51525, Token.Text.NewLine, '\\n')",
  "(51526, Token.Text.Whitespace, '\\t')",
  "(51527, Token.Text, 'else')",
  "(51531, Token.Text.NewLine, '\\n')",
  "(51532, Token.Text.Whitespace, '\\t  ')",
  "(51535, Token.Text, 'deplibs=\"$deplibs')",
  "(51552, Token.Text.Whitespace, ' ')",
  "(51553, Token.Text, '$arg\"')",
  "(51558, Token.Text.NewLine, '\\n')",
  "(51559, Token.Text.Whitespace, '\\t')",
  "(51560, Token.Text, 'fi')",
  "(51562, Token.Text.NewLine, '\\n')",
  "(51563, Token.Text.Whitespace, '\\t')",
  "(51564, Token.Text, 'continue')",
  "(51572, Token.Text.NewLine, '\\n')",
  "(51573, Token.Text.Whitespace, '\\t')",
  "(51574, Token.Text, ';;')",
  "(51576, Token.Text.NewLine, '\\n\\n')",
  "(51578, Token.Text.Whitespace, '      ')",
  "(51584, Token.Comment.Single, '# Some other compiler argument.')",
  "(51615, Token.Text.NewLine, '\\n')",
  "(51616, Token.Text.Whitespace, '      ')",
  "(51622, Token.Text, '*)')",
  "(51624, Token.Text.NewLine, '\\n')",
  "(51625, Token.Text.Whitespace, '\\t')",
  "(51626, Token.Comment.Single, '# Unknown arguments in both finalize_command and compile_command need')",
  "(51695, Token.Text.NewLine, '\\n')",
  "(51696, Token.Text.Whitespace, '\\t')",
  "(51697, Token.Comment.Single, '# to be aesthetically quoted because they are evaled later.')",
  "(51756, Token.Text.NewLine, '\\n')",
  "(51757, Token.Text.Whitespace, '\\t')",
  "(51758, Token.Text, 'arg=`$echo')",
  "(51768, Token.Text.Whitespace, ' ')",
  "(51769, Token.Literal.String.Double, '\"X$arg\"')",
  "(51776, Token.Text.Whitespace, ' ')",
  "(51777, Token.Text, '|')",
  "(51778, Token.Text.Whitespace, ' ')",
  "(51779, Token.Text, '$Xsed')",
  "(51784, Token.Text.Whitespace, ' ')",
  "(51785, Token.Text, '-e')",
  "(51787, Token.Text.Whitespace, ' ')",
  "(51788, Token.Literal.String.Double, '\"$sed_quote_subst\"')",
  "(51806, Token.Text, '`')",
  "(51807, Token.Text.NewLine, '\\n')",
  "(51808, Token.Text.Whitespace, '\\t')",
  "(51809, Token.Text, 'case')",
  "(51813, Token.Text.Whitespace, ' ')",
  "(51814, Token.Text, '$arg')",
  "(51818, Token.Text.Whitespace, ' ')",
  "(51819, Token.Text, 'in')",
  "(51821, Token.Text.NewLine, '\\n')",
  "(51822, Token.Text.Whitespace, '\\t')",
  "(51823, Token.Text, \"*[\\\\[\\\\~\\\\#\\\\^\\\\&\\\\*\\\\(\\\\)\\\\{\\\\}\\\\|\\\\;\\\\<\\\\>\\\\?\\\\'\\\\\")",
  "(51858, Token.Text.Whitespace, ' ')",
  "(51859, Token.Text, '\\\\')",
  "(51860, Token.Text.Whitespace, '\\t')",
  "(51861, Token.Text, ']*|*]*|\"\")')",
  "(51871, Token.Text.NewLine, '\\n')",
  "(51872, Token.Text.Whitespace, '\\t  ')",
  "(51875, Token.Text, 'arg=\"\\\\\"$arg\\\\\"\"')",
  "(51889, Token.Text.NewLine, '\\n')",
  "(51890, Token.Text.Whitespace, '\\t  ')",
  "(51893, Token.Text, ';;')",
  "(51895, Token.Text.NewLine, '\\n')",
  "(51896, Token.Text.Whitespace, '\\t')",
  "(51897, Token.Text, 'esac')",
  "(51901, Token.Text.NewLine, '\\n')",
  "(51902, Token.Text.Whitespace, '\\t')",
  "(51903, Token.Text, ';;')",
  "(51905, Token.Text.NewLine, '\\n')",
  "(51906, Token.Text.Whitespace, '      ')",
  "(51912, Token.Text, 'esac')",
  "(51916, Token.Text.Whitespace, ' ')",
  "(51917, Token.Comment.Single, '# arg')",
  "(51922, Token.Text.NewLine, '\\n\\n')",
  "(51924, Token.Text.Whitespace, '      ')",
  "(51930, Token.Comment.Single, '# Now actually substitute the argument into the commands.')",
  "(51987, Token.Text.NewLine, '\\n')",
  "(51988, Token.Text.Whitespace, '      ')",
  "(51994, Token.Text, 'if')",
  "(51996, Token.Text.Whitespace, ' ')",
  "(51997, Token.Text, 'test')",
  "(52001, Token.Text.Whitespace, ' ')",
  "(52002, Token.Text, '-n')",
  "(52004, Token.Text.Whitespace, ' ')",
  "(52005, Token.Literal.String.Double, '\"$arg\"')",
  "(52011, Token.Text, ';')",
  "(52012, Token.Text.Whitespace, ' ')",
  "(52013, Token.Text, 'then')",
  "(52017, Token.Text.NewLine, '\\n')",
  "(52018, Token.Text.Whitespace, '\\t')",
  "(52019, Token.Text, 'compile_command=\"$compile_command')",
  "(52052, Token.Text.Whitespace, ' ')",
  "(52053, Token.Text, '$arg\"')",
  "(52058, Token.Text.NewLine, '\\n')",
  "(52059, Token.Text.Whitespace, '\\t')",
  "(52060, Token.Text, 'finalize_command=\"$finalize_command')",
  "(52095, Token.Text.Whitespace, ' ')",
  "(52096, Token.Text, '$arg\"')",
  "(52101, Token.Text.NewLine, '\\n')",
  "(52102, Token.Text.Whitespace, '      ')",
  "(52108, Token.Text, 'fi')",
  "(52110, Token.Text.NewLine, '\\n')",
  "(52111, Token.Text.Whitespace, '    ')",
  "(52115, Token.Text, 'done')",
  "(52119, Token.Text.Whitespace, ' ')",
  "(52120, Token.Comment.Single, '# argument parsing loop')",
  "(52143, Token.Text.NewLine, '\\n\\n')",
  "(52145, Token.Text.Whitespace, '    ')",
  "(52149, Token.Text, 'if')",
  "(52151, Token.Text.Whitespace, ' ')",
  "(52152, Token.Text, 'test')",
  "(52156, Token.Text.Whitespace, ' ')",
  "(52157, Token.Text, '-n')",
  "(52159, Token.Text.Whitespace, ' ')",
  "(52160, Token.Literal.String.Double, '\"$prev\"')",
  "(52167, Token.Text, ';')",
  "(52168, Token.Text.Whitespace, ' ')",
  "(52169, Token.Text, 'then')",
  "(52173, Token.Text.NewLine, '\\n')",
  "(52174, Token.Text.Whitespace, '      ')",
  "(52180, Token.Text, '$echo')",
  "(52185, Token.Text.Whitespace, ' ')",
  "(52186, Token.Literal.String.Double, '\"$modename: the \\\\`$prevarg\\' option requires an argument\"')",
  "(52242, Token.Text.Whitespace, ' ')",
  "(52243, Token.Text, '1>&2')",
  "(52247, Token.Text.NewLine, '\\n')",
  "(52248, Token.Text.Whitespace, '      ')",
  "(52254, Token.Text, '$echo')",
  "(52259, Token.Text.Whitespace, ' ')",
  "(52260, Token.Literal.String.Double, '\"$help\"')",
  "(52267, Token.Text.Whitespace, ' ')",
  "(52268, Token.Text, '1>&2')",
  "(52272, Token.Text.NewLine, '\\n')",
  "(52273, Token.Text.Whitespace, '      ')",
  "(52279, Token.Text, 'exit')",
  "(52283, Token.Text.Whitespace, ' ')",
  "(52284, Token.Text, '$EXIT_FAILURE')",
  "(52297, Token.Text.NewLine, '\\n')",
  "(52298, Token.Text.Whitespace, '    ')",
  "(52302, Token.Text, 'fi')",
  "(52304, Token.Text.NewLine, '\\n\\n')",
  "(52306, Token.Text.Whitespace, '    ')",
  "(52310, Token.Text, 'if')",
  "(52312, Token.Text.Whitespace, ' ')",
  "(52313, Token.Text, 'test')",
  "(52317, Token.Text.Whitespace, ' ')",
  "(52318, Token.Literal.String.Double, '\"$export_dynamic\"')",
  "(52335, Token.Text.Whitespace, ' ')",
  "(52336, Token.Text, '=')",
  "(52337, Token.Text.Whitespace, ' ')",
  "(52338, Token.Text, 'yes')",
  "(52341, Token.Text.Whitespace, ' ')",
  "(52342, Token.Text, '&&')",
  "(52344, Token.Text.Whitespace, ' ')",
  "(52345, Token.Text, 'test')",
  "(52349, Token.Text.Whitespace, ' ')",
  "(52350, Token.Text, '-n')",
  "(52352, Token.Text.Whitespace, ' ')",
  "(52353, Token.Literal.String.Double, '\"$export_dynamic_flag_spec\"')",
  "(52380, Token.Text, ';')",
  "(52381, Token.Text.Whitespace, ' ')",
  "(52382, Token.Text, 'then')",
  "(52386, Token.Text.NewLine, '\\n')",
  "(52387, Token.Text.Whitespace, '      ')",
  "(52393, Token.Text, 'eval')",
  "(52397, Token.Text.Whitespace, ' ')",
  "(52398, Token.Text, 'arg=\\\\\"$export_dynamic_flag_spec\\\\\"')",
  "(52431, Token.Text.NewLine, '\\n')",
  "(52432, Token.Text.Whitespace, '      ')",
  "(52438, Token.Text, 'compile_command=\"$compile_command')",
  "(52471, Token.Text.Whitespace, ' ')",
  "(52472, Token.Text, '$arg\"')",
  "(52477, Token.Text.NewLine, '\\n')",
  "(52478, Token.Text.Whitespace, '      ')",
  "(52484, Token.Text, 'finalize_command=\"$finalize_command')",
  "(52519, Token.Text.Whitespace, ' ')",
  "(52520, Token.Text, '$arg\"')",
  "(52525, Token.Text.NewLine, '\\n')",
  "(52526, Token.Text.Whitespace, '    ')",
  "(52530, Token.Text, 'fi')",
  "(52532, Token.Text.NewLine, '\\n\\n')",
  "(52534, Token.Text.Whitespace, '    ')",
  "(52538, Token.Text, 'oldlibs=')",
  "(52546, Token.Text.NewLine, '\\n')",
  "(52547, Token.Text.Whitespace, '    ')",
  "(52551, Token.Comment.Single, '# calculate the name of the file, without its directory')",
  "(52606, Token.Text.NewLine, '\\n')",
  "(52607, Token.Text.Whitespace, '    ')",
  "(52611, Token.Text, 'outputname=`$echo')",
  "(52628, Token.Text.Whitespace, ' ')",
  "(52629, Token.Literal.String.Double, '\"X$output\"')",
  "(52639, Token.Text.Whitespace, ' ')",
  "(52640, Token.Text, '|')",
  "(52641, Token.Text.Whitespace, ' ')",
  "(52642, Token.Text, '$Xsed')",
  "(52647, Token.Text.Whitespace, ' ')",
  "(52648, Token.Text, '-e')",
  "(52650, Token.Text.Whitespace, ' ')",
  "(52651, Token.Literal.String.Single, \"'s%^.*/%%'\")",
  "(52661, Token.Text, '`')",
  "(52662, Token.Text.NewLine, '\\n')",
  "(52663, Token.Text.Whitespace, '    ')",
  "(52667, Token.Text, 'libobjs_save=\"$libobjs\"')",
  "(52690, Token.Text.NewLine, '\\n\\n')",
  "(52692, Token.Text.Whitespace, '    ')",
  "(52696, Token.Text, 'if')",
  "(52698, Token.Text.Whitespace, ' ')",
  "(52699, Token.Text, 'test')",
  "(52703, Token.Text.Whitespace, ' ')",
  "(52704, Token.Text, '-n')",
  "(52706, Token.Text.Whitespace, ' ')",
  "(52707, Token.Literal.String.Double, '\"$shlibpath_var\"')",
  "(52723, Token.Text, ';')",
  "(52724, Token.Text.Whitespace, ' ')",
  "(52725, Token.Text, 'then')",
  "(52729, Token.Text.NewLine, '\\n')",
  "(52730, Token.Text.Whitespace, '      ')",
  "(52736, Token.Comment.Single, '# get the directories listed in $shlibpath_var')",
  "(52782, Token.Text.NewLine, '\\n')",
  "(52783, Token.Text.Whitespace, '      ')",
  "(52789, Token.Text, 'eval')",
  "(52793, Token.Text.Whitespace, ' ')",
  "(52794, Token.Text, 'shlib_search_path=\\\\`\\\\$echo')",
  "(52820, Token.Text.Whitespace, ' ')",
  "(52821, Token.Text, '\\\\\"X\\\\${$shlibpath_var}\\\\\"')",
  "(52844, Token.Text.Whitespace, ' ')",
  "(52845, Token.Text, '\\\\|')",
  "(52847, Token.Text.Whitespace, ' ')",
  "(52848, Token.Text, '\\\\$Xsed')",
  "(52854, Token.Text.Whitespace, ' ')",
  "(52855, Token.Text, '-e')",
  "(52857, Token.Text.Whitespace, ' ')",
  "(52858, Token.Text, \"\\\\'s/:/\")",
  "(52864, Token.Text.Whitespace, ' ')",
  "(52865, Token.Text, \"/g\\\\'\\\\`\")",
  "(52871, Token.Text.NewLine, '\\n')",
  "(52872, Token.Text.Whitespace, '    ')",
  "(52876, Token.Text, 'else')",
  "(52880, Token.Text.NewLine, '\\n')",
  "(52881, Token.Text.Whitespace, '      ')",
  "(52887, Token.Text, 'shlib_search_path=')",
  "(52905, Token.Text.NewLine, '\\n')",
  "(52906, Token.Text.Whitespace, '    ')",
  "(52910, Token.Text, 'fi')",
  "(52912, Token.Text.NewLine, '\\n')",
  "(52913, Token.Text.Whitespace, '    ')",
  "(52917, Token.Text, 'eval')",
  "(52921, Token.Text.Whitespace, ' ')",
  "(52922, Token.Text, 'sys_lib_search_path=\\\\\"$sys_lib_search_path_spec\\\\\"')",
  "(52971, Token.Text.NewLine, '\\n')",
  "(52972, Token.Text.Whitespace, '    ')",
  "(52976, Token.Text, 'eval')",
  "(52980, Token.Text.Whitespace, ' ')",
  "(52981, Token.Text, 'sys_lib_dlsearch_path=\\\\\"$sys_lib_dlsearch_path_spec\\\\\"')",
  "(53034, Token.Text.NewLine, '\\n\\n')",
  "(53036, Token.Text.Whitespace, '    ')",
  "(53040, Token.Text, 'output_objdir=`$echo')",
  "(53060, Token.Text.Whitespace, ' ')",
  "(53061, Token.Literal.String.Double, '\"X$output\"')",
  "(53071, Token.Text.Whitespace, ' ')",
  "(53072, Token.Text, '|')",
  "(53073, Token.Text.Whitespace, ' ')",
  "(53074, Token.Text, '$Xsed')",
  "(53079, Token.Text.Whitespace, ' ')",
  "(53080, Token.Text, '-e')",
  "(53082, Token.Text.Whitespace, ' ')",
  "(53083, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(53096, Token.Text, '`')",
  "(53097, Token.Text.NewLine, '\\n')",
  "(53098, Token.Text.Whitespace, '    ')",
  "(53102, Token.Text, 'if')",
  "(53104, Token.Text.Whitespace, ' ')",
  "(53105, Token.Text, 'test')",
  "(53109, Token.Text.Whitespace, ' ')",
  "(53110, Token.Literal.String.Double, '\"X$output_objdir\"')",
  "(53127, Token.Text.Whitespace, ' ')",
  "(53128, Token.Text, '=')",
  "(53129, Token.Text.Whitespace, ' ')",
  "(53130, Token.Literal.String.Double, '\"X$output\"')",
  "(53140, Token.Text, ';')",
  "(53141, Token.Text.Whitespace, ' ')",
  "(53142, Token.Text, 'then')",
  "(53146, Token.Text.NewLine, '\\n')",
  "(53147, Token.Text.Whitespace, '      ')",
  "(53153, Token.Text, 'output_objdir=\"$objdir\"')",
  "(53176, Token.Text.NewLine, '\\n')",
  "(53177, Token.Text.Whitespace, '    ')",
  "(53181, Token.Text, 'else')",
  "(53185, Token.Text.NewLine, '\\n')",
  "(53186, Token.Text.Whitespace, '      ')",
  "(53192, Token.Text, 'output_objdir=\"$output_objdir/$objdir\"')",
  "(53230, Token.Text.NewLine, '\\n')",
  "(53231, Token.Text.Whitespace, '    ')",
  "(53235, Token.Text, 'fi')",
  "(53237, Token.Text.NewLine, '\\n')",
  "(53238, Token.Text.Whitespace, '    ')",
  "(53242, Token.Comment.Single, '# Create the object directory.')",
  "(53272, Token.Text.NewLine, '\\n')",
  "(53273, Token.Text.Whitespace, '    ')",
  "(53277, Token.Text, 'if')",
  "(53279, Token.Text.Whitespace, ' ')",
  "(53280, Token.Text, 'test')",
  "(53284, Token.Text.Whitespace, ' ')",
  "(53285, Token.Text, '!')",
  "(53286, Token.Text.Whitespace, ' ')",
  "(53287, Token.Text, '-d')",
  "(53289, Token.Text.Whitespace, ' ')",
  "(53290, Token.Literal.String.Double, '\"$output_objdir\"')",
  "(53306, Token.Text, ';')",
  "(53307, Token.Text.Whitespace, ' ')",
  "(53308, Token.Text, 'then')",
  "(53312, Token.Text.NewLine, '\\n')",
  "(53313, Token.Text.Whitespace, '      ')",
  "(53319, Token.Text, '$show')",
  "(53324, Token.Text.Whitespace, ' ')",
  "(53325, Token.Literal.String.Double, '\"$mkdir $output_objdir\"')",
  "(53348, Token.Text.NewLine, '\\n')",
  "(53349, Token.Text.Whitespace, '      ')",
  "(53355, Token.Text, '$run')",
  "(53359, Token.Text.Whitespace, ' ')",
  "(53360, Token.Text, '$mkdir')",
  "(53366, Token.Text.Whitespace, ' ')",
  "(53367, Token.Text, '$output_objdir')",
  "(53381, Token.Text.NewLine, '\\n')",
  "(53382, Token.Text.Whitespace, '      ')",
  "(53388, Token.Text, 'exit_status=$?')",
  "(53402, Token.Text.NewLine, '\\n')",
  "(53403, Token.Text.Whitespace, '      ')",
  "(53409, Token.Text, 'if')",
  "(53411, Token.Text.Whitespace, ' ')",
  "(53412, Token.Text, 'test')",
  "(53416, Token.Text.Whitespace, ' ')",
  "(53417, Token.Literal.String.Double, '\"$exit_status\"')",
  "(53431, Token.Text.Whitespace, ' ')",
  "(53432, Token.Text, '-ne')",
  "(53435, Token.Text.Whitespace, ' ')",
  "(53436, Token.Text, '0')",
  "(53437, Token.Text.Whitespace, ' ')",
  "(53438, Token.Text, '&&')",
  "(53440, Token.Text.Whitespace, ' ')",
  "(53441, Token.Text, 'test')",
  "(53445, Token.Text.Whitespace, ' ')",
  "(53446, Token.Text, '!')",
  "(53447, Token.Text.Whitespace, ' ')",
  "(53448, Token.Text, '-d')",
  "(53450, Token.Text.Whitespace, ' ')",
  "(53451, Token.Literal.String.Double, '\"$output_objdir\"')",
  "(53467, Token.Text, ';')",
  "(53468, Token.Text.Whitespace, ' ')",
  "(53469, Token.Text, 'then')",
  "(53473, Token.Text.NewLine, '\\n')",
  "(53474, Token.Text.Whitespace, '\\t')",
  "(53475, Token.Text, 'exit')",
  "(53479, Token.Text.Whitespace, ' ')",
  "(53480, Token.Text, '$exit_status')",
  "(53492, Token.Text.NewLine, '\\n')",
  "(53493, Token.Text.Whitespace, '      ')",
  "(53499, Token.Text, 'fi')",
  "(53501, Token.Text.NewLine, '\\n')",
  "(53502, Token.Text.Whitespace, '    ')",
  "(53506, Token.Text, 'fi')",
  "(53508, Token.Text.NewLine, '\\n\\n')",
  "(53510, Token.Text.Whitespace, '    ')",
  "(53514, Token.Comment.Single, '# Determine the type of output')",
  "(53544, Token.Text.NewLine, '\\n')",
  "(53545, Token.Text.Whitespace, '    ')",
  "(53549, Token.Text, 'case')",
  "(53553, Token.Text.Whitespace, ' ')",
  "(53554, Token.Text, '$output')",
  "(53561, Token.Text.Whitespace, ' ')",
  "(53562, Token.Text, 'in')",
  "(53564, Token.Text.NewLine, '\\n')",
  "(53565, Token.Text.Whitespace, '    ')",
  "(53569, Token.Literal.String.Double, '\"\"')",
  "(53571, Token.Text, ')')",
  "(53572, Token.Text.NewLine, '\\n')",
  "(53573, Token.Text.Whitespace, '      ')",
  "(53579, Token.Text, '$echo')",
  "(53584, Token.Text.Whitespace, ' ')",
  "(53585, Token.Literal.String.Double, '\"$modename: you must specify an output file\"')",
  "(53629, Token.Text.Whitespace, ' ')",
  "(53630, Token.Text, '1>&2')",
  "(53634, Token.Text.NewLine, '\\n')",
  "(53635, Token.Text.Whitespace, '      ')",
  "(53641, Token.Text, '$echo')",
  "(53646, Token.Text.Whitespace, ' ')",
  "(53647, Token.Literal.String.Double, '\"$help\"')",
  "(53654, Token.Text.Whitespace, ' ')",
  "(53655, Token.Text, '1>&2')",
  "(53659, Token.Text.NewLine, '\\n')",
  "(53660, Token.Text.Whitespace, '      ')",
  "(53666, Token.Text, 'exit')",
  "(53670, Token.Text.Whitespace, ' ')",
  "(53671, Token.Text, '$EXIT_FAILURE')",
  "(53684, Token.Text.NewLine, '\\n')",
  "(53685, Token.Text.Whitespace, '      ')",
  "(53691, Token.Text, ';;')",
  "(53693, Token.Text.NewLine, '\\n')",
  "(53694, Token.Text.Whitespace, '    ')",
  "(53698, Token.Text, '*.$libext)')",
  "(53708, Token.Text.Whitespace, ' ')",
  "(53709, Token.Text, 'linkmode=oldlib')",
  "(53724, Token.Text.Whitespace, ' ')",
  "(53725, Token.Text, ';;')",
  "(53727, Token.Text.NewLine, '\\n')",
  "(53728, Token.Text.Whitespace, '    ')",
  "(53732, Token.Text, '*.lo')",
  "(53736, Token.Text.Whitespace, ' ')",
  "(53737, Token.Text, '|')",
  "(53738, Token.Text.Whitespace, ' ')",
  "(53739, Token.Text, '*.$objext)')",
  "(53749, Token.Text.Whitespace, ' ')",
  "(53750, Token.Text, 'linkmode=obj')",
  "(53762, Token.Text.Whitespace, ' ')",
  "(53763, Token.Text, ';;')",
  "(53765, Token.Text.NewLine, '\\n')",
  "(53766, Token.Text.Whitespace, '    ')",
  "(53770, Token.Text, '*.la)')",
  "(53775, Token.Text.Whitespace, ' ')",
  "(53776, Token.Text, 'linkmode=lib')",
  "(53788, Token.Text.Whitespace, ' ')",
  "(53789, Token.Text, ';;')",
  "(53791, Token.Text.NewLine, '\\n')",
  "(53792, Token.Text.Whitespace, '    ')",
  "(53796, Token.Text, '*)')",
  "(53798, Token.Text.Whitespace, ' ')",
  "(53799, Token.Text, 'linkmode=prog')",
  "(53812, Token.Text.Whitespace, ' ')",
  "(53813, Token.Text, ';;')",
  "(53815, Token.Text.Whitespace, ' ')",
  "(53816, Token.Comment.Single, '# Anything else should be a program.')",
  "(53852, Token.Text.NewLine, '\\n')",
  "(53853, Token.Text.Whitespace, '    ')",
  "(53857, Token.Text, 'esac')",
  "(53861, Token.Text.NewLine, '\\n\\n')",
  "(53863, Token.Text.Whitespace, '    ')",
  "(53867, Token.Text, 'case')",
  "(53871, Token.Text.Whitespace, ' ')",
  "(53872, Token.Text, '$host')",
  "(53877, Token.Text.Whitespace, ' ')",
  "(53878, Token.Text, 'in')",
  "(53880, Token.Text.NewLine, '\\n')",
  "(53881, Token.Text.Whitespace, '    ')",
  "(53885, Token.Text, '*cygwin*')",
  "(53893, Token.Text.Whitespace, ' ')",
  "(53894, Token.Text, '|')",
  "(53895, Token.Text.Whitespace, ' ')",
  "(53896, Token.Text, '*mingw*')",
  "(53903, Token.Text.Whitespace, ' ')",
  "(53904, Token.Text, '|')",
  "(53905, Token.Text.Whitespace, ' ')",
  "(53906, Token.Text, '*pw32*)')",
  "(53913, Token.Text.NewLine, '\\n')",
  "(53914, Token.Text.Whitespace, '      ')",
  "(53920, Token.Comment.Single, \"# don't eliminate duplications in $postdeps and $predeps\")",
  "(53976, Token.Text.NewLine, '\\n')",
  "(53977, Token.Text.Whitespace, '      ')",
  "(53983, Token.Text, 'duplicate_compiler_generated_deps=yes')",
  "(54020, Token.Text.NewLine, '\\n')",
  "(54021, Token.Text.Whitespace, '      ')",
  "(54027, Token.Text, ';;')",
  "(54029, Token.Text.NewLine, '\\n')",
  "(54030, Token.Text.Whitespace, '    ')",
  "(54034, Token.Text, '*)')",
  "(54036, Token.Text.NewLine, '\\n')",
  "(54037, Token.Text.Whitespace, '      ')",
  "(54043, Token.Text, 'duplicate_compiler_generated_deps=$duplicate_deps')",
  "(54092, Token.Text.NewLine, '\\n')",
  "(54093, Token.Text.Whitespace, '      ')",
  "(54099, Token.Text, ';;')",
  "(54101, Token.Text.NewLine, '\\n')",
  "(54102, Token.Text.Whitespace, '    ')",
  "(54106, Token.Text, 'esac')",
  "(54110, Token.Text.NewLine, '\\n')",
  "(54111, Token.Text.Whitespace, '    ')",
  "(54115, Token.Text, 'specialdeplibs=')",
  "(54130, Token.Text.NewLine, '\\n\\n')",
  "(54132, Token.Text.Whitespace, '    ')",
  "(54136, Token.Text, 'libs=')",
  "(54141, Token.Text.NewLine, '\\n')",
  "(54142, Token.Text.Whitespace, '    ')",
  "(54146, Token.Comment.Single, '# Find all interdependent deplibs by searching for libraries')",
  "(54206, Token.Text.NewLine, '\\n')",
  "(54207, Token.Text.Whitespace, '    ')",
  "(54211, Token.Comment.Single, '# that are linked more than once (e.g. -la -lb -la)')",
  "(54262, Token.Text.NewLine, '\\n')",
  "(54263, Token.Text.Whitespace, '    ')",
  "(54267, Token.Text, 'for')",
  "(54270, Token.Text.Whitespace, ' ')",
  "(54271, Token.Text, 'deplib')",
  "(54277, Token.Text.Whitespace, ' ')",
  "(54278, Token.Text, 'in')",
  "(54280, Token.Text.Whitespace, ' ')",
  "(54281, Token.Text, '$deplibs;')",
  "(54290, Token.Text.Whitespace, ' ')",
  "(54291, Token.Text, 'do')",
  "(54293, Token.Text.NewLine, '\\n')",
  "(54294, Token.Text.Whitespace, '      ')",
  "(54300, Token.Text, 'if')",
  "(54302, Token.Text.Whitespace, ' ')",
  "(54303, Token.Text, 'test')",
  "(54307, Token.Text.Whitespace, ' ')",
  "(54308, Token.Literal.String.Double, '\"X$duplicate_deps\"')",
  "(54326, Token.Text.Whitespace, ' ')",
  "(54327, Token.Text, '=')",
  "(54328, Token.Text.Whitespace, ' ')",
  "(54329, Token.Literal.String.Double, '\"Xyes\"')",
  "(54335, Token.Text.Whitespace, ' ')",
  "(54336, Token.Text, ';')",
  "(54337, Token.Text.Whitespace, ' ')",
  "(54338, Token.Text, 'then')",
  "(54342, Token.Text.NewLine, '\\n')",
  "(54343, Token.Text.Whitespace, '\\t')",
  "(54344, Token.Text, 'case')",
  "(54348, Token.Text.Whitespace, ' ')",
  "(54349, Token.Literal.String.Double, '\"$libs \"')",
  "(54357, Token.Text.Whitespace, ' ')",
  "(54358, Token.Text, 'in')",
  "(54360, Token.Text.NewLine, '\\n')",
  "(54361, Token.Text.Whitespace, '\\t')",
  "(54362, Token.Text, '*\"')",
  "(54364, Token.Text.Whitespace, ' ')",
  "(54365, Token.Text, '$deplib')",
  "(54372, Token.Text.Whitespace, ' ')",
  "(54373, Token.Literal.String.Double, '\"*) specialdeplibs=\"')",
  "(54393, Token.Text, '$specialdeplibs')",
  "(54408, Token.Text.Whitespace, ' ')",
  "(54409, Token.Text, '$deplib\"')",
  "(54417, Token.Text.Whitespace, ' ')",
  "(54418, Token.Text, ';;')",
  "(54420, Token.Text.NewLine, '\\n')",
  "(54421, Token.Text.Whitespace, '\\t')",
  "(54422, Token.Text, 'esac')",
  "(54426, Token.Text.NewLine, '\\n')",
  "(54427, Token.Text.Whitespace, '      ')",
  "(54433, Token.Text, 'fi')",
  "(54435, Token.Text.NewLine, '\\n')",
  "(54436, Token.Text.Whitespace, '      ')",
  "(54442, Token.Text, 'libs=\"$libs')",
  "(54453, Token.Text.Whitespace, ' ')",
  "(54454, Token.Text, '$deplib\"')",
  "(54462, Token.Text.NewLine, '\\n')",
  "(54463, Token.Text.Whitespace, '    ')",
  "(54467, Token.Text, 'done')",
  "(54471, Token.Text.NewLine, '\\n\\n')",
  "(54473, Token.Text.Whitespace, '    ')",
  "(54477, Token.Text, 'if')",
  "(54479, Token.Text.Whitespace, ' ')",
  "(54480, Token.Text, 'test')",
  "(54484, Token.Text.Whitespace, ' ')",
  "(54485, Token.Literal.String.Double, '\"$linkmode\"')",
  "(54496, Token.Text.Whitespace, ' ')",
  "(54497, Token.Text, '=')",
  "(54498, Token.Text.Whitespace, ' ')",
  "(54499, Token.Text, 'lib;')",
  "(54503, Token.Text.Whitespace, ' ')",
  "(54504, Token.Text, 'then')",
  "(54508, Token.Text.NewLine, '\\n')",
  "(54509, Token.Text.Whitespace, '      ')",
  "(54515, Token.Text, 'libs=\"$predeps')",
  "(54529, Token.Text.Whitespace, ' ')",
  "(54530, Token.Text, '$libs')",
  "(54535, Token.Text.Whitespace, ' ')",
  "(54536, Token.Text, '$compiler_lib_search_path')",
  "(54561, Token.Text.Whitespace, ' ')",
  "(54562, Token.Text, '$postdeps\"')",
  "(54572, Token.Text.NewLine, '\\n\\n')",
  "(54574, Token.Text.Whitespace, '      ')",
  "(54580, Token.Comment.Single, '# Compute libraries that are listed more than once in $predeps')",
  "(54642, Token.Text.NewLine, '\\n')",
  "(54643, Token.Text.Whitespace, '      ')",
  "(54649, Token.Comment.Single, '# $postdeps and mark them as special (i.e., whose duplicates are')",
  "(54713, Token.Text.NewLine, '\\n')",
  "(54714, Token.Text.Whitespace, '      ')",
  "(54720, Token.Comment.Single, '# not to be eliminated).')",
  "(54744, Token.Text.NewLine, '\\n')",
  "(54745, Token.Text.Whitespace, '      ')",
  "(54751, Token.Text, 'pre_post_deps=')",
  "(54765, Token.Text.NewLine, '\\n')",
  "(54766, Token.Text.Whitespace, '      ')",
  "(54772, Token.Text, 'if')",
  "(54774, Token.Text.Whitespace, ' ')",
  "(54775, Token.Text, 'test')",
  "(54779, Token.Text.Whitespace, ' ')",
  "(54780, Token.Literal.String.Double, '\"X$duplicate_compiler_generated_deps\"')",
  "(54817, Token.Text.Whitespace, ' ')",
  "(54818, Token.Text, '=')",
  "(54819, Token.Text.Whitespace, ' ')",
  "(54820, Token.Literal.String.Double, '\"Xyes\"')",
  "(54826, Token.Text.Whitespace, ' ')",
  "(54827, Token.Text, ';')",
  "(54828, Token.Text.Whitespace, ' ')",
  "(54829, Token.Text, 'then')",
  "(54833, Token.Text.NewLine, '\\n')",
  "(54834, Token.Text.Whitespace, '\\t')",
  "(54835, Token.Text, 'for')",
  "(54838, Token.Text.Whitespace, ' ')",
  "(54839, Token.Text, 'pre_post_dep')",
  "(54851, Token.Text.Whitespace, ' ')",
  "(54852, Token.Text, 'in')",
  "(54854, Token.Text.Whitespace, ' ')",
  "(54855, Token.Text, '$predeps')",
  "(54863, Token.Text.Whitespace, ' ')",
  "(54864, Token.Text, '$postdeps;')",
  "(54874, Token.Text.Whitespace, ' ')",
  "(54875, Token.Text, 'do')",
  "(54877, Token.Text.NewLine, '\\n')",
  "(54878, Token.Text.Whitespace, '\\t  ')",
  "(54881, Token.Text, 'case')",
  "(54885, Token.Text.Whitespace, ' ')",
  "(54886, Token.Literal.String.Double, '\"$pre_post_deps \"')",
  "(54903, Token.Text.Whitespace, ' ')",
  "(54904, Token.Text, 'in')",
  "(54906, Token.Text.NewLine, '\\n')",
  "(54907, Token.Text.Whitespace, '\\t  ')",
  "(54910, Token.Text, '*\"')",
  "(54912, Token.Text.Whitespace, ' ')",
  "(54913, Token.Text, '$pre_post_dep')",
  "(54926, Token.Text.Whitespace, ' ')",
  "(54927, Token.Literal.String.Double, '\"*) specialdeplibs=\"')",
  "(54947, Token.Text, '$specialdeplibs')",
  "(54962, Token.Text.Whitespace, ' ')",
  "(54963, Token.Text, '$pre_post_deps\"')",
  "(54978, Token.Text.Whitespace, ' ')",
  "(54979, Token.Text, ';;')",
  "(54981, Token.Text.NewLine, '\\n')",
  "(54982, Token.Text.Whitespace, '\\t  ')",
  "(54985, Token.Text, 'esac')",
  "(54989, Token.Text.NewLine, '\\n')",
  "(54990, Token.Text.Whitespace, '\\t  ')",
  "(54993, Token.Text, 'pre_post_deps=\"$pre_post_deps')",
  "(55022, Token.Text.Whitespace, ' ')",
  "(55023, Token.Text, '$pre_post_dep\"')",
  "(55037, Token.Text.NewLine, '\\n')",
  "(55038, Token.Text.Whitespace, '\\t')",
  "(55039, Token.Text, 'done')",
  "(55043, Token.Text.NewLine, '\\n')",
  "(55044, Token.Text.Whitespace, '      ')",
  "(55050, Token.Text, 'fi')",
  "(55052, Token.Text.NewLine, '\\n')",
  "(55053, Token.Text.Whitespace, '      ')",
  "(55059, Token.Text, 'pre_post_deps=')",
  "(55073, Token.Text.NewLine, '\\n')",
  "(55074, Token.Text.Whitespace, '    ')",
  "(55078, Token.Text, 'fi')",
  "(55080, Token.Text.NewLine, '\\n\\n')",
  "(55082, Token.Text.Whitespace, '    ')",
  "(55086, Token.Text, 'deplibs=')",
  "(55094, Token.Text.NewLine, '\\n')",
  "(55095, Token.Text.Whitespace, '    ')",
  "(55099, Token.Text, 'newdependency_libs=')",
  "(55118, Token.Text.NewLine, '\\n')",
  "(55119, Token.Text.Whitespace, '    ')",
  "(55123, Token.Text, 'newlib_search_path=')",
  "(55142, Token.Text.NewLine, '\\n')",
  "(55143, Token.Text.Whitespace, '    ')",
  "(55147, Token.Text, 'need_relink=no')",
  "(55161, Token.Text.Whitespace, ' ')",
  "(55162, Token.Comment.Single, \"# whether we're linking any uninstalled libtool libraries\")",
  "(55219, Token.Text.NewLine, '\\n')",
  "(55220, Token.Text.Whitespace, '    ')",
  "(55224, Token.Text, 'notinst_deplibs=')",
  "(55240, Token.Text.Whitespace, ' ')",
  "(55241, Token.Comment.Single, '# not-installed libtool libraries')",
  "(55274, Token.Text.NewLine, '\\n')",
  "(55275, Token.Text.Whitespace, '    ')",
  "(55279, Token.Text, 'case')",
  "(55283, Token.Text.Whitespace, ' ')",
  "(55284, Token.Text, '$linkmode')",
  "(55293, Token.Text.Whitespace, ' ')",
  "(55294, Token.Text, 'in')",
  "(55296, Token.Text.NewLine, '\\n')",
  "(55297, Token.Text.Whitespace, '    ')",
  "(55301, Token.Text, 'lib)')",
  "(55305, Token.Text.NewLine, '\\n')",
  "(55306, Token.Text.Whitespace, '\\t')",
  "(55307, Token.Text, 'passes=\"conv')",
  "(55319, Token.Text.Whitespace, ' ')",
  "(55320, Token.Text, 'link\"')",
  "(55325, Token.Text.NewLine, '\\n')",
  "(55326, Token.Text.Whitespace, '\\t')",
  "(55327, Token.Text, 'for')",
  "(55330, Token.Text.Whitespace, ' ')",
  "(55331, Token.Text, 'file')",
  "(55335, Token.Text.Whitespace, ' ')",
  "(55336, Token.Text, 'in')",
  "(55338, Token.Text.Whitespace, ' ')",
  "(55339, Token.Text, '$dlfiles')",
  "(55347, Token.Text.Whitespace, ' ')",
  "(55348, Token.Text, '$dlprefiles;')",
  "(55360, Token.Text.Whitespace, ' ')",
  "(55361, Token.Text, 'do')",
  "(55363, Token.Text.NewLine, '\\n')",
  "(55364, Token.Text.Whitespace, '\\t  ')",
  "(55367, Token.Text, 'case')",
  "(55371, Token.Text.Whitespace, ' ')",
  "(55372, Token.Text, '$file')",
  "(55377, Token.Text.Whitespace, ' ')",
  "(55378, Token.Text, 'in')",
  "(55380, Token.Text.NewLine, '\\n')",
  "(55381, Token.Text.Whitespace, '\\t  ')",
  "(55384, Token.Text, '*.la)')",
  "(55389, Token.Text.Whitespace, ' ')",
  "(55390, Token.Text, ';;')",
  "(55392, Token.Text.NewLine, '\\n')",
  "(55393, Token.Text.Whitespace, '\\t  ')",
  "(55396, Token.Text, '*)')",
  "(55398, Token.Text.NewLine, '\\n')",
  "(55399, Token.Text.Whitespace, '\\t    ')",
  "(55404, Token.Text, '$echo')",
  "(55409, Token.Text.Whitespace, ' ')",
  "(55410, Token.Literal.String.Double, '\"$modename: libraries can \\\\`-dlopen\\' only libtool libraries: $file\"')",
  "(55477, Token.Text.Whitespace, ' ')",
  "(55478, Token.Text, '1>&2')",
  "(55482, Token.Text.NewLine, '\\n')",
  "(55483, Token.Text.Whitespace, '\\t    ')",
  "(55488, Token.Text, 'exit')",
  "(55492, Token.Text.Whitespace, ' ')",
  "(55493, Token.Text, '$EXIT_FAILURE')",
  "(55506, Token.Text.NewLine, '\\n')",
  "(55507, Token.Text.Whitespace, '\\t    ')",
  "(55512, Token.Text, ';;')",
  "(55514, Token.Text.NewLine, '\\n')",
  "(55515, Token.Text.Whitespace, '\\t  ')",
  "(55518, Token.Text, 'esac')",
  "(55522, Token.Text.NewLine, '\\n')",
  "(55523, Token.Text.Whitespace, '\\t')",
  "(55524, Token.Text, 'done')",
  "(55528, Token.Text.NewLine, '\\n')",
  "(55529, Token.Text.Whitespace, '\\t')",
  "(55530, Token.Text, ';;')",
  "(55532, Token.Text.NewLine, '\\n')",
  "(55533, Token.Text.Whitespace, '    ')",
  "(55537, Token.Text, 'prog)')",
  "(55542, Token.Text.NewLine, '\\n')",
  "(55543, Token.Text.Whitespace, '\\t')",
  "(55544, Token.Text, 'compile_deplibs=')",
  "(55560, Token.Text.NewLine, '\\n')",
  "(55561, Token.Text.Whitespace, '\\t')",
  "(55562, Token.Text, 'finalize_deplibs=')",
  "(55579, Token.Text.NewLine, '\\n')",
  "(55580, Token.Text.Whitespace, '\\t')",
  "(55581, Token.Text, 'alldeplibs=no')",
  "(55594, Token.Text.NewLine, '\\n')",
  "(55595, Token.Text.Whitespace, '\\t')",
  "(55596, Token.Text, 'newdlfiles=')",
  "(55607, Token.Text.NewLine, '\\n')",
  "(55608, Token.Text.Whitespace, '\\t')",
  "(55609, Token.Text, 'newdlprefiles=')",
  "(55623, Token.Text.NewLine, '\\n')",
  "(55624, Token.Text.Whitespace, '\\t')",
  "(55625, Token.Text, 'passes=\"conv')",
  "(55637, Token.Text.Whitespace, ' ')",
  "(55638, Token.Text, 'scan')",
  "(55642, Token.Text.Whitespace, ' ')",
  "(55643, Token.Text, 'dlopen')",
  "(55649, Token.Text.Whitespace, ' ')",
  "(55650, Token.Text, 'dlpreopen')",
  "(55659, Token.Text.Whitespace, ' ')",
  "(55660, Token.Text, 'link\"')",
  "(55665, Token.Text.NewLine, '\\n')",
  "(55666, Token.Text.Whitespace, '\\t')",
  "(55667, Token.Text, ';;')",
  "(55669, Token.Text.NewLine, '\\n')",
  "(55670, Token.Text.Whitespace, '    ')",
  "(55674, Token.Text, '*)')",
  "(55676, Token.Text.Whitespace, '  ')",
  "(55678, Token.Text, 'passes=\"conv\"')",
  "(55691, Token.Text.NewLine, '\\n')",
  "(55692, Token.Text.Whitespace, '\\t')",
  "(55693, Token.Text, ';;')",
  "(55695, Token.Text.NewLine, '\\n')",
  "(55696, Token.Text.Whitespace, '    ')",
  "(55700, Token.Text, 'esac')",
  "(55704, Token.Text.NewLine, '\\n')",
  "(55705, Token.Text.Whitespace, '    ')",
  "(55709, Token.Text, 'for')",
  "(55712, Token.Text.Whitespace, ' ')",
  "(55713, Token.Text, 'pass')",
  "(55717, Token.Text.Whitespace, ' ')",
  "(55718, Token.Text, 'in')",
  "(55720, Token.Text.Whitespace, ' ')",
  "(55721, Token.Text, '$passes;')",
  "(55729, Token.Text.Whitespace, ' ')",
  "(55730, Token.Text, 'do')",
  "(55732, Token.Text.NewLine, '\\n')",
  "(55733, Token.Text.Whitespace, '      ')",
  "(55739, Token.Text, 'if')",
  "(55741, Token.Text.Whitespace, ' ')",
  "(55742, Token.Text, 'test')",
  "(55746, Token.Text.Whitespace, ' ')",
  "(55747, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(55764, Token.Text.Whitespace, ' ')",
  "(55765, Token.Text, '=')",
  "(55766, Token.Text.Whitespace, ' ')",
  "(55767, Token.Literal.String.Double, '\"lib,link\"')",
  "(55777, Token.Text.Whitespace, ' ')",
  "(55778, Token.Text, '||')",
  "(55780, Token.Text.NewLine, '\\n')",
  "(55781, Token.Text.Whitespace, '\\t ')",
  "(55783, Token.Text, 'test')",
  "(55787, Token.Text.Whitespace, ' ')",
  "(55788, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(55805, Token.Text.Whitespace, ' ')",
  "(55806, Token.Text, '=')",
  "(55807, Token.Text.Whitespace, ' ')",
  "(55808, Token.Literal.String.Double, '\"prog,scan\"')",
  "(55819, Token.Text, ';')",
  "(55820, Token.Text.Whitespace, ' ')",
  "(55821, Token.Text, 'then')",
  "(55825, Token.Text.NewLine, '\\n')",
  "(55826, Token.Text.Whitespace, '\\t')",
  "(55827, Token.Text, 'libs=\"$deplibs\"')",
  "(55842, Token.Text.NewLine, '\\n')",
  "(55843, Token.Text.Whitespace, '\\t')",
  "(55844, Token.Text, 'deplibs=')",
  "(55852, Token.Text.NewLine, '\\n')",
  "(55853, Token.Text.Whitespace, '      ')",
  "(55859, Token.Text, 'fi')",
  "(55861, Token.Text.NewLine, '\\n')",
  "(55862, Token.Text.Whitespace, '      ')",
  "(55868, Token.Text, 'if')",
  "(55870, Token.Text.Whitespace, ' ')",
  "(55871, Token.Text, 'test')",
  "(55875, Token.Text.Whitespace, ' ')",
  "(55876, Token.Literal.String.Double, '\"$linkmode\"')",
  "(55887, Token.Text.Whitespace, ' ')",
  "(55888, Token.Text, '=')",
  "(55889, Token.Text.Whitespace, ' ')",
  "(55890, Token.Text, 'prog;')",
  "(55895, Token.Text.Whitespace, ' ')",
  "(55896, Token.Text, 'then')",
  "(55900, Token.Text.NewLine, '\\n')",
  "(55901, Token.Text.Whitespace, '\\t')",
  "(55902, Token.Text, 'case')",
  "(55906, Token.Text.Whitespace, ' ')",
  "(55907, Token.Text, '$pass')",
  "(55912, Token.Text.Whitespace, ' ')",
  "(55913, Token.Text, 'in')",
  "(55915, Token.Text.NewLine, '\\n')",
  "(55916, Token.Text.Whitespace, '\\t')",
  "(55917, Token.Text, 'dlopen)')",
  "(55924, Token.Text.Whitespace, ' ')",
  "(55925, Token.Text, 'libs=\"$dlfiles\"')",
  "(55940, Token.Text.Whitespace, ' ')",
  "(55941, Token.Text, ';;')",
  "(55943, Token.Text.NewLine, '\\n')",
  "(55944, Token.Text.Whitespace, '\\t')",
  "(55945, Token.Text, 'dlpreopen)')",
  "(55955, Token.Text.Whitespace, ' ')",
  "(55956, Token.Text, 'libs=\"$dlprefiles\"')",
  "(55974, Token.Text.Whitespace, ' ')",
  "(55975, Token.Text, ';;')",
  "(55977, Token.Text.NewLine, '\\n')",
  "(55978, Token.Text.Whitespace, '\\t')",
  "(55979, Token.Text, 'link)')",
  "(55984, Token.Text.Whitespace, ' ')",
  "(55985, Token.Text, 'libs=\"$deplibs')",
  "(55999, Token.Text.Whitespace, ' ')",
  "(56000, Token.Text, '%DEPLIBS%')",
  "(56009, Token.Text.Whitespace, ' ')",
  "(56010, Token.Text, '$dependency_libs\"')",
  "(56027, Token.Text.Whitespace, ' ')",
  "(56028, Token.Text, ';;')",
  "(56030, Token.Text.NewLine, '\\n')",
  "(56031, Token.Text.Whitespace, '\\t')",
  "(56032, Token.Text, 'esac')",
  "(56036, Token.Text.NewLine, '\\n')",
  "(56037, Token.Text.Whitespace, '      ')",
  "(56043, Token.Text, 'fi')",
  "(56045, Token.Text.NewLine, '\\n')",
  "(56046, Token.Text.Whitespace, '      ')",
  "(56052, Token.Text, 'if')",
  "(56054, Token.Text.Whitespace, ' ')",
  "(56055, Token.Text, 'test')",
  "(56059, Token.Text.Whitespace, ' ')",
  "(56060, Token.Literal.String.Double, '\"$pass\"')",
  "(56067, Token.Text.Whitespace, ' ')",
  "(56068, Token.Text, '=')",
  "(56069, Token.Text.Whitespace, ' ')",
  "(56070, Token.Text, 'dlopen;')",
  "(56077, Token.Text.Whitespace, ' ')",
  "(56078, Token.Text, 'then')",
  "(56082, Token.Text.NewLine, '\\n')",
  "(56083, Token.Text.Whitespace, '\\t')",
  "(56084, Token.Comment.Single, '# Collect dlpreopened libraries')",
  "(56115, Token.Text.NewLine, '\\n')",
  "(56116, Token.Text.Whitespace, '\\t')",
  "(56117, Token.Text, 'save_deplibs=\"$deplibs\"')",
  "(56140, Token.Text.NewLine, '\\n')",
  "(56141, Token.Text.Whitespace, '\\t')",
  "(56142, Token.Text, 'deplibs=')",
  "(56150, Token.Text.NewLine, '\\n')",
  "(56151, Token.Text.Whitespace, '      ')",
  "(56157, Token.Text, 'fi')",
  "(56159, Token.Text.NewLine, '\\n')",
  "(56160, Token.Text.Whitespace, '      ')",
  "(56166, Token.Text, 'for')",
  "(56169, Token.Text.Whitespace, ' ')",
  "(56170, Token.Text, 'deplib')",
  "(56176, Token.Text.Whitespace, ' ')",
  "(56177, Token.Text, 'in')",
  "(56179, Token.Text.Whitespace, ' ')",
  "(56180, Token.Text, '$libs;')",
  "(56186, Token.Text.Whitespace, ' ')",
  "(56187, Token.Text, 'do')",
  "(56189, Token.Text.NewLine, '\\n')",
  "(56190, Token.Text.Whitespace, '\\t')",
  "(56191, Token.Text, 'lib=')",
  "(56195, Token.Text.NewLine, '\\n')",
  "(56196, Token.Text.Whitespace, '\\t')",
  "(56197, Token.Text, 'found=no')",
  "(56205, Token.Text.NewLine, '\\n')",
  "(56206, Token.Text.Whitespace, '\\t')",
  "(56207, Token.Text, 'case')",
  "(56211, Token.Text.Whitespace, ' ')",
  "(56212, Token.Text, '$deplib')",
  "(56219, Token.Text.Whitespace, ' ')",
  "(56220, Token.Text, 'in')",
  "(56222, Token.Text.NewLine, '\\n')",
  "(56223, Token.Text.Whitespace, '\\t')",
  "(56224, Token.Text, '-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)')",
  "(56289, Token.Text.NewLine, '\\n')",
  "(56290, Token.Text.Whitespace, '\\t  ')",
  "(56293, Token.Text, 'if')",
  "(56295, Token.Text.Whitespace, ' ')",
  "(56296, Token.Text, 'test')",
  "(56300, Token.Text.Whitespace, ' ')",
  "(56301, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(56318, Token.Text.Whitespace, ' ')",
  "(56319, Token.Text, '=')",
  "(56320, Token.Text.Whitespace, ' ')",
  "(56321, Token.Literal.String.Double, '\"prog,link\"')",
  "(56332, Token.Text, ';')",
  "(56333, Token.Text.Whitespace, ' ')",
  "(56334, Token.Text, 'then')",
  "(56338, Token.Text.NewLine, '\\n')",
  "(56339, Token.Text.Whitespace, '\\t    ')",
  "(56344, Token.Text, 'compile_deplibs=\"$deplib')",
  "(56368, Token.Text.Whitespace, ' ')",
  "(56369, Token.Text, '$compile_deplibs\"')",
  "(56386, Token.Text.NewLine, '\\n')",
  "(56387, Token.Text.Whitespace, '\\t    ')",
  "(56392, Token.Text, 'finalize_deplibs=\"$deplib')",
  "(56417, Token.Text.Whitespace, ' ')",
  "(56418, Token.Text, '$finalize_deplibs\"')",
  "(56436, Token.Text.NewLine, '\\n')",
  "(56437, Token.Text.Whitespace, '\\t  ')",
  "(56440, Token.Text, 'else')",
  "(56444, Token.Text.NewLine, '\\n')",
  "(56445, Token.Text.Whitespace, '\\t    ')",
  "(56450, Token.Text, 'compiler_flags=\"$compiler_flags')",
  "(56481, Token.Text.Whitespace, ' ')",
  "(56482, Token.Text, '$deplib\"')",
  "(56490, Token.Text.NewLine, '\\n')",
  "(56491, Token.Text.Whitespace, '\\t  ')",
  "(56494, Token.Text, 'fi')",
  "(56496, Token.Text.NewLine, '\\n')",
  "(56497, Token.Text.Whitespace, '\\t  ')",
  "(56500, Token.Text, 'continue')",
  "(56508, Token.Text.NewLine, '\\n')",
  "(56509, Token.Text.Whitespace, '\\t  ')",
  "(56512, Token.Text, ';;')",
  "(56514, Token.Text.NewLine, '\\n')",
  "(56515, Token.Text.Whitespace, '\\t')",
  "(56516, Token.Text, '-l*)')",
  "(56520, Token.Text.NewLine, '\\n')",
  "(56521, Token.Text.Whitespace, '\\t  ')",
  "(56524, Token.Text, 'if')",
  "(56526, Token.Text.Whitespace, ' ')",
  "(56527, Token.Text, 'test')",
  "(56531, Token.Text.Whitespace, ' ')",
  "(56532, Token.Literal.String.Double, '\"$linkmode\"')",
  "(56543, Token.Text.Whitespace, ' ')",
  "(56544, Token.Text, '!=')",
  "(56546, Token.Text.Whitespace, ' ')",
  "(56547, Token.Text, 'lib')",
  "(56550, Token.Text.Whitespace, ' ')",
  "(56551, Token.Text, '&&')",
  "(56553, Token.Text.Whitespace, ' ')",
  "(56554, Token.Text, 'test')",
  "(56558, Token.Text.Whitespace, ' ')",
  "(56559, Token.Literal.String.Double, '\"$linkmode\"')",
  "(56570, Token.Text.Whitespace, ' ')",
  "(56571, Token.Text, '!=')",
  "(56573, Token.Text.Whitespace, ' ')",
  "(56574, Token.Text, 'prog;')",
  "(56579, Token.Text.Whitespace, ' ')",
  "(56580, Token.Text, 'then')",
  "(56584, Token.Text.NewLine, '\\n')",
  "(56585, Token.Text.Whitespace, '\\t    ')",
  "(56590, Token.Text, '$echo')",
  "(56595, Token.Text.Whitespace, ' ')",
  "(56596, Token.Literal.String.Double, '\"$modename: warning: \\\\`-l\\' is ignored for archives/objects\"')",
  "(56655, Token.Text.Whitespace, ' ')",
  "(56656, Token.Text, '1>&2')",
  "(56660, Token.Text.NewLine, '\\n')",
  "(56661, Token.Text.Whitespace, '\\t    ')",
  "(56666, Token.Text, 'continue')",
  "(56674, Token.Text.NewLine, '\\n')",
  "(56675, Token.Text.Whitespace, '\\t  ')",
  "(56678, Token.Text, 'fi')",
  "(56680, Token.Text.NewLine, '\\n')",
  "(56681, Token.Text.Whitespace, '\\t  ')",
  "(56684, Token.Text, 'name=`$echo')",
  "(56695, Token.Text.Whitespace, ' ')",
  "(56696, Token.Literal.String.Double, '\"X$deplib\"')",
  "(56706, Token.Text.Whitespace, ' ')",
  "(56707, Token.Text, '|')",
  "(56708, Token.Text.Whitespace, ' ')",
  "(56709, Token.Text, '$Xsed')",
  "(56714, Token.Text.Whitespace, ' ')",
  "(56715, Token.Text, '-e')",
  "(56717, Token.Text.Whitespace, ' ')",
  "(56718, Token.Literal.String.Single, \"'s/^-l//'\")",
  "(56727, Token.Text, '`')",
  "(56728, Token.Text.NewLine, '\\n')",
  "(56729, Token.Text.Whitespace, '\\t  ')",
  "(56732, Token.Text, 'for')",
  "(56735, Token.Text.Whitespace, ' ')",
  "(56736, Token.Text, 'searchdir')",
  "(56745, Token.Text.Whitespace, ' ')",
  "(56746, Token.Text, 'in')",
  "(56748, Token.Text.Whitespace, ' ')",
  "(56749, Token.Text, '$newlib_search_path')",
  "(56768, Token.Text.Whitespace, ' ')",
  "(56769, Token.Text, '$lib_search_path')",
  "(56785, Token.Text.Whitespace, ' ')",
  "(56786, Token.Text, '$sys_lib_search_path')",
  "(56806, Token.Text.Whitespace, ' ')",
  "(56807, Token.Text, '$shlib_search_path;')",
  "(56826, Token.Text.Whitespace, ' ')",
  "(56827, Token.Text, 'do')",
  "(56829, Token.Text.NewLine, '\\n')",
  "(56830, Token.Text.Whitespace, '\\t    ')",
  "(56835, Token.Text, 'for')",
  "(56838, Token.Text.Whitespace, ' ')",
  "(56839, Token.Text, 'search_ext')",
  "(56849, Token.Text.Whitespace, ' ')",
  "(56850, Token.Text, 'in')",
  "(56852, Token.Text.Whitespace, ' ')",
  "(56853, Token.Text, '.la')",
  "(56856, Token.Text.Whitespace, ' ')",
  "(56857, Token.Text, '$std_shrext')",
  "(56868, Token.Text.Whitespace, ' ')",
  "(56869, Token.Text, '.so')",
  "(56872, Token.Text.Whitespace, ' ')",
  "(56873, Token.Text, '.a;')",
  "(56876, Token.Text.Whitespace, ' ')",
  "(56877, Token.Text, 'do')",
  "(56879, Token.Text.NewLine, '\\n')",
  "(56880, Token.Text.Whitespace, '\\t      ')",
  "(56887, Token.Comment.Single, '# Search the libtool library')",
  "(56915, Token.Text.NewLine, '\\n')",
  "(56916, Token.Text.Whitespace, '\\t      ')",
  "(56923, Token.Text, 'lib=\"$searchdir/lib${name}${search_ext}\"')",
  "(56963, Token.Text.NewLine, '\\n')",
  "(56964, Token.Text.Whitespace, '\\t      ')",
  "(56971, Token.Text, 'if')",
  "(56973, Token.Text.Whitespace, ' ')",
  "(56974, Token.Text, 'test')",
  "(56978, Token.Text.Whitespace, ' ')",
  "(56979, Token.Text, '-f')",
  "(56981, Token.Text.Whitespace, ' ')",
  "(56982, Token.Literal.String.Double, '\"$lib\"')",
  "(56988, Token.Text, ';')",
  "(56989, Token.Text.Whitespace, ' ')",
  "(56990, Token.Text, 'then')",
  "(56994, Token.Text.NewLine, '\\n')",
  "(56995, Token.Text.Whitespace, '\\t\\t')",
  "(56997, Token.Text, 'if')",
  "(56999, Token.Text.Whitespace, ' ')",
  "(57000, Token.Text, 'test')",
  "(57004, Token.Text.Whitespace, ' ')",
  "(57005, Token.Literal.String.Double, '\"$search_ext\"')",
  "(57018, Token.Text.Whitespace, ' ')",
  "(57019, Token.Text, '=')",
  "(57020, Token.Text.Whitespace, ' ')",
  "(57021, Token.Literal.String.Double, '\".la\"')",
  "(57026, Token.Text, ';')",
  "(57027, Token.Text.Whitespace, ' ')",
  "(57028, Token.Text, 'then')",
  "(57032, Token.Text.NewLine, '\\n')",
  "(57033, Token.Text.Whitespace, '\\t\\t  ')",
  "(57037, Token.Text, 'found=yes')",
  "(57046, Token.Text.NewLine, '\\n')",
  "(57047, Token.Text.Whitespace, '\\t\\t')",
  "(57049, Token.Text, 'else')",
  "(57053, Token.Text.NewLine, '\\n')",
  "(57054, Token.Text.Whitespace, '\\t\\t  ')",
  "(57058, Token.Text, 'found=no')",
  "(57066, Token.Text.NewLine, '\\n')",
  "(57067, Token.Text.Whitespace, '\\t\\t')",
  "(57069, Token.Text, 'fi')",
  "(57071, Token.Text.NewLine, '\\n')",
  "(57072, Token.Text.Whitespace, '\\t\\t')",
  "(57074, Token.Text, 'break')",
  "(57079, Token.Text.Whitespace, ' ')",
  "(57080, Token.Text, '2')",
  "(57081, Token.Text.NewLine, '\\n')",
  "(57082, Token.Text.Whitespace, '\\t      ')",
  "(57089, Token.Text, 'fi')",
  "(57091, Token.Text.NewLine, '\\n')",
  "(57092, Token.Text.Whitespace, '\\t    ')",
  "(57097, Token.Text, 'done')",
  "(57101, Token.Text.NewLine, '\\n')",
  "(57102, Token.Text.Whitespace, '\\t  ')",
  "(57105, Token.Text, 'done')",
  "(57109, Token.Text.NewLine, '\\n')",
  "(57110, Token.Text.Whitespace, '\\t  ')",
  "(57113, Token.Text, 'if')",
  "(57115, Token.Text.Whitespace, ' ')",
  "(57116, Token.Text, 'test')",
  "(57120, Token.Text.Whitespace, ' ')",
  "(57121, Token.Literal.String.Double, '\"$found\"')",
  "(57129, Token.Text.Whitespace, ' ')",
  "(57130, Token.Text, '!=')",
  "(57132, Token.Text.Whitespace, ' ')",
  "(57133, Token.Text, 'yes;')",
  "(57137, Token.Text.Whitespace, ' ')",
  "(57138, Token.Text, 'then')",
  "(57142, Token.Text.NewLine, '\\n')",
  "(57143, Token.Text.Whitespace, '\\t    ')",
  "(57148, Token.Comment.Single, \"# deplib doesn't seem to be a libtool library\")",
  "(57193, Token.Text.NewLine, '\\n')",
  "(57194, Token.Text.Whitespace, '\\t    ')",
  "(57199, Token.Text, 'if')",
  "(57201, Token.Text.Whitespace, ' ')",
  "(57202, Token.Text, 'test')",
  "(57206, Token.Text.Whitespace, ' ')",
  "(57207, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(57224, Token.Text.Whitespace, ' ')",
  "(57225, Token.Text, '=')",
  "(57226, Token.Text.Whitespace, ' ')",
  "(57227, Token.Literal.String.Double, '\"prog,link\"')",
  "(57238, Token.Text, ';')",
  "(57239, Token.Text.Whitespace, ' ')",
  "(57240, Token.Text, 'then')",
  "(57244, Token.Text.NewLine, '\\n')",
  "(57245, Token.Text.Whitespace, '\\t      ')",
  "(57252, Token.Text, 'compile_deplibs=\"$deplib')",
  "(57276, Token.Text.Whitespace, ' ')",
  "(57277, Token.Text, '$compile_deplibs\"')",
  "(57294, Token.Text.NewLine, '\\n')",
  "(57295, Token.Text.Whitespace, '\\t      ')",
  "(57302, Token.Text, 'finalize_deplibs=\"$deplib')",
  "(57327, Token.Text.Whitespace, ' ')",
  "(57328, Token.Text, '$finalize_deplibs\"')",
  "(57346, Token.Text.NewLine, '\\n')",
  "(57347, Token.Text.Whitespace, '\\t    ')",
  "(57352, Token.Text, 'else')",
  "(57356, Token.Text.NewLine, '\\n')",
  "(57357, Token.Text.Whitespace, '\\t      ')",
  "(57364, Token.Text, 'deplibs=\"$deplib')",
  "(57380, Token.Text.Whitespace, ' ')",
  "(57381, Token.Text, '$deplibs\"')",
  "(57390, Token.Text.NewLine, '\\n')",
  "(57391, Token.Text.Whitespace, '\\t      ')",
  "(57398, Token.Text, 'test')",
  "(57402, Token.Text.Whitespace, ' ')",
  "(57403, Token.Literal.String.Double, '\"$linkmode\"')",
  "(57414, Token.Text.Whitespace, ' ')",
  "(57415, Token.Text, '=')",
  "(57416, Token.Text.Whitespace, ' ')",
  "(57417, Token.Text, 'lib')",
  "(57420, Token.Text.Whitespace, ' ')",
  "(57421, Token.Text, '&&')",
  "(57423, Token.Text.Whitespace, ' ')",
  "(57424, Token.Text, 'newdependency_libs=\"$deplib')",
  "(57451, Token.Text.Whitespace, ' ')",
  "(57452, Token.Text, '$newdependency_libs\"')",
  "(57472, Token.Text.NewLine, '\\n')",
  "(57473, Token.Text.Whitespace, '\\t    ')",
  "(57478, Token.Text, 'fi')",
  "(57480, Token.Text.NewLine, '\\n')",
  "(57481, Token.Text.Whitespace, '\\t    ')",
  "(57486, Token.Text, 'continue')",
  "(57494, Token.Text.NewLine, '\\n')",
  "(57495, Token.Text.Whitespace, '\\t  ')",
  "(57498, Token.Text, 'else')",
  "(57502, Token.Text.Whitespace, ' ')",
  "(57503, Token.Comment.Single, '# deplib is a libtool library')",
  "(57532, Token.Text.NewLine, '\\n')",
  "(57533, Token.Text.Whitespace, '\\t    ')",
  "(57538, Token.Comment.Single, '# If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,')",
  "(57607, Token.Text.NewLine, '\\n')",
  "(57608, Token.Text.Whitespace, '\\t    ')",
  "(57613, Token.Comment.Single, '# We need to do some special things here, and not later.')",
  "(57669, Token.Text.NewLine, '\\n')",
  "(57670, Token.Text.Whitespace, '\\t    ')",
  "(57675, Token.Text, 'if')",
  "(57677, Token.Text.Whitespace, ' ')",
  "(57678, Token.Text, 'test')",
  "(57682, Token.Text.Whitespace, ' ')",
  "(57683, Token.Literal.String.Double, '\"X$allow_libtool_libs_with_static_runtimes\"')",
  "(57726, Token.Text.Whitespace, ' ')",
  "(57727, Token.Text, '=')",
  "(57728, Token.Text.Whitespace, ' ')",
  "(57729, Token.Literal.String.Double, '\"Xyes\"')",
  "(57735, Token.Text.Whitespace, ' ')",
  "(57736, Token.Text, ';')",
  "(57737, Token.Text.Whitespace, ' ')",
  "(57738, Token.Text, 'then')",
  "(57742, Token.Text.NewLine, '\\n')",
  "(57743, Token.Text.Whitespace, '\\t      ')",
  "(57750, Token.Text, 'case')",
  "(57754, Token.Text.Whitespace, ' ')",
  "(57755, Token.Literal.String.Double, '\" $predeps $postdeps \"')",
  "(57777, Token.Text.Whitespace, ' ')",
  "(57778, Token.Text, 'in')",
  "(57780, Token.Text.NewLine, '\\n')",
  "(57781, Token.Text.Whitespace, '\\t      ')",
  "(57788, Token.Text, '*\"')",
  "(57790, Token.Text.Whitespace, ' ')",
  "(57791, Token.Text, '$deplib')",
  "(57798, Token.Text.Whitespace, ' ')",
  "(57799, Token.Literal.String.Double, '\"*)\\n\\t\\tif (${SED} -e \\'2q\\' $lib |\\n                    grep \"')",
  "(57857, Token.Text, '^#')",
  "(57859, Token.Text.Whitespace, ' ')",
  "(57860, Token.Text, 'Generated')",
  "(57869, Token.Text.Whitespace, ' ')",
  "(57870, Token.Text, 'by')",
  "(57872, Token.Text.Whitespace, ' ')",
  "(57873, Token.Text, '.*$PACKAGE\")')",
  "(57885, Token.Text.Whitespace, ' ')",
  "(57886, Token.Text, '>/dev/null')",
  "(57896, Token.Text.Whitespace, ' ')",
  "(57897, Token.Text, '2>&1;')",
  "(57902, Token.Text.Whitespace, ' ')",
  "(57903, Token.Text, 'then')",
  "(57907, Token.Text.NewLine, '\\n')",
  "(57908, Token.Text.Whitespace, '\\t\\t  ')",
  "(57912, Token.Text, 'library_names=')",
  "(57926, Token.Text.NewLine, '\\n')",
  "(57927, Token.Text.Whitespace, '\\t\\t  ')",
  "(57931, Token.Text, 'old_library=')",
  "(57943, Token.Text.NewLine, '\\n')",
  "(57944, Token.Text.Whitespace, '\\t\\t  ')",
  "(57948, Token.Text, 'case')",
  "(57952, Token.Text.Whitespace, ' ')",
  "(57953, Token.Text, '$lib')",
  "(57957, Token.Text.Whitespace, ' ')",
  "(57958, Token.Text, 'in')",
  "(57960, Token.Text.NewLine, '\\n')",
  "(57961, Token.Text.Whitespace, '\\t\\t  ')",
  "(57965, Token.Text, '*/*')",
  "(57968, Token.Text.Whitespace, ' ')",
  "(57969, Token.Text, '|')",
  "(57970, Token.Text.Whitespace, ' ')",
  "(57971, Token.Text, '*\\\\\\\\*)')",
  "(57976, Token.Text.Whitespace, ' ')",
  "(57977, Token.Text, '.')",
  "(57978, Token.Text.Whitespace, ' ')",
  "(57979, Token.Text, '$lib')",
  "(57983, Token.Text.Whitespace, ' ')",
  "(57984, Token.Text, ';;')",
  "(57986, Token.Text.NewLine, '\\n')",
  "(57987, Token.Text.Whitespace, '\\t\\t  ')",
  "(57991, Token.Text, '*)')",
  "(57993, Token.Text.Whitespace, ' ')",
  "(57994, Token.Text, '.')",
  "(57995, Token.Text.Whitespace, ' ')",
  "(57996, Token.Text, './$lib')",
  "(58002, Token.Text.Whitespace, ' ')",
  "(58003, Token.Text, ';;')",
  "(58005, Token.Text.NewLine, '\\n')",
  "(58006, Token.Text.Whitespace, '\\t\\t  ')",
  "(58010, Token.Text, 'esac')",
  "(58014, Token.Text.NewLine, '\\n')",
  "(58015, Token.Text.Whitespace, '\\t\\t  ')",
  "(58019, Token.Text, 'for')",
  "(58022, Token.Text.Whitespace, ' ')",
  "(58023, Token.Text, 'l')",
  "(58024, Token.Text.Whitespace, ' ')",
  "(58025, Token.Text, 'in')",
  "(58027, Token.Text.Whitespace, ' ')",
  "(58028, Token.Text, '$old_library')",
  "(58040, Token.Text.Whitespace, ' ')",
  "(58041, Token.Text, '$library_names;')",
  "(58056, Token.Text.Whitespace, ' ')",
  "(58057, Token.Text, 'do')",
  "(58059, Token.Text.NewLine, '\\n')",
  "(58060, Token.Text.Whitespace, '\\t\\t    ')",
  "(58066, Token.Text, 'll=\"$l\"')",
  "(58073, Token.Text.NewLine, '\\n')",
  "(58074, Token.Text.Whitespace, '\\t\\t  ')",
  "(58078, Token.Text, 'done')",
  "(58082, Token.Text.NewLine, '\\n')",
  "(58083, Token.Text.Whitespace, '\\t\\t  ')",
  "(58087, Token.Text, 'if')",
  "(58089, Token.Text.Whitespace, ' ')",
  "(58090, Token.Text, 'test')",
  "(58094, Token.Text.Whitespace, ' ')",
  "(58095, Token.Literal.String.Double, '\"X$ll\"')",
  "(58101, Token.Text.Whitespace, ' ')",
  "(58102, Token.Text, '=')",
  "(58103, Token.Text.Whitespace, ' ')",
  "(58104, Token.Literal.String.Double, '\"X$old_library\"')",
  "(58119, Token.Text.Whitespace, ' ')",
  "(58120, Token.Text, ';')",
  "(58121, Token.Text.Whitespace, ' ')",
  "(58122, Token.Text, 'then')",
  "(58126, Token.Text.Whitespace, ' ')",
  "(58127, Token.Comment.Single, '# only static version available')",
  "(58158, Token.Text.NewLine, '\\n')",
  "(58159, Token.Text.Whitespace, '\\t\\t    ')",
  "(58165, Token.Text, 'found=no')",
  "(58173, Token.Text.NewLine, '\\n')",
  "(58174, Token.Text.Whitespace, '\\t\\t    ')",
  "(58180, Token.Text, 'ladir=`$echo')",
  "(58192, Token.Text.Whitespace, ' ')",
  "(58193, Token.Literal.String.Double, '\"X$lib\"')",
  "(58200, Token.Text.Whitespace, ' ')",
  "(58201, Token.Text, '|')",
  "(58202, Token.Text.Whitespace, ' ')",
  "(58203, Token.Text, '$Xsed')",
  "(58208, Token.Text.Whitespace, ' ')",
  "(58209, Token.Text, '-e')",
  "(58211, Token.Text.Whitespace, ' ')",
  "(58212, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(58225, Token.Text, '`')",
  "(58226, Token.Text.NewLine, '\\n')",
  "(58227, Token.Text.Whitespace, '\\t\\t    ')",
  "(58233, Token.Text, 'test')",
  "(58237, Token.Text.Whitespace, ' ')",
  "(58238, Token.Literal.String.Double, '\"X$ladir\"')",
  "(58247, Token.Text.Whitespace, ' ')",
  "(58248, Token.Text, '=')",
  "(58249, Token.Text.Whitespace, ' ')",
  "(58250, Token.Literal.String.Double, '\"X$lib\"')",
  "(58257, Token.Text.Whitespace, ' ')",
  "(58258, Token.Text, '&&')",
  "(58260, Token.Text.Whitespace, ' ')",
  "(58261, Token.Text, 'ladir=\".\"')",
  "(58270, Token.Text.NewLine, '\\n')",
  "(58271, Token.Text.Whitespace, '\\t\\t    ')",
  "(58277, Token.Text, 'lib=$ladir/$old_library')",
  "(58300, Token.Text.NewLine, '\\n')",
  "(58301, Token.Text.Whitespace, '\\t\\t    ')",
  "(58307, Token.Text, 'if')",
  "(58309, Token.Text.Whitespace, ' ')",
  "(58310, Token.Text, 'test')",
  "(58314, Token.Text.Whitespace, ' ')",
  "(58315, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(58332, Token.Text.Whitespace, ' ')",
  "(58333, Token.Text, '=')",
  "(58334, Token.Text.Whitespace, ' ')",
  "(58335, Token.Literal.String.Double, '\"prog,link\"')",
  "(58346, Token.Text, ';')",
  "(58347, Token.Text.Whitespace, ' ')",
  "(58348, Token.Text, 'then')",
  "(58352, Token.Text.NewLine, '\\n')",
  "(58353, Token.Text.Whitespace, '\\t\\t      ')",
  "(58361, Token.Text, 'compile_deplibs=\"$deplib')",
  "(58385, Token.Text.Whitespace, ' ')",
  "(58386, Token.Text, '$compile_deplibs\"')",
  "(58403, Token.Text.NewLine, '\\n')",
  "(58404, Token.Text.Whitespace, '\\t\\t      ')",
  "(58412, Token.Text, 'finalize_deplibs=\"$deplib')",
  "(58437, Token.Text.Whitespace, ' ')",
  "(58438, Token.Text, '$finalize_deplibs\"')",
  "(58456, Token.Text.NewLine, '\\n')",
  "(58457, Token.Text.Whitespace, '\\t\\t    ')",
  "(58463, Token.Text, 'else')",
  "(58467, Token.Text.NewLine, '\\n')",
  "(58468, Token.Text.Whitespace, '\\t\\t      ')",
  "(58476, Token.Text, 'deplibs=\"$deplib')",
  "(58492, Token.Text.Whitespace, ' ')",
  "(58493, Token.Text, '$deplibs\"')",
  "(58502, Token.Text.NewLine, '\\n')",
  "(58503, Token.Text.Whitespace, '\\t\\t      ')",
  "(58511, Token.Text, 'test')",
  "(58515, Token.Text.Whitespace, ' ')",
  "(58516, Token.Literal.String.Double, '\"$linkmode\"')",
  "(58527, Token.Text.Whitespace, ' ')",
  "(58528, Token.Text, '=')",
  "(58529, Token.Text.Whitespace, ' ')",
  "(58530, Token.Text, 'lib')",
  "(58533, Token.Text.Whitespace, ' ')",
  "(58534, Token.Text, '&&')",
  "(58536, Token.Text.Whitespace, ' ')",
  "(58537, Token.Text, 'newdependency_libs=\"$deplib')",
  "(58564, Token.Text.Whitespace, ' ')",
  "(58565, Token.Text, '$newdependency_libs\"')",
  "(58585, Token.Text.NewLine, '\\n')",
  "(58586, Token.Text.Whitespace, '\\t\\t    ')",
  "(58592, Token.Text, 'fi')",
  "(58594, Token.Text.NewLine, '\\n')",
  "(58595, Token.Text.Whitespace, '\\t\\t    ')",
  "(58601, Token.Text, 'continue')",
  "(58609, Token.Text.NewLine, '\\n')",
  "(58610, Token.Text.Whitespace, '\\t\\t  ')",
  "(58614, Token.Text, 'fi')",
  "(58616, Token.Text.NewLine, '\\n')",
  "(58617, Token.Text.Whitespace, '\\t\\t')",
  "(58619, Token.Text, 'fi')",
  "(58621, Token.Text.NewLine, '\\n')",
  "(58622, Token.Text.Whitespace, '\\t        ')",
  "(58631, Token.Text, ';;')",
  "(58633, Token.Text.NewLine, '\\n')",
  "(58634, Token.Text.Whitespace, '\\t      ')",
  "(58641, Token.Text, '*)')",
  "(58643, Token.Text.Whitespace, ' ')",
  "(58644, Token.Text, ';;')",
  "(58646, Token.Text.NewLine, '\\n')",
  "(58647, Token.Text.Whitespace, '\\t      ')",
  "(58654, Token.Text, 'esac')",
  "(58658, Token.Text.NewLine, '\\n')",
  "(58659, Token.Text.Whitespace, '\\t    ')",
  "(58664, Token.Text, 'fi')",
  "(58666, Token.Text.NewLine, '\\n')",
  "(58667, Token.Text.Whitespace, '\\t  ')",
  "(58670, Token.Text, 'fi')",
  "(58672, Token.Text.NewLine, '\\n')",
  "(58673, Token.Text.Whitespace, '\\t  ')",
  "(58676, Token.Text, ';;')",
  "(58678, Token.Text.Whitespace, ' ')",
  "(58679, Token.Comment.Single, '# -l')",
  "(58683, Token.Text.NewLine, '\\n')",
  "(58684, Token.Text.Whitespace, '\\t')",
  "(58685, Token.Text, '-L*)')",
  "(58689, Token.Text.NewLine, '\\n')",
  "(58690, Token.Text.Whitespace, '\\t  ')",
  "(58693, Token.Text, 'case')",
  "(58697, Token.Text.Whitespace, ' ')",
  "(58698, Token.Text, '$linkmode')",
  "(58707, Token.Text.Whitespace, ' ')",
  "(58708, Token.Text, 'in')",
  "(58710, Token.Text.NewLine, '\\n')",
  "(58711, Token.Text.Whitespace, '\\t  ')",
  "(58714, Token.Text, 'lib)')",
  "(58718, Token.Text.NewLine, '\\n')",
  "(58719, Token.Text.Whitespace, '\\t    ')",
  "(58724, Token.Text, 'deplibs=\"$deplib')",
  "(58740, Token.Text.Whitespace, ' ')",
  "(58741, Token.Text, '$deplibs\"')",
  "(58750, Token.Text.NewLine, '\\n')",
  "(58751, Token.Text.Whitespace, '\\t    ')",
  "(58756, Token.Text, 'test')",
  "(58760, Token.Text.Whitespace, ' ')",
  "(58761, Token.Literal.String.Double, '\"$pass\"')",
  "(58768, Token.Text.Whitespace, ' ')",
  "(58769, Token.Text, '=')",
  "(58770, Token.Text.Whitespace, ' ')",
  "(58771, Token.Text, 'conv')",
  "(58775, Token.Text.Whitespace, ' ')",
  "(58776, Token.Text, '&&')",
  "(58778, Token.Text.Whitespace, ' ')",
  "(58779, Token.Text, 'continue')",
  "(58787, Token.Text.NewLine, '\\n')",
  "(58788, Token.Text.Whitespace, '\\t    ')",
  "(58793, Token.Text, 'newdependency_libs=\"$deplib')",
  "(58820, Token.Text.Whitespace, ' ')",
  "(58821, Token.Text, '$newdependency_libs\"')",
  "(58841, Token.Text.NewLine, '\\n')",
  "(58842, Token.Text.Whitespace, '\\t    ')",
  "(58847, Token.Text, 'newlib_search_path=\"$newlib_search_path')",
  "(58886, Token.Text.Whitespace, ' ')",
  "(58887, Token.Literal.String.Double, '\"`$echo \"')",
  "(58896, Token.Text, 'X$deplib\"')",
  "(58905, Token.Text.Whitespace, ' ')",
  "(58906, Token.Text, '|')",
  "(58907, Token.Text.Whitespace, ' ')",
  "(58908, Token.Text, '$Xsed')",
  "(58913, Token.Text.Whitespace, ' ')",
  "(58914, Token.Text, '-e')",
  "(58916, Token.Text.Whitespace, ' ')",
  "(58917, Token.Literal.String.Single, \"'s/^-L//'\")",
  "(58926, Token.Text, '`')",
  "(58927, Token.Text.NewLine, '\\n')",
  "(58928, Token.Text.Whitespace, '\\t    ')",
  "(58933, Token.Text, ';;')",
  "(58935, Token.Text.NewLine, '\\n')",
  "(58936, Token.Text.Whitespace, '\\t  ')",
  "(58939, Token.Text, 'prog)')",
  "(58944, Token.Text.NewLine, '\\n')",
  "(58945, Token.Text.Whitespace, '\\t    ')",
  "(58950, Token.Text, 'if')",
  "(58952, Token.Text.Whitespace, ' ')",
  "(58953, Token.Text, 'test')",
  "(58957, Token.Text.Whitespace, ' ')",
  "(58958, Token.Literal.String.Double, '\"$pass\"')",
  "(58965, Token.Text.Whitespace, ' ')",
  "(58966, Token.Text, '=')",
  "(58967, Token.Text.Whitespace, ' ')",
  "(58968, Token.Text, 'conv;')",
  "(58973, Token.Text.Whitespace, ' ')",
  "(58974, Token.Text, 'then')",
  "(58978, Token.Text.NewLine, '\\n')",
  "(58979, Token.Text.Whitespace, '\\t      ')",
  "(58986, Token.Text, 'deplibs=\"$deplib')",
  "(59002, Token.Text.Whitespace, ' ')",
  "(59003, Token.Text, '$deplibs\"')",
  "(59012, Token.Text.NewLine, '\\n')",
  "(59013, Token.Text.Whitespace, '\\t      ')",
  "(59020, Token.Text, 'continue')",
  "(59028, Token.Text.NewLine, '\\n')",
  "(59029, Token.Text.Whitespace, '\\t    ')",
  "(59034, Token.Text, 'fi')",
  "(59036, Token.Text.NewLine, '\\n')",
  "(59037, Token.Text.Whitespace, '\\t    ')",
  "(59042, Token.Text, 'if')",
  "(59044, Token.Text.Whitespace, ' ')",
  "(59045, Token.Text, 'test')",
  "(59049, Token.Text.Whitespace, ' ')",
  "(59050, Token.Literal.String.Double, '\"$pass\"')",
  "(59057, Token.Text.Whitespace, ' ')",
  "(59058, Token.Text, '=')",
  "(59059, Token.Text.Whitespace, ' ')",
  "(59060, Token.Text, 'scan;')",
  "(59065, Token.Text.Whitespace, ' ')",
  "(59066, Token.Text, 'then')",
  "(59070, Token.Text.NewLine, '\\n')",
  "(59071, Token.Text.Whitespace, '\\t      ')",
  "(59078, Token.Text, 'deplibs=\"$deplib')",
  "(59094, Token.Text.Whitespace, ' ')",
  "(59095, Token.Text, '$deplibs\"')",
  "(59104, Token.Text.NewLine, '\\n')",
  "(59105, Token.Text.Whitespace, '\\t    ')",
  "(59110, Token.Text, 'else')",
  "(59114, Token.Text.NewLine, '\\n')",
  "(59115, Token.Text.Whitespace, '\\t      ')",
  "(59122, Token.Text, 'compile_deplibs=\"$deplib')",
  "(59146, Token.Text.Whitespace, ' ')",
  "(59147, Token.Text, '$compile_deplibs\"')",
  "(59164, Token.Text.NewLine, '\\n')",
  "(59165, Token.Text.Whitespace, '\\t      ')",
  "(59172, Token.Text, 'finalize_deplibs=\"$deplib')",
  "(59197, Token.Text.Whitespace, ' ')",
  "(59198, Token.Text, '$finalize_deplibs\"')",
  "(59216, Token.Text.NewLine, '\\n')",
  "(59217, Token.Text.Whitespace, '\\t    ')",
  "(59222, Token.Text, 'fi')",
  "(59224, Token.Text.NewLine, '\\n')",
  "(59225, Token.Text.Whitespace, '\\t    ')",
  "(59230, Token.Text, 'newlib_search_path=\"$newlib_search_path')",
  "(59269, Token.Text.Whitespace, ' ')",
  "(59270, Token.Literal.String.Double, '\"`$echo \"')",
  "(59279, Token.Text, 'X$deplib\"')",
  "(59288, Token.Text.Whitespace, ' ')",
  "(59289, Token.Text, '|')",
  "(59290, Token.Text.Whitespace, ' ')",
  "(59291, Token.Text, '$Xsed')",
  "(59296, Token.Text.Whitespace, ' ')",
  "(59297, Token.Text, '-e')",
  "(59299, Token.Text.Whitespace, ' ')",
  "(59300, Token.Literal.String.Single, \"'s/^-L//'\")",
  "(59309, Token.Text, '`')",
  "(59310, Token.Text.NewLine, '\\n')",
  "(59311, Token.Text.Whitespace, '\\t    ')",
  "(59316, Token.Text, ';;')",
  "(59318, Token.Text.NewLine, '\\n')",
  "(59319, Token.Text.Whitespace, '\\t  ')",
  "(59322, Token.Text, '*)')",
  "(59324, Token.Text.NewLine, '\\n')",
  "(59325, Token.Text.Whitespace, '\\t    ')",
  "(59330, Token.Text, '$echo')",
  "(59335, Token.Text.Whitespace, ' ')",
  "(59336, Token.Literal.String.Double, '\"$modename: warning: \\\\`-L\\' is ignored for archives/objects\"')",
  "(59395, Token.Text.Whitespace, ' ')",
  "(59396, Token.Text, '1>&2')",
  "(59400, Token.Text.NewLine, '\\n')",
  "(59401, Token.Text.Whitespace, '\\t    ')",
  "(59406, Token.Text, ';;')",
  "(59408, Token.Text.NewLine, '\\n')",
  "(59409, Token.Text.Whitespace, '\\t  ')",
  "(59412, Token.Text, 'esac')",
  "(59416, Token.Text.Whitespace, ' ')",
  "(59417, Token.Comment.Single, '# linkmode')",
  "(59427, Token.Text.NewLine, '\\n')",
  "(59428, Token.Text.Whitespace, '\\t  ')",
  "(59431, Token.Text, 'continue')",
  "(59439, Token.Text.NewLine, '\\n')",
  "(59440, Token.Text.Whitespace, '\\t  ')",
  "(59443, Token.Text, ';;')",
  "(59445, Token.Text.Whitespace, ' ')",
  "(59446, Token.Comment.Single, '# -L')",
  "(59450, Token.Text.NewLine, '\\n')",
  "(59451, Token.Text.Whitespace, '\\t')",
  "(59452, Token.Text, '-R*)')",
  "(59456, Token.Text.NewLine, '\\n')",
  "(59457, Token.Text.Whitespace, '\\t  ')",
  "(59460, Token.Text, 'if')",
  "(59462, Token.Text.Whitespace, ' ')",
  "(59463, Token.Text, 'test')",
  "(59467, Token.Text.Whitespace, ' ')",
  "(59468, Token.Literal.String.Double, '\"$pass\"')",
  "(59475, Token.Text.Whitespace, ' ')",
  "(59476, Token.Text, '=')",
  "(59477, Token.Text.Whitespace, ' ')",
  "(59478, Token.Text, 'link;')",
  "(59483, Token.Text.Whitespace, ' ')",
  "(59484, Token.Text, 'then')",
  "(59488, Token.Text.NewLine, '\\n')",
  "(59489, Token.Text.Whitespace, '\\t    ')",
  "(59494, Token.Text, 'dir=`$echo')",
  "(59504, Token.Text.Whitespace, ' ')",
  "(59505, Token.Literal.String.Double, '\"X$deplib\"')",
  "(59515, Token.Text.Whitespace, ' ')",
  "(59516, Token.Text, '|')",
  "(59517, Token.Text.Whitespace, ' ')",
  "(59518, Token.Text, '$Xsed')",
  "(59523, Token.Text.Whitespace, ' ')",
  "(59524, Token.Text, '-e')",
  "(59526, Token.Text.Whitespace, ' ')",
  "(59527, Token.Literal.String.Single, \"'s/^-R//'\")",
  "(59536, Token.Text, '`')",
  "(59537, Token.Text.NewLine, '\\n')",
  "(59538, Token.Text.Whitespace, '\\t    ')",
  "(59543, Token.Comment.Single, '# Make sure the xrpath contains only unique directories.')",
  "(59599, Token.Text.NewLine, '\\n')",
  "(59600, Token.Text.Whitespace, '\\t    ')",
  "(59605, Token.Text, 'case')",
  "(59609, Token.Text.Whitespace, ' ')",
  "(59610, Token.Literal.String.Double, '\"$xrpath \"')",
  "(59620, Token.Text.Whitespace, ' ')",
  "(59621, Token.Text, 'in')",
  "(59623, Token.Text.NewLine, '\\n')",
  "(59624, Token.Text.Whitespace, '\\t    ')",
  "(59629, Token.Text, '*\"')",
  "(59631, Token.Text.Whitespace, ' ')",
  "(59632, Token.Text, '$dir')",
  "(59636, Token.Text.Whitespace, ' ')",
  "(59637, Token.Literal.String.Double, '\"*) ;;\\n\\t    *) xrpath=\"')",
  "(59660, Token.Text, '$xrpath')",
  "(59667, Token.Text.Whitespace, ' ')",
  "(59668, Token.Text, '$dir\"')",
  "(59673, Token.Text.Whitespace, ' ')",
  "(59674, Token.Text, ';;')",
  "(59676, Token.Text.NewLine, '\\n')",
  "(59677, Token.Text.Whitespace, '\\t    ')",
  "(59682, Token.Text, 'esac')",
  "(59686, Token.Text.NewLine, '\\n')",
  "(59687, Token.Text.Whitespace, '\\t  ')",
  "(59690, Token.Text, 'fi')",
  "(59692, Token.Text.NewLine, '\\n')",
  "(59693, Token.Text.Whitespace, '\\t  ')",
  "(59696, Token.Text, 'deplibs=\"$deplib')",
  "(59712, Token.Text.Whitespace, ' ')",
  "(59713, Token.Text, '$deplibs\"')",
  "(59722, Token.Text.NewLine, '\\n')",
  "(59723, Token.Text.Whitespace, '\\t  ')",
  "(59726, Token.Text, 'continue')",
  "(59734, Token.Text.NewLine, '\\n')",
  "(59735, Token.Text.Whitespace, '\\t  ')",
  "(59738, Token.Text, ';;')",
  "(59740, Token.Text.NewLine, '\\n')",
  "(59741, Token.Text.Whitespace, '\\t')",
  "(59742, Token.Text, '*.la)')",
  "(59747, Token.Text.Whitespace, ' ')",
  "(59748, Token.Text, 'lib=\"$deplib\"')",
  "(59761, Token.Text.Whitespace, ' ')",
  "(59762, Token.Text, ';;')",
  "(59764, Token.Text.NewLine, '\\n')",
  "(59765, Token.Text.Whitespace, '\\t')",
  "(59766, Token.Text, '*.$libext)')",
  "(59776, Token.Text.NewLine, '\\n')",
  "(59777, Token.Text.Whitespace, '\\t  ')",
  "(59780, Token.Text, 'if')",
  "(59782, Token.Text.Whitespace, ' ')",
  "(59783, Token.Text, 'test')",
  "(59787, Token.Text.Whitespace, ' ')",
  "(59788, Token.Literal.String.Double, '\"$pass\"')",
  "(59795, Token.Text.Whitespace, ' ')",
  "(59796, Token.Text, '=')",
  "(59797, Token.Text.Whitespace, ' ')",
  "(59798, Token.Text, 'conv;')",
  "(59803, Token.Text.Whitespace, ' ')",
  "(59804, Token.Text, 'then')",
  "(59808, Token.Text.NewLine, '\\n')",
  "(59809, Token.Text.Whitespace, '\\t    ')",
  "(59814, Token.Text, 'deplibs=\"$deplib')",
  "(59830, Token.Text.Whitespace, ' ')",
  "(59831, Token.Text, '$deplibs\"')",
  "(59840, Token.Text.NewLine, '\\n')",
  "(59841, Token.Text.Whitespace, '\\t    ')",
  "(59846, Token.Text, 'continue')",
  "(59854, Token.Text.NewLine, '\\n')",
  "(59855, Token.Text.Whitespace, '\\t  ')",
  "(59858, Token.Text, 'fi')",
  "(59860, Token.Text.NewLine, '\\n')",
  "(59861, Token.Text.Whitespace, '\\t  ')",
  "(59864, Token.Text, 'case')",
  "(59868, Token.Text.Whitespace, ' ')",
  "(59869, Token.Text, '$linkmode')",
  "(59878, Token.Text.Whitespace, ' ')",
  "(59879, Token.Text, 'in')",
  "(59881, Token.Text.NewLine, '\\n')",
  "(59882, Token.Text.Whitespace, '\\t  ')",
  "(59885, Token.Text, 'lib)')",
  "(59889, Token.Text.NewLine, '\\n')",
  "(59890, Token.Text.Whitespace, '\\t    ')",
  "(59895, Token.Text, 'valid_a_lib=no')",
  "(59909, Token.Text.NewLine, '\\n')",
  "(59910, Token.Text.Whitespace, '\\t    ')",
  "(59915, Token.Text, 'case')",
  "(59919, Token.Text.Whitespace, ' ')",
  "(59920, Token.Text, '$deplibs_check_method')",
  "(59941, Token.Text.Whitespace, ' ')",
  "(59942, Token.Text, 'in')",
  "(59944, Token.Text.NewLine, '\\n')",
  "(59945, Token.Text.Whitespace, '\\t      ')",
  "(59952, Token.Text, 'match_pattern*)')",
  "(59967, Token.Text.NewLine, '\\n')",
  "(59968, Token.Text.Whitespace, '\\t\\t')",
  "(59970, Token.Text, 'set')",
  "(59973, Token.Text.Whitespace, ' ')",
  "(59974, Token.Text, 'dummy')",
  "(59979, Token.Text.Whitespace, ' ')",
  "(59980, Token.Text, '$deplibs_check_method')",
  "(60001, Token.Text.NewLine, '\\n')",
  "(60002, Token.Text.Whitespace, '\\t        ')",
  "(60011, Token.Text, 'match_pattern_regex=`expr')",
  "(60036, Token.Text.Whitespace, ' ')",
  "(60037, Token.Literal.String.Double, '\"$deplibs_check_method\"')",
  "(60060, Token.Text.Whitespace, ' ')",
  "(60061, Token.Text, ':')",
  "(60062, Token.Text.Whitespace, ' ')",
  "(60063, Token.Literal.String.Double, '\"$2 \\\\(.*\\\\)\"')",
  "(60074, Token.Text, '`')",
  "(60075, Token.Text.NewLine, '\\n')",
  "(60076, Token.Text.Whitespace, '\\t\\t')",
  "(60078, Token.Text, 'if')",
  "(60080, Token.Text.Whitespace, ' ')",
  "(60081, Token.Text, 'eval')",
  "(60085, Token.Text.Whitespace, ' ')",
  "(60086, Token.Text, '$echo')",
  "(60091, Token.Text.Whitespace, ' ')",
  "(60092, Token.Text, '\\\\\"$deplib\\\\\"')",
  "(60103, Token.Text.Whitespace, ' ')",
  "(60104, Token.Text, '2>/dev/null')",
  "(60115, Token.Text.Whitespace, ' ')",
  "(60116, Token.Text, '\\\\')",
  "(60117, Token.Text.NewLine, '\\n')",
  "(60118, Token.Text.Whitespace, '\\t\\t    ')",
  "(60124, Token.Text, '|')",
  "(60125, Token.Text.Whitespace, ' ')",
  "(60126, Token.Text, '$SED')",
  "(60130, Token.Text.Whitespace, ' ')",
  "(60131, Token.Text, '10q')",
  "(60134, Token.Text.Whitespace, ' ')",
  "(60135, Token.Text, '\\\\')",
  "(60136, Token.Text.NewLine, '\\n')",
  "(60137, Token.Text.Whitespace, '\\t\\t    ')",
  "(60143, Token.Text, '|')",
  "(60144, Token.Text.Whitespace, ' ')",
  "(60145, Token.Text, '$EGREP')",
  "(60151, Token.Text.Whitespace, ' ')",
  "(60152, Token.Literal.String.Double, '\"$match_pattern_regex\"')",
  "(60174, Token.Text.Whitespace, ' ')",
  "(60175, Token.Text, '>')",
  "(60176, Token.Text.Whitespace, ' ')",
  "(60177, Token.Text, '/dev/null;')",
  "(60187, Token.Text.Whitespace, ' ')",
  "(60188, Token.Text, 'then')",
  "(60192, Token.Text.NewLine, '\\n')",
  "(60193, Token.Text.Whitespace, '\\t\\t  ')",
  "(60197, Token.Text, 'valid_a_lib=yes')",
  "(60212, Token.Text.NewLine, '\\n')",
  "(60213, Token.Text.Whitespace, '\\t\\t')",
  "(60215, Token.Text, 'fi')",
  "(60217, Token.Text.NewLine, '\\n')",
  "(60218, Token.Text.Whitespace, '\\t\\t')",
  "(60220, Token.Text, ';;')",
  "(60222, Token.Text.NewLine, '\\n')",
  "(60223, Token.Text.Whitespace, '\\t      ')",
  "(60230, Token.Text, 'pass_all)')",
  "(60239, Token.Text.NewLine, '\\n')",
  "(60240, Token.Text.Whitespace, '\\t\\t')",
  "(60242, Token.Text, 'valid_a_lib=yes')",
  "(60257, Token.Text.NewLine, '\\n')",
  "(60258, Token.Text.Whitespace, '\\t\\t')",
  "(60260, Token.Text, ';;')",
  "(60262, Token.Text.NewLine, '\\n')",
  "(60263, Token.Text.Whitespace, '            ')",
  "(60275, Token.Text, 'esac')",
  "(60279, Token.Text.NewLine, '\\n')",
  "(60280, Token.Text.Whitespace, '\\t    ')",
  "(60285, Token.Text, 'if')",
  "(60287, Token.Text.Whitespace, ' ')",
  "(60288, Token.Text, 'test')",
  "(60292, Token.Text.Whitespace, ' ')",
  "(60293, Token.Literal.String.Double, '\"$valid_a_lib\"')",
  "(60307, Token.Text.Whitespace, ' ')",
  "(60308, Token.Text, '!=')",
  "(60310, Token.Text.Whitespace, ' ')",
  "(60311, Token.Text, 'yes;')",
  "(60315, Token.Text.Whitespace, ' ')",
  "(60316, Token.Text, 'then')",
  "(60320, Token.Text.NewLine, '\\n')",
  "(60321, Token.Text.Whitespace, '\\t      ')",
  "(60328, Token.Text, '$echo')",
  "(60333, Token.Text.NewLine, '\\n')",
  "(60334, Token.Text.Whitespace, '\\t      ')",
  "(60341, Token.Text, '$echo')",
  "(60346, Token.Text.Whitespace, ' ')",
  "(60347, Token.Literal.String.Double, '\"*** Warning: Trying to link with static lib archive $deplib.\"')",
  "(60409, Token.Text.NewLine, '\\n')",
  "(60410, Token.Text.Whitespace, '\\t      ')",
  "(60417, Token.Text, '$echo')",
  "(60422, Token.Text.Whitespace, ' ')",
  "(60423, Token.Literal.String.Double, '\"*** I have the capability to make that library automatically link in when\"')",
  "(60498, Token.Text.NewLine, '\\n')",
  "(60499, Token.Text.Whitespace, '\\t      ')",
  "(60506, Token.Text, '$echo')",
  "(60511, Token.Text.Whitespace, ' ')",
  "(60512, Token.Literal.String.Double, '\"*** you link to this library.  But I can only do this if you have a\"')",
  "(60581, Token.Text.NewLine, '\\n')",
  "(60582, Token.Text.Whitespace, '\\t      ')",
  "(60589, Token.Text, '$echo')",
  "(60594, Token.Text.Whitespace, ' ')",
  "(60595, Token.Literal.String.Double, '\"*** shared version of the library, which you do not appear to have\"')",
  "(60663, Token.Text.NewLine, '\\n')",
  "(60664, Token.Text.Whitespace, '\\t      ')",
  "(60671, Token.Text, '$echo')",
  "(60676, Token.Text.Whitespace, ' ')",
  "(60677, Token.Literal.String.Double, '\"*** because the file extensions .$libext of this argument makes me believe\"')",
  "(60753, Token.Text.NewLine, '\\n')",
  "(60754, Token.Text.Whitespace, '\\t      ')",
  "(60761, Token.Text, '$echo')",
  "(60766, Token.Text.Whitespace, ' ')",
  "(60767, Token.Literal.String.Double, '\"*** that it is just a static archive that I should not used here.\"')",
  "(60834, Token.Text.NewLine, '\\n')",
  "(60835, Token.Text.Whitespace, '\\t    ')",
  "(60840, Token.Text, 'else')",
  "(60844, Token.Text.NewLine, '\\n')",
  "(60845, Token.Text.Whitespace, '\\t      ')",
  "(60852, Token.Text, '$echo')",
  "(60857, Token.Text.NewLine, '\\n')",
  "(60858, Token.Text.Whitespace, '\\t      ')",
  "(60865, Token.Text, '$echo')",
  "(60870, Token.Text.Whitespace, ' ')",
  "(60871, Token.Literal.String.Double, '\"*** Warning: Linking the shared library $output against the\"')",
  "(60932, Token.Text.NewLine, '\\n')",
  "(60933, Token.Text.Whitespace, '\\t      ')",
  "(60940, Token.Text, '$echo')",
  "(60945, Token.Text.Whitespace, ' ')",
  "(60946, Token.Literal.String.Double, '\"*** static library $deplib is not portable!\"')",
  "(60991, Token.Text.NewLine, '\\n')",
  "(60992, Token.Text.Whitespace, '\\t      ')",
  "(60999, Token.Text, 'deplibs=\"$deplib')",
  "(61015, Token.Text.Whitespace, ' ')",
  "(61016, Token.Text, '$deplibs\"')",
  "(61025, Token.Text.NewLine, '\\n')",
  "(61026, Token.Text.Whitespace, '\\t    ')",
  "(61031, Token.Text, 'fi')",
  "(61033, Token.Text.NewLine, '\\n')",
  "(61034, Token.Text.Whitespace, '\\t    ')",
  "(61039, Token.Text, 'continue')",
  "(61047, Token.Text.NewLine, '\\n')",
  "(61048, Token.Text.Whitespace, '\\t    ')",
  "(61053, Token.Text, ';;')",
  "(61055, Token.Text.NewLine, '\\n')",
  "(61056, Token.Text.Whitespace, '\\t  ')",
  "(61059, Token.Text, 'prog)')",
  "(61064, Token.Text.NewLine, '\\n')",
  "(61065, Token.Text.Whitespace, '\\t    ')",
  "(61070, Token.Text, 'if')",
  "(61072, Token.Text.Whitespace, ' ')",
  "(61073, Token.Text, 'test')",
  "(61077, Token.Text.Whitespace, ' ')",
  "(61078, Token.Literal.String.Double, '\"$pass\"')",
  "(61085, Token.Text.Whitespace, ' ')",
  "(61086, Token.Text, '!=')",
  "(61088, Token.Text.Whitespace, ' ')",
  "(61089, Token.Text, 'link;')",
  "(61094, Token.Text.Whitespace, ' ')",
  "(61095, Token.Text, 'then')",
  "(61099, Token.Text.NewLine, '\\n')",
  "(61100, Token.Text.Whitespace, '\\t      ')",
  "(61107, Token.Text, 'deplibs=\"$deplib')",
  "(61123, Token.Text.Whitespace, ' ')",
  "(61124, Token.Text, '$deplibs\"')",
  "(61133, Token.Text.NewLine, '\\n')",
  "(61134, Token.Text.Whitespace, '\\t    ')",
  "(61139, Token.Text, 'else')",
  "(61143, Token.Text.NewLine, '\\n')",
  "(61144, Token.Text.Whitespace, '\\t      ')",
  "(61151, Token.Text, 'compile_deplibs=\"$deplib')",
  "(61175, Token.Text.Whitespace, ' ')",
  "(61176, Token.Text, '$compile_deplibs\"')",
  "(61193, Token.Text.NewLine, '\\n')",
  "(61194, Token.Text.Whitespace, '\\t      ')",
  "(61201, Token.Text, 'finalize_deplibs=\"$deplib')",
  "(61226, Token.Text.Whitespace, ' ')",
  "(61227, Token.Text, '$finalize_deplibs\"')",
  "(61245, Token.Text.NewLine, '\\n')",
  "(61246, Token.Text.Whitespace, '\\t    ')",
  "(61251, Token.Text, 'fi')",
  "(61253, Token.Text.NewLine, '\\n')",
  "(61254, Token.Text.Whitespace, '\\t    ')",
  "(61259, Token.Text, 'continue')",
  "(61267, Token.Text.NewLine, '\\n')",
  "(61268, Token.Text.Whitespace, '\\t    ')",
  "(61273, Token.Text, ';;')",
  "(61275, Token.Text.NewLine, '\\n')",
  "(61276, Token.Text.Whitespace, '\\t  ')",
  "(61279, Token.Text, 'esac')",
  "(61283, Token.Text.Whitespace, ' ')",
  "(61284, Token.Comment.Single, '# linkmode')",
  "(61294, Token.Text.NewLine, '\\n')",
  "(61295, Token.Text.Whitespace, '\\t  ')",
  "(61298, Token.Text, ';;')",
  "(61300, Token.Text.Whitespace, ' ')",
  "(61301, Token.Comment.Single, '# *.$libext')",
  "(61312, Token.Text.NewLine, '\\n')",
  "(61313, Token.Text.Whitespace, '\\t')",
  "(61314, Token.Text, '*.lo')",
  "(61318, Token.Text.Whitespace, ' ')",
  "(61319, Token.Text, '|')",
  "(61320, Token.Text.Whitespace, ' ')",
  "(61321, Token.Text, '*.$objext)')",
  "(61331, Token.Text.NewLine, '\\n')",
  "(61332, Token.Text.Whitespace, '\\t  ')",
  "(61335, Token.Text, 'if')",
  "(61337, Token.Text.Whitespace, ' ')",
  "(61338, Token.Text, 'test')",
  "(61342, Token.Text.Whitespace, ' ')",
  "(61343, Token.Literal.String.Double, '\"$pass\"')",
  "(61350, Token.Text.Whitespace, ' ')",
  "(61351, Token.Text, '=')",
  "(61352, Token.Text.Whitespace, ' ')",
  "(61353, Token.Text, 'conv;')",
  "(61358, Token.Text.Whitespace, ' ')",
  "(61359, Token.Text, 'then')",
  "(61363, Token.Text.NewLine, '\\n')",
  "(61364, Token.Text.Whitespace, '\\t    ')",
  "(61369, Token.Text, 'deplibs=\"$deplib')",
  "(61385, Token.Text.Whitespace, ' ')",
  "(61386, Token.Text, '$deplibs\"')",
  "(61395, Token.Text.NewLine, '\\n')",
  "(61396, Token.Text.Whitespace, '\\t  ')",
  "(61399, Token.Text, 'elif')",
  "(61403, Token.Text.Whitespace, ' ')",
  "(61404, Token.Text, 'test')",
  "(61408, Token.Text.Whitespace, ' ')",
  "(61409, Token.Literal.String.Double, '\"$linkmode\"')",
  "(61420, Token.Text.Whitespace, ' ')",
  "(61421, Token.Text, '=')",
  "(61422, Token.Text.Whitespace, ' ')",
  "(61423, Token.Text, 'prog;')",
  "(61428, Token.Text.Whitespace, ' ')",
  "(61429, Token.Text, 'then')",
  "(61433, Token.Text.NewLine, '\\n')",
  "(61434, Token.Text.Whitespace, '\\t    ')",
  "(61439, Token.Text, 'if')",
  "(61441, Token.Text.Whitespace, ' ')",
  "(61442, Token.Text, 'test')",
  "(61446, Token.Text.Whitespace, ' ')",
  "(61447, Token.Literal.String.Double, '\"$pass\"')",
  "(61454, Token.Text.Whitespace, ' ')",
  "(61455, Token.Text, '=')",
  "(61456, Token.Text.Whitespace, ' ')",
  "(61457, Token.Text, 'dlpreopen')",
  "(61466, Token.Text.Whitespace, ' ')",
  "(61467, Token.Text, '||')",
  "(61469, Token.Text.Whitespace, ' ')",
  "(61470, Token.Text, 'test')",
  "(61474, Token.Text.Whitespace, ' ')",
  "(61475, Token.Literal.String.Double, '\"$dlopen_support\"')",
  "(61492, Token.Text.Whitespace, ' ')",
  "(61493, Token.Text, '!=')",
  "(61495, Token.Text.Whitespace, ' ')",
  "(61496, Token.Text, 'yes')",
  "(61499, Token.Text.Whitespace, ' ')",
  "(61500, Token.Text, '||')",
  "(61502, Token.Text.Whitespace, ' ')",
  "(61503, Token.Text, 'test')",
  "(61507, Token.Text.Whitespace, ' ')",
  "(61508, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(61529, Token.Text.Whitespace, ' ')",
  "(61530, Token.Text, '=')",
  "(61531, Token.Text.Whitespace, ' ')",
  "(61532, Token.Text, 'no;')",
  "(61535, Token.Text.Whitespace, ' ')",
  "(61536, Token.Text, 'then')",
  "(61540, Token.Text.NewLine, '\\n')",
  "(61541, Token.Text.Whitespace, '\\t      ')",
  "(61548, Token.Comment.Single, \"# If there is no dlopen support or we're linking statically,\")",
  "(61608, Token.Text.NewLine, '\\n')",
  "(61609, Token.Text.Whitespace, '\\t      ')",
  "(61616, Token.Comment.Single, '# we need to preload.')",
  "(61637, Token.Text.NewLine, '\\n')",
  "(61638, Token.Text.Whitespace, '\\t      ')",
  "(61645, Token.Text, 'newdlprefiles=\"$newdlprefiles')",
  "(61674, Token.Text.Whitespace, ' ')",
  "(61675, Token.Text, '$deplib\"')",
  "(61683, Token.Text.NewLine, '\\n')",
  "(61684, Token.Text.Whitespace, '\\t      ')",
  "(61691, Token.Text, 'compile_deplibs=\"$deplib')",
  "(61715, Token.Text.Whitespace, ' ')",
  "(61716, Token.Text, '$compile_deplibs\"')",
  "(61733, Token.Text.NewLine, '\\n')",
  "(61734, Token.Text.Whitespace, '\\t      ')",
  "(61741, Token.Text, 'finalize_deplibs=\"$deplib')",
  "(61766, Token.Text.Whitespace, ' ')",
  "(61767, Token.Text, '$finalize_deplibs\"')",
  "(61785, Token.Text.NewLine, '\\n')",
  "(61786, Token.Text.Whitespace, '\\t    ')",
  "(61791, Token.Text, 'else')",
  "(61795, Token.Text.NewLine, '\\n')",
  "(61796, Token.Text.Whitespace, '\\t      ')",
  "(61803, Token.Text, 'newdlfiles=\"$newdlfiles')",
  "(61826, Token.Text.Whitespace, ' ')",
  "(61827, Token.Text, '$deplib\"')",
  "(61835, Token.Text.NewLine, '\\n')",
  "(61836, Token.Text.Whitespace, '\\t    ')",
  "(61841, Token.Text, 'fi')",
  "(61843, Token.Text.NewLine, '\\n')",
  "(61844, Token.Text.Whitespace, '\\t  ')",
  "(61847, Token.Text, 'fi')",
  "(61849, Token.Text.NewLine, '\\n')",
  "(61850, Token.Text.Whitespace, '\\t  ')",
  "(61853, Token.Text, 'continue')",
  "(61861, Token.Text.NewLine, '\\n')",
  "(61862, Token.Text.Whitespace, '\\t  ')",
  "(61865, Token.Text, ';;')",
  "(61867, Token.Text.NewLine, '\\n')",
  "(61868, Token.Text.Whitespace, '\\t')",
  "(61869, Token.Text, '%DEPLIBS%)')",
  "(61879, Token.Text.NewLine, '\\n')",
  "(61880, Token.Text.Whitespace, '\\t  ')",
  "(61883, Token.Text, 'alldeplibs=yes')",
  "(61897, Token.Text.NewLine, '\\n')",
  "(61898, Token.Text.Whitespace, '\\t  ')",
  "(61901, Token.Text, 'continue')",
  "(61909, Token.Text.NewLine, '\\n')",
  "(61910, Token.Text.Whitespace, '\\t  ')",
  "(61913, Token.Text, ';;')",
  "(61915, Token.Text.NewLine, '\\n')",
  "(61916, Token.Text.Whitespace, '\\t')",
  "(61917, Token.Text, 'esac')",
  "(61921, Token.Text.Whitespace, ' ')",
  "(61922, Token.Comment.Single, '# case $deplib')",
  "(61936, Token.Text.NewLine, '\\n')",
  "(61937, Token.Text.Whitespace, '\\t')",
  "(61938, Token.Text, 'if')",
  "(61940, Token.Text.Whitespace, ' ')",
  "(61941, Token.Text, 'test')",
  "(61945, Token.Text.Whitespace, ' ')",
  "(61946, Token.Literal.String.Double, '\"$found\"')",
  "(61954, Token.Text.Whitespace, ' ')",
  "(61955, Token.Text, '=')",
  "(61956, Token.Text.Whitespace, ' ')",
  "(61957, Token.Text, 'yes')",
  "(61960, Token.Text.Whitespace, ' ')",
  "(61961, Token.Text, '||')",
  "(61963, Token.Text.Whitespace, ' ')",
  "(61964, Token.Text, 'test')",
  "(61968, Token.Text.Whitespace, ' ')",
  "(61969, Token.Text, '-f')",
  "(61971, Token.Text.Whitespace, ' ')",
  "(61972, Token.Literal.String.Double, '\"$lib\"')",
  "(61978, Token.Text, ';')",
  "(61979, Token.Text.Whitespace, ' ')",
  "(61980, Token.Text, 'then')",
  "(61984, Token.Text.Whitespace, ' ')",
  "(61985, Token.Text, ':')",
  "(61986, Token.Text.NewLine, '\\n')",
  "(61987, Token.Text.Whitespace, '\\t')",
  "(61988, Token.Text, 'else')",
  "(61992, Token.Text.NewLine, '\\n')",
  "(61993, Token.Text.Whitespace, '\\t  ')",
  "(61996, Token.Text, '$echo')",
  "(62001, Token.Text.Whitespace, ' ')",
  "(62002, Token.Literal.String.Double, '\"$modename: cannot find the library \\\\`$lib\\' or unhandled argument \\\\`$deplib\\'\"')",
  "(62079, Token.Text.Whitespace, ' ')",
  "(62080, Token.Text, '1>&2')",
  "(62084, Token.Text.NewLine, '\\n')",
  "(62085, Token.Text.Whitespace, '\\t  ')",
  "(62088, Token.Text, 'exit')",
  "(62092, Token.Text.Whitespace, ' ')",
  "(62093, Token.Text, '$EXIT_FAILURE')",
  "(62106, Token.Text.NewLine, '\\n')",
  "(62107, Token.Text.Whitespace, '\\t')",
  "(62108, Token.Text, 'fi')",
  "(62110, Token.Text.NewLine, '\\n\\n')",
  "(62112, Token.Text.Whitespace, '\\t')",
  "(62113, Token.Comment.Single, '# Check to see that this really is a libtool archive.')",
  "(62166, Token.Text.NewLine, '\\n')",
  "(62167, Token.Text.Whitespace, '\\t')",
  "(62168, Token.Text, 'if')",
  "(62170, Token.Text.Whitespace, ' ')",
  "(62171, Token.Text, '(${SED}')",
  "(62178, Token.Text.Whitespace, ' ')",
  "(62179, Token.Text, '-e')",
  "(62181, Token.Text.Whitespace, ' ')",
  "(62182, Token.Literal.String.Single, \"'2q'\")",
  "(62186, Token.Text.Whitespace, ' ')",
  "(62187, Token.Text, '$lib')",
  "(62191, Token.Text.Whitespace, ' ')",
  "(62192, Token.Text, '|')",
  "(62193, Token.Text.Whitespace, ' ')",
  "(62194, Token.Text, 'grep')",
  "(62198, Token.Text.Whitespace, ' ')",
  "(62199, Token.Literal.String.Double, '\"^# Generated by .*$PACKAGE\"')",
  "(62227, Token.Text, ')')",
  "(62228, Token.Text.Whitespace, ' ')",
  "(62229, Token.Text, '>/dev/null')",
  "(62239, Token.Text.Whitespace, ' ')",
  "(62240, Token.Text, '2>&1;')",
  "(62245, Token.Text.Whitespace, ' ')",
  "(62246, Token.Text, 'then')",
  "(62250, Token.Text.Whitespace, ' ')",
  "(62251, Token.Text, ':')",
  "(62252, Token.Text.NewLine, '\\n')",
  "(62253, Token.Text.Whitespace, '\\t')",
  "(62254, Token.Text, 'else')",
  "(62258, Token.Text.NewLine, '\\n')",
  "(62259, Token.Text.Whitespace, '\\t  ')",
  "(62262, Token.Text, '$echo')",
  "(62267, Token.Text.Whitespace, ' ')",
  "(62268, Token.Literal.String.Double, '\"$modename: \\\\`$lib\\' is not a valid libtool archive\"')",
  "(62319, Token.Text.Whitespace, ' ')",
  "(62320, Token.Text, '1>&2')",
  "(62324, Token.Text.NewLine, '\\n')",
  "(62325, Token.Text.Whitespace, '\\t  ')",
  "(62328, Token.Text, 'exit')",
  "(62332, Token.Text.Whitespace, ' ')",
  "(62333, Token.Text, '$EXIT_FAILURE')",
  "(62346, Token.Text.NewLine, '\\n')",
  "(62347, Token.Text.Whitespace, '\\t')",
  "(62348, Token.Text, 'fi')",
  "(62350, Token.Text.NewLine, '\\n\\n')",
  "(62352, Token.Text.Whitespace, '\\t')",
  "(62353, Token.Text, 'ladir=`$echo')",
  "(62365, Token.Text.Whitespace, ' ')",
  "(62366, Token.Literal.String.Double, '\"X$lib\"')",
  "(62373, Token.Text.Whitespace, ' ')",
  "(62374, Token.Text, '|')",
  "(62375, Token.Text.Whitespace, ' ')",
  "(62376, Token.Text, '$Xsed')",
  "(62381, Token.Text.Whitespace, ' ')",
  "(62382, Token.Text, '-e')",
  "(62384, Token.Text.Whitespace, ' ')",
  "(62385, Token.Literal.String.Single, \"'s%/[^/]*$%%'\")",
  "(62398, Token.Text, '`')",
  "(62399, Token.Text.NewLine, '\\n')",
  "(62400, Token.Text.Whitespace, '\\t')",
  "(62401, Token.Text, 'test')",
  "(62405, Token.Text.Whitespace, ' ')",
  "(62406, Token.Literal.String.Double, '\"X$ladir\"')",
  "(62415, Token.Text.Whitespace, ' ')",
  "(62416, Token.Text, '=')",
  "(62417, Token.Text.Whitespace, ' ')",
  "(62418, Token.Literal.String.Double, '\"X$lib\"')",
  "(62425, Token.Text.Whitespace, ' ')",
  "(62426, Token.Text, '&&')",
  "(62428, Token.Text.Whitespace, ' ')",
  "(62429, Token.Text, 'ladir=\".\"')",
  "(62438, Token.Text.NewLine, '\\n\\n')",
  "(62440, Token.Text.Whitespace, '\\t')",
  "(62441, Token.Text, 'dlname=')",
  "(62448, Token.Text.NewLine, '\\n')",
  "(62449, Token.Text.Whitespace, '\\t')",
  "(62450, Token.Text, 'dlopen=')",
  "(62457, Token.Text.NewLine, '\\n')",
  "(62458, Token.Text.Whitespace, '\\t')",
  "(62459, Token.Text, 'dlpreopen=')",
  "(62469, Token.Text.NewLine, '\\n')",
  "(62470, Token.Text.Whitespace, '\\t')",
  "(62471, Token.Text, 'libdir=')",
  "(62478, Token.Text.NewLine, '\\n')",
  "(62479, Token.Text.Whitespace, '\\t')",
  "(62480, Token.Text, 'library_names=')",
  "(62494, Token.Text.NewLine, '\\n')",
  "(62495, Token.Text.Whitespace, '\\t')",
  "(62496, Token.Text, 'old_library=')",
  "(62508, Token.Text.NewLine, '\\n')",
  "(62509, Token.Text.Whitespace, '\\t')",
  "(62510, Token.Comment.Single, '# If the library was installed with an old release of libtool,')",
  "(62572, Token.Text.NewLine, '\\n')",
  "(62573, Token.Text.Whitespace, '\\t')",
  "(62574, Token.Comment.Single, '# it will not redefine variables installed, or shouldnotlink')",
  "(62634, Token.Text.NewLine, '\\n')",
  "(62635, Token.Text.Whitespace, '\\t')",
  "(62636, Token.Text, 'installed=yes')",
  "(62649, Token.Text.NewLine, '\\n')",
  "(62650, Token.Text.Whitespace, '\\t')",
  "(62651, Token.Text, 'shouldnotlink=no')",
  "(62667, Token.Text.NewLine, '\\n')",
  "(62668, Token.Text.Whitespace, '\\t')",
  "(62669, Token.Text, 'avoidtemprpath=')",
  "(62684, Token.Text.NewLine, '\\n\\n\\n')",
  "(62687, Token.Text.Whitespace, '\\t')",
  "(62688, Token.Comment.Single, '# Read the .la file')",
  "(62707, Token.Text.NewLine, '\\n')",
  "(62708, Token.Text.Whitespace, '\\t')",
  "(62709, Token.Text, 'case')",
  "(62713, Token.Text.Whitespace, ' ')",
  "(62714, Token.Text, '$lib')",
  "(62718, Token.Text.Whitespace, ' ')",
  "(62719, Token.Text, 'in')",
  "(62721, Token.Text.NewLine, '\\n')",
  "(62722, Token.Text.Whitespace, '\\t')",
  "(62723, Token.Text, '*/*')",
  "(62726, Token.Text.Whitespace, ' ')",
  "(62727, Token.Text, '|')",
  "(62728, Token.Text.Whitespace, ' ')",
  "(62729, Token.Text, '*\\\\\\\\*)')",
  "(62734, Token.Text.Whitespace, ' ')",
  "(62735, Token.Text, '.')",
  "(62736, Token.Text.Whitespace, ' ')",
  "(62737, Token.Text, '$lib')",
  "(62741, Token.Text.Whitespace, ' ')",
  "(62742, Token.Text, ';;')",
  "(62744, Token.Text.NewLine, '\\n')",
  "(62745, Token.Text.Whitespace, '\\t')",
  "(62746, Token.Text, '*)')",
  "(62748, Token.Text.Whitespace, ' ')",
  "(62749, Token.Text, '.')",
  "(62750, Token.Text.Whitespace, ' ')",
  "(62751, Token.Text, './$lib')",
  "(62757, Token.Text.Whitespace, ' ')",
  "(62758, Token.Text, ';;')",
  "(62760, Token.Text.NewLine, '\\n')",
  "(62761, Token.Text.Whitespace, '\\t')",
  "(62762, Token.Text, 'esac')",
  "(62766, Token.Text.NewLine, '\\n\\n')",
  "(62768, Token.Text.Whitespace, '\\t')",
  "(62769, Token.Text, 'if')",
  "(62771, Token.Text.Whitespace, ' ')",
  "(62772, Token.Text, 'test')",
  "(62776, Token.Text.Whitespace, ' ')",
  "(62777, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(62794, Token.Text.Whitespace, ' ')",
  "(62795, Token.Text, '=')",
  "(62796, Token.Text.Whitespace, ' ')",
  "(62797, Token.Literal.String.Double, '\"lib,link\"')",
  "(62807, Token.Text.Whitespace, ' ')",
  "(62808, Token.Text, '||')",
  "(62810, Token.Text.NewLine, '\\n')",
  "(62811, Token.Text.Whitespace, '\\t   ')",
  "(62815, Token.Text, 'test')",
  "(62819, Token.Text.Whitespace, ' ')",
  "(62820, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(62837, Token.Text.Whitespace, ' ')",
  "(62838, Token.Text, '=')",
  "(62839, Token.Text.Whitespace, ' ')",
  "(62840, Token.Literal.String.Double, '\"prog,scan\"')",
  "(62851, Token.Text.Whitespace, ' ')",
  "(62852, Token.Text, '||')",
  "(62854, Token.Text.NewLine, '\\n')",
  "(62855, Token.Text.Whitespace, '\\t   ')",
  "(62859, Token.Text, '{')",
  "(62860, Token.Text.Whitespace, ' ')",
  "(62861, Token.Text, 'test')",
  "(62865, Token.Text.Whitespace, ' ')",
  "(62866, Token.Literal.String.Double, '\"$linkmode\"')",
  "(62877, Token.Text.Whitespace, ' ')",
  "(62878, Token.Text, '!=')",
  "(62880, Token.Text.Whitespace, ' ')",
  "(62881, Token.Text, 'prog')",
  "(62885, Token.Text.Whitespace, ' ')",
  "(62886, Token.Text, '&&')",
  "(62888, Token.Text.Whitespace, ' ')",
  "(62889, Token.Text, 'test')",
  "(62893, Token.Text.Whitespace, ' ')",
  "(62894, Token.Literal.String.Double, '\"$linkmode\"')",
  "(62905, Token.Text.Whitespace, ' ')",
  "(62906, Token.Text, '!=')",
  "(62908, Token.Text.Whitespace, ' ')",
  "(62909, Token.Text, 'lib;')",
  "(62913, Token.Text.Whitespace, ' ')",
  "(62914, Token.Text, '};')",
  "(62916, Token.Text.Whitespace, ' ')",
  "(62917, Token.Text, 'then')",
  "(62921, Token.Text.NewLine, '\\n')",
  "(62922, Token.Text.Whitespace, '\\t  ')",
  "(62925, Token.Text, 'test')",
  "(62929, Token.Text.Whitespace, ' ')",
  "(62930, Token.Text, '-n')",
  "(62932, Token.Text.Whitespace, ' ')",
  "(62933, Token.Literal.String.Double, '\"$dlopen\"')",
  "(62942, Token.Text.Whitespace, ' ')",
  "(62943, Token.Text, '&&')",
  "(62945, Token.Text.Whitespace, ' ')",
  "(62946, Token.Text, 'dlfiles=\"$dlfiles')",
  "(62963, Token.Text.Whitespace, ' ')",
  "(62964, Token.Text, '$dlopen\"')",
  "(62972, Token.Text.NewLine, '\\n')",
  "(62973, Token.Text.Whitespace, '\\t  ')",
  "(62976, Token.Text, 'test')",
  "(62980, Token.Text.Whitespace, ' ')",
  "(62981, Token.Text, '-n')",
  "(62983, Token.Text.Whitespace, ' ')",
  "(62984, Token.Literal.String.Double, '\"$dlpreopen\"')",
  "(62996, Token.Text.Whitespace, ' ')",
  "(62997, Token.Text, '&&')",
  "(62999, Token.Text.Whitespace, ' ')",
  "(63000, Token.Text, 'dlprefiles=\"$dlprefiles')",
  "(63023, Token.Text.Whitespace, ' ')",
  "(63024, Token.Text, '$dlpreopen\"')",
  "(63035, Token.Text.NewLine, '\\n')",
  "(63036, Token.Text.Whitespace, '\\t')",
  "(63037, Token.Text, 'fi')",
  "(63039, Token.Text.NewLine, '\\n\\n')",
  "(63041, Token.Text.Whitespace, '\\t')",
  "(63042, Token.Text, 'if')",
  "(63044, Token.Text.Whitespace, ' ')",
  "(63045, Token.Text, 'test')",
  "(63049, Token.Text.Whitespace, ' ')",
  "(63050, Token.Literal.String.Double, '\"$pass\"')",
  "(63057, Token.Text.Whitespace, ' ')",
  "(63058, Token.Text, '=')",
  "(63059, Token.Text.Whitespace, ' ')",
  "(63060, Token.Text, 'conv;')",
  "(63065, Token.Text.Whitespace, ' ')",
  "(63066, Token.Text, 'then')",
  "(63070, Token.Text.NewLine, '\\n')",
  "(63071, Token.Text.Whitespace, '\\t  ')",
  "(63074, Token.Comment.Single, '# Only check for convenience libraries')",
  "(63112, Token.Text.NewLine, '\\n')",
  "(63113, Token.Text.Whitespace, '\\t  ')",
  "(63116, Token.Text, 'deplibs=\"$lib')",
  "(63129, Token.Text.Whitespace, ' ')",
  "(63130, Token.Text, '$deplibs\"')",
  "(63139, Token.Text.NewLine, '\\n')",
  "(63140, Token.Text.Whitespace, '\\t  ')",
  "(63143, Token.Text, 'if')",
  "(63145, Token.Text.Whitespace, ' ')",
  "(63146, Token.Text, 'test')",
  "(63150, Token.Text.Whitespace, ' ')",
  "(63151, Token.Text, '-z')",
  "(63153, Token.Text.Whitespace, ' ')",
  "(63154, Token.Literal.String.Double, '\"$libdir\"')",
  "(63163, Token.Text, ';')",
  "(63164, Token.Text.Whitespace, ' ')",
  "(63165, Token.Text, 'then')",
  "(63169, Token.Text.NewLine, '\\n')",
  "(63170, Token.Text.Whitespace, '\\t    ')",
  "(63175, Token.Text, 'if')",
  "(63177, Token.Text.Whitespace, ' ')",
  "(63178, Token.Text, 'test')",
  "(63182, Token.Text.Whitespace, ' ')",
  "(63183, Token.Text, '-z')",
  "(63185, Token.Text.Whitespace, ' ')",
  "(63186, Token.Literal.String.Double, '\"$old_library\"')",
  "(63200, Token.Text, ';')",
  "(63201, Token.Text.Whitespace, ' ')",
  "(63202, Token.Text, 'then')",
  "(63206, Token.Text.NewLine, '\\n')",
  "(63207, Token.Text.Whitespace, '\\t      ')",
  "(63214, Token.Text, '$echo')",
  "(63219, Token.Text.Whitespace, ' ')",
  "(63220, Token.Literal.String.Double, '\"$modename: cannot find name of link library for \\\\`$lib\\'\"')",
  "(63277, Token.Text.Whitespace, ' ')",
  "(63278, Token.Text, '1>&2')",
  "(63282, Token.Text.NewLine, '\\n')",
  "(63283, Token.Text.Whitespace, '\\t      ')",
  "(63290, Token.Text, 'exit')",
  "(63294, Token.Text.Whitespace, ' ')",
  "(63295, Token.Text, '$EXIT_FAILURE')",
  "(63308, Token.Text.NewLine, '\\n')",
  "(63309, Token.Text.Whitespace, '\\t    ')",
  "(63314, Token.Text, 'fi')",
  "(63316, Token.Text.NewLine, '\\n')",
  "(63317, Token.Text.Whitespace, '\\t    ')",
  "(63322, Token.Comment.Single, '# It is a libtool convenience library, so add in its objects.')",
  "(63383, Token.Text.NewLine, '\\n')",
  "(63384, Token.Text.Whitespace, '\\t    ')",
  "(63389, Token.Text, 'convenience=\"$convenience')",
  "(63414, Token.Text.Whitespace, ' ')",
  "(63415, Token.Text, '$ladir/$objdir/$old_library\"')",
  "(63443, Token.Text.NewLine, '\\n')",
  "(63444, Token.Text.Whitespace, '\\t    ')",
  "(63449, Token.Text, 'old_convenience=\"$old_convenience')",
  "(63482, Token.Text.Whitespace, ' ')",
  "(63483, Token.Text, '$ladir/$objdir/$old_library\"')",
  "(63511, Token.Text.NewLine, '\\n')",
  "(63512, Token.Text.Whitespace, '\\t    ')",
  "(63517, Token.Text, 'tmp_libs=')",
  "(63526, Token.Text.NewLine, '\\n')",
  "(63527, Token.Text.Whitespace, '\\t    ')",
  "(63532, Token.Text, 'for')",
  "(63535, Token.Text.Whitespace, ' ')",
  "(63536, Token.Text, 'deplib')",
  "(63542, Token.Text.Whitespace, ' ')",
  "(63543, Token.Text, 'in')",
  "(63545, Token.Text.Whitespace, ' ')",
  "(63546, Token.Text, '$dependency_libs;')",
  "(63563, Token.Text.Whitespace, ' ')",
  "(63564, Token.Text, 'do')",
  "(63566, Token.Text.NewLine, '\\n')",
  "(63567, Token.Text.Whitespace, '\\t      ')",
  "(63574, Token.Text, 'deplibs=\"$deplib')",
  "(63590, Token.Text.Whitespace, ' ')",
  "(63591, Token.Text, '$deplibs\"')",
  "(63600, Token.Text.NewLine, '\\n')",
  "(63601, Token.Text.Whitespace, '              ')",
  "(63615, Token.Text, 'if')",
  "(63617, Token.Text.Whitespace, ' ')",
  "(63618, Token.Text, 'test')",
  "(63622, Token.Text.Whitespace, ' ')",
  "(63623, Token.Literal.String.Double, '\"X$duplicate_deps\"')",
  "(63641, Token.Text.Whitespace, ' ')",
  "(63642, Token.Text, '=')",
  "(63643, Token.Text.Whitespace, ' ')",
  "(63644, Token.Literal.String.Double, '\"Xyes\"')",
  "(63650, Token.Text.Whitespace, ' ')",
  "(63651, Token.Text, ';')",
  "(63652, Token.Text.Whitespace, ' ')",
  "(63653, Token.Text, 'then')",
  "(63657, Token.Text.NewLine, '\\n')",
  "(63658, Token.Text.Whitespace, '\\t        ')",
  "(63667, Token.Text, 'case')",
  "(63671, Token.Text.Whitespace, ' ')",
  "(63672, Token.Literal.String.Double, '\"$tmp_libs \"')",
  "(63684, Token.Text.Whitespace, ' ')",
  "(63685, Token.Text, 'in')",
  "(63687, Token.Text.NewLine, '\\n')",
  "(63688, Token.Text.Whitespace, '\\t        ')",
  "(63697, Token.Text, '*\"')",
  "(63699, Token.Text.Whitespace, ' ')",
  "(63700, Token.Text, '$deplib')",
  "(63707, Token.Text.Whitespace, ' ')",
  "(63708, Token.Literal.String.Double, '\"*) specialdeplibs=\"')",
  "(63728, Token.Text, '$specialdeplibs')",
  "(63743, Token.Text.Whitespace, ' ')",
  "(63744, Token.Text, '$deplib\"')",
  "(63752, Token.Text.Whitespace, ' ')",
  "(63753, Token.Text, ';;')",
  "(63755, Token.Text.NewLine, '\\n')",
  "(63756, Token.Text.Whitespace, '\\t        ')",
  "(63765, Token.Text, 'esac')",
  "(63769, Token.Text.NewLine, '\\n')",
  "(63770, Token.Text.Whitespace, '              ')",
  "(63784, Token.Text, 'fi')",
  "(63786, Token.Text.NewLine, '\\n')",
  "(63787, Token.Text.Whitespace, '\\t      ')",
  "(63794, Token.Text, 'tmp_libs=\"$tmp_libs')",
  "(63813, Token.Text.Whitespace, ' ')",
  "(63814, Token.Text, '$deplib\"')",
  "(63822, Token.Text.NewLine, '\\n')",
  "(63823, Token.Text.Whitespace, '\\t    ')",
  "(63828, Token.Text, 'done')",
  "(63832, Token.Text.NewLine, '\\n')",
  "(63833, Token.Text.Whitespace, '\\t  ')",
  "(63836, Token.Text, 'elif')",
  "(63840, Token.Text.Whitespace, ' ')",
  "(63841, Token.Text, 'test')",
  "(63845, Token.Text.Whitespace, ' ')",
  "(63846, Token.Literal.String.Double, '\"$linkmode\"')",
  "(63857, Token.Text.Whitespace, ' ')",
  "(63858, Token.Text, '!=')",
  "(63860, Token.Text.Whitespace, ' ')",
  "(63861, Token.Text, 'prog')",
  "(63865, Token.Text.Whitespace, ' ')",
  "(63866, Token.Text, '&&')",
  "(63868, Token.Text.Whitespace, ' ')",
  "(63869, Token.Text, 'test')",
  "(63873, Token.Text.Whitespace, ' ')",
  "(63874, Token.Literal.String.Double, '\"$linkmode\"')",
  "(63885, Token.Text.Whitespace, ' ')",
  "(63886, Token.Text, '!=')",
  "(63888, Token.Text.Whitespace, ' ')",
  "(63889, Token.Text, 'lib;')",
  "(63893, Token.Text.Whitespace, ' ')",
  "(63894, Token.Text, 'then')",
  "(63898, Token.Text.NewLine, '\\n')",
  "(63899, Token.Text.Whitespace, '\\t    ')",
  "(63904, Token.Text, '$echo')",
  "(63909, Token.Text.Whitespace, ' ')",
  "(63910, Token.Literal.String.Double, '\"$modename: \\\\`$lib\\' is not a convenience library\"')",
  "(63959, Token.Text.Whitespace, ' ')",
  "(63960, Token.Text, '1>&2')",
  "(63964, Token.Text.NewLine, '\\n')",
  "(63965, Token.Text.Whitespace, '\\t    ')",
  "(63970, Token.Text, 'exit')",
  "(63974, Token.Text.Whitespace, ' ')",
  "(63975, Token.Text, '$EXIT_FAILURE')",
  "(63988, Token.Text.NewLine, '\\n')",
  "(63989, Token.Text.Whitespace, '\\t  ')",
  "(63992, Token.Text, 'fi')",
  "(63994, Token.Text.NewLine, '\\n')",
  "(63995, Token.Text.Whitespace, '\\t  ')",
  "(63998, Token.Text, 'continue')",
  "(64006, Token.Text.NewLine, '\\n')",
  "(64007, Token.Text.Whitespace, '\\t')",
  "(64008, Token.Text, 'fi')",
  "(64010, Token.Text.Whitespace, ' ')",
  "(64011, Token.Comment.Single, '# $pass = conv')",
  "(64025, Token.Text.NewLine, '\\n\\n\\n')",
  "(64028, Token.Text.Whitespace, '\\t')",
  "(64029, Token.Comment.Single, '# Get the name of the library we link against.')",
  "(64075, Token.Text.NewLine, '\\n')",
  "(64076, Token.Text.Whitespace, '\\t')",
  "(64077, Token.Text, 'linklib=')",
  "(64085, Token.Text.NewLine, '\\n')",
  "(64086, Token.Text.Whitespace, '\\t')",
  "(64087, Token.Text, 'for')",
  "(64090, Token.Text.Whitespace, ' ')",
  "(64091, Token.Text, 'l')",
  "(64092, Token.Text.Whitespace, ' ')",
  "(64093, Token.Text, 'in')",
  "(64095, Token.Text.Whitespace, ' ')",
  "(64096, Token.Text, '$old_library')",
  "(64108, Token.Text.Whitespace, ' ')",
  "(64109, Token.Text, '$library_names;')",
  "(64124, Token.Text.Whitespace, ' ')",
  "(64125, Token.Text, 'do')",
  "(64127, Token.Text.NewLine, '\\n')",
  "(64128, Token.Text.Whitespace, '\\t  ')",
  "(64131, Token.Text, 'linklib=\"$l\"')",
  "(64143, Token.Text.NewLine, '\\n')",
  "(64144, Token.Text.Whitespace, '\\t')",
  "(64145, Token.Text, 'done')",
  "(64149, Token.Text.NewLine, '\\n')",
  "(64150, Token.Text.Whitespace, '\\t')",
  "(64151, Token.Text, 'if')",
  "(64153, Token.Text.Whitespace, ' ')",
  "(64154, Token.Text, 'test')",
  "(64158, Token.Text.Whitespace, ' ')",
  "(64159, Token.Text, '-z')",
  "(64161, Token.Text.Whitespace, ' ')",
  "(64162, Token.Literal.String.Double, '\"$linklib\"')",
  "(64172, Token.Text, ';')",
  "(64173, Token.Text.Whitespace, ' ')",
  "(64174, Token.Text, 'then')",
  "(64178, Token.Text.NewLine, '\\n')",
  "(64179, Token.Text.Whitespace, '\\t  ')",
  "(64182, Token.Text, '$echo')",
  "(64187, Token.Text.Whitespace, ' ')",
  "(64188, Token.Literal.String.Double, '\"$modename: cannot find name of link library for \\\\`$lib\\'\"')",
  "(64245, Token.Text.Whitespace, ' ')",
  "(64246, Token.Text, '1>&2')",
  "(64250, Token.Text.NewLine, '\\n')",
  "(64251, Token.Text.Whitespace, '\\t  ')",
  "(64254, Token.Text, 'exit')",
  "(64258, Token.Text.Whitespace, ' ')",
  "(64259, Token.Text, '$EXIT_FAILURE')",
  "(64272, Token.Text.NewLine, '\\n')",
  "(64273, Token.Text.Whitespace, '\\t')",
  "(64274, Token.Text, 'fi')",
  "(64276, Token.Text.NewLine, '\\n\\n')",
  "(64278, Token.Text.Whitespace, '\\t')",
  "(64279, Token.Comment.Single, '# This library was specified with -dlopen.')",
  "(64321, Token.Text.NewLine, '\\n')",
  "(64322, Token.Text.Whitespace, '\\t')",
  "(64323, Token.Text, 'if')",
  "(64325, Token.Text.Whitespace, ' ')",
  "(64326, Token.Text, 'test')",
  "(64330, Token.Text.Whitespace, ' ')",
  "(64331, Token.Literal.String.Double, '\"$pass\"')",
  "(64338, Token.Text.Whitespace, ' ')",
  "(64339, Token.Text, '=')",
  "(64340, Token.Text.Whitespace, ' ')",
  "(64341, Token.Text, 'dlopen;')",
  "(64348, Token.Text.Whitespace, ' ')",
  "(64349, Token.Text, 'then')",
  "(64353, Token.Text.NewLine, '\\n')",
  "(64354, Token.Text.Whitespace, '\\t  ')",
  "(64357, Token.Text, 'if')",
  "(64359, Token.Text.Whitespace, ' ')",
  "(64360, Token.Text, 'test')",
  "(64364, Token.Text.Whitespace, ' ')",
  "(64365, Token.Text, '-z')",
  "(64367, Token.Text.Whitespace, ' ')",
  "(64368, Token.Literal.String.Double, '\"$libdir\"')",
  "(64377, Token.Text, ';')",
  "(64378, Token.Text.Whitespace, ' ')",
  "(64379, Token.Text, 'then')",
  "(64383, Token.Text.NewLine, '\\n')",
  "(64384, Token.Text.Whitespace, '\\t    ')",
  "(64389, Token.Text, '$echo')",
  "(64394, Token.Text.Whitespace, ' ')",
  "(64395, Token.Literal.String.Double, '\"$modename: cannot -dlopen a convenience library: \\\\`$lib\\'\"')",
  "(64453, Token.Text.Whitespace, ' ')",
  "(64454, Token.Text, '1>&2')",
  "(64458, Token.Text.NewLine, '\\n')",
  "(64459, Token.Text.Whitespace, '\\t    ')",
  "(64464, Token.Text, 'exit')",
  "(64468, Token.Text.Whitespace, ' ')",
  "(64469, Token.Text, '$EXIT_FAILURE')",
  "(64482, Token.Text.NewLine, '\\n')",
  "(64483, Token.Text.Whitespace, '\\t  ')",
  "(64486, Token.Text, 'fi')",
  "(64488, Token.Text.NewLine, '\\n')",
  "(64489, Token.Text.Whitespace, '\\t  ')",
  "(64492, Token.Text, 'if')",
  "(64494, Token.Text.Whitespace, ' ')",
  "(64495, Token.Text, 'test')",
  "(64499, Token.Text.Whitespace, ' ')",
  "(64500, Token.Text, '-z')",
  "(64502, Token.Text.Whitespace, ' ')",
  "(64503, Token.Literal.String.Double, '\"$dlname\"')",
  "(64512, Token.Text.Whitespace, ' ')",
  "(64513, Token.Text, '||')",
  "(64515, Token.Text.NewLine, '\\n')",
  "(64516, Token.Text.Whitespace, '\\t     ')",
  "(64522, Token.Text, 'test')",
  "(64526, Token.Text.Whitespace, ' ')",
  "(64527, Token.Literal.String.Double, '\"$dlopen_support\"')",
  "(64544, Token.Text.Whitespace, ' ')",
  "(64545, Token.Text, '!=')",
  "(64547, Token.Text.Whitespace, ' ')",
  "(64548, Token.Text, 'yes')",
  "(64551, Token.Text.Whitespace, ' ')",
  "(64552, Token.Text, '||')",
  "(64554, Token.Text.NewLine, '\\n')",
  "(64555, Token.Text.Whitespace, '\\t     ')",
  "(64561, Token.Text, 'test')",
  "(64565, Token.Text.Whitespace, ' ')",
  "(64566, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(64587, Token.Text.Whitespace, ' ')",
  "(64588, Token.Text, '=')",
  "(64589, Token.Text.Whitespace, ' ')",
  "(64590, Token.Text, 'no;')",
  "(64593, Token.Text.Whitespace, ' ')",
  "(64594, Token.Text, 'then')",
  "(64598, Token.Text.NewLine, '\\n')",
  "(64599, Token.Text.Whitespace, '\\t    ')",
  "(64604, Token.Comment.Single, \"# If there is no dlname, no dlopen support or we're linking\")",
  "(64663, Token.Text.NewLine, '\\n')",
  "(64664, Token.Text.Whitespace, '\\t    ')",
  "(64669, Token.Comment.Single, '# statically, we need to preload.  We also need to preload any')",
  "(64731, Token.Text.NewLine, '\\n')",
  "(64732, Token.Text.Whitespace, '\\t    ')",
  "(64737, Token.Comment.Single, \"# dependent libraries so libltdl's deplib preloader doesn't\")",
  "(64796, Token.Text.NewLine, '\\n')",
  "(64797, Token.Text.Whitespace, '\\t    ')",
  "(64802, Token.Comment.Single, '# bomb out in the load deplibs phase.')",
  "(64839, Token.Text.NewLine, '\\n')",
  "(64840, Token.Text.Whitespace, '\\t    ')",
  "(64845, Token.Text, 'dlprefiles=\"$dlprefiles')",
  "(64868, Token.Text.Whitespace, ' ')",
  "(64869, Token.Text, '$lib')",
  "(64873, Token.Text.Whitespace, ' ')",
  "(64874, Token.Text, '$dependency_libs\"')",
  "(64891, Token.Text.NewLine, '\\n')",
  "(64892, Token.Text.Whitespace, '\\t  ')",
  "(64895, Token.Text, 'else')",
  "(64899, Token.Text.NewLine, '\\n')",
  "(64900, Token.Text.Whitespace, '\\t    ')",
  "(64905, Token.Text, 'newdlfiles=\"$newdlfiles')",
  "(64928, Token.Text.Whitespace, ' ')",
  "(64929, Token.Text, '$lib\"')",
  "(64934, Token.Text.NewLine, '\\n')",
  "(64935, Token.Text.Whitespace, '\\t  ')",
  "(64938, Token.Text, 'fi')",
  "(64940, Token.Text.NewLine, '\\n')",
  "(64941, Token.Text.Whitespace, '\\t  ')",
  "(64944, Token.Text, 'continue')",
  "(64952, Token.Text.NewLine, '\\n')",
  "(64953, Token.Text.Whitespace, '\\t')",
  "(64954, Token.Text, 'fi')",
  "(64956, Token.Text.Whitespace, ' ')",
  "(64957, Token.Comment.Single, '# $pass = dlopen')",
  "(64973, Token.Text.NewLine, '\\n\\n')",
  "(64975, Token.Text.Whitespace, '\\t')",
  "(64976, Token.Comment.Single, '# We need an absolute path.')",
  "(65003, Token.Text.NewLine, '\\n')",
  "(65004, Token.Text.Whitespace, '\\t')",
  "(65005, Token.Text, 'case')",
  "(65009, Token.Text.Whitespace, ' ')",
  "(65010, Token.Text, '$ladir')",
  "(65016, Token.Text.Whitespace, ' ')",
  "(65017, Token.Text, 'in')",
  "(65019, Token.Text.NewLine, '\\n')",
  "(65020, Token.Text.Whitespace, '\\t')",
  "(65021, Token.Text, '[\\\\\\\\/]*')",
  "(65027, Token.Text.Whitespace, ' ')",
  "(65028, Token.Text, '|')",
  "(65029, Token.Text.Whitespace, ' ')",
  "(65030, Token.Text, '[A-Za-z]:[\\\\\\\\/]*)')",
  "(65046, Token.Text.Whitespace, ' ')",
  "(65047, Token.Text, 'abs_ladir=\"$ladir\"')",
  "(65065, Token.Text.Whitespace, ' ')",
  "(65066, Token.Text, ';;')",
  "(65068, Token.Text.NewLine, '\\n')",
  "(65069, Token.Text.Whitespace, '\\t')",
  "(65070, Token.Text, '*)')",
  "(65072, Token.Text.NewLine, '\\n')",
  "(65073, Token.Text.Whitespace, '\\t  ')",
  "(65076, Token.Text, 'abs_ladir=`cd')",
  "(65089, Token.Text.Whitespace, ' ')",
  "(65090, Token.Literal.String.Double, '\"$ladir\"')",
  "(65098, Token.Text.Whitespace, ' ')",
  "(65099, Token.Text, '&&')",
  "(65101, Token.Text.Whitespace, ' ')",
  "(65102, Token.Text, 'pwd`')",
  "(65106, Token.Text.NewLine, '\\n')",
  "(65107, Token.Text.Whitespace, '\\t  ')",
  "(65110, Token.Text, 'if')",
  "(65112, Token.Text.Whitespace, ' ')",
  "(65113, Token.Text, 'test')",
  "(65117, Token.Text.Whitespace, ' ')",
  "(65118, Token.Text, '-z')",
  "(65120, Token.Text.Whitespace, ' ')",
  "(65121, Token.Literal.String.Double, '\"$abs_ladir\"')",
  "(65133, Token.Text, ';')",
  "(65134, Token.Text.Whitespace, ' ')",
  "(65135, Token.Text, 'then')",
  "(65139, Token.Text.NewLine, '\\n')",
  "(65140, Token.Text.Whitespace, '\\t    ')",
  "(65145, Token.Text, '$echo')",
  "(65150, Token.Text.Whitespace, ' ')",
  "(65151, Token.Literal.String.Double, '\"$modename: warning: cannot determine absolute directory name of \\\\`$ladir\\'\"')",
  "(65226, Token.Text.Whitespace, ' ')",
  "(65227, Token.Text, '1>&2')",
  "(65231, Token.Text.NewLine, '\\n')",
  "(65232, Token.Text.Whitespace, '\\t    ')",
  "(65237, Token.Text, '$echo')",
  "(65242, Token.Text.Whitespace, ' ')",
  "(65243, Token.Literal.String.Double, '\"$modename: passing it literally to the linker, although it might fail\"')",
  "(65314, Token.Text.Whitespace, ' ')",
  "(65315, Token.Text, '1>&2')",
  "(65319, Token.Text.NewLine, '\\n')",
  "(65320, Token.Text.Whitespace, '\\t    ')",
  "(65325, Token.Text, 'abs_ladir=\"$ladir\"')",
  "(65343, Token.Text.NewLine, '\\n')",
  "(65344, Token.Text.Whitespace, '\\t  ')",
  "(65347, Token.Text, 'fi')",
  "(65349, Token.Text.NewLine, '\\n')",
  "(65350, Token.Text.Whitespace, '\\t  ')",
  "(65353, Token.Text, ';;')",
  "(65355, Token.Text.NewLine, '\\n')",
  "(65356, Token.Text.Whitespace, '\\t')",
  "(65357, Token.Text, 'esac')",
  "(65361, Token.Text.NewLine, '\\n')",
  "(65362, Token.Text.Whitespace, '\\t')",
  "(65363, Token.Text, 'laname=`$echo')",
  "(65376, Token.Text.Whitespace, ' ')",
  "(65377, Token.Literal.String.Double, '\"X$lib\"')",
  "(65384, Token.Text.Whitespace, ' ')",
  "(65385, Token.Text, '|')",
  "(65386, Token.Text.Whitespace, ' ')",
  "(65387, Token.Text, '$Xsed')",
  "(65392, Token.Text.Whitespace, ' ')",
  "(65393, Token.Text, '-e')",
  "(65395, Token.Text.Whitespace, ' ')",
  "(65396, Token.Literal.String.Single, \"'s%^.*/%%'\")",
  "(65406, Token.Text, '`')",
  "(65407, Token.Text.NewLine, '\\n\\n')",
  "(65409, Token.Text.Whitespace, '\\t')",
  "(65410, Token.Comment.Single, '# Find the relevant object directory and library name.')",
  "(65464, Token.Text.NewLine, '\\n')",
  "(65465, Token.Text.Whitespace, '\\t')",
  "(65466, Token.Text, 'if')",
  "(65468, Token.Text.Whitespace, ' ')",
  "(65469, Token.Text, 'test')",
  "(65473, Token.Text.Whitespace, ' ')",
  "(65474, Token.Literal.String.Double, '\"X$installed\"')",
  "(65487, Token.Text.Whitespace, ' ')",
  "(65488, Token.Text, '=')",
  "(65489, Token.Text.Whitespace, ' ')",
  "(65490, Token.Text, 'Xyes;')",
  "(65495, Token.Text.Whitespace, ' ')",
  "(65496, Token.Text, 'then')",
  "(65500, Token.Text.NewLine, '\\n')",
  "(65501, Token.Text.Whitespace, '\\t  ')",
  "(65504, Token.Text, 'if')",
  "(65506, Token.Text.Whitespace, ' ')",
  "(65507, Token.Text, 'test')",
  "(65511, Token.Text.Whitespace, ' ')",
  "(65512, Token.Text, '!')",
  "(65513, Token.Text.Whitespace, ' ')",
  "(65514, Token.Text, '-f')",
  "(65516, Token.Text.Whitespace, ' ')",
  "(65517, Token.Literal.String.Double, '\"$libdir/$linklib\"')",
  "(65535, Token.Text.Whitespace, ' ')",
  "(65536, Token.Text, '&&')",
  "(65538, Token.Text.Whitespace, ' ')",
  "(65539, Token.Text, 'test')",
  "(65543, Token.Text.Whitespace, ' ')",
  "(65544, Token.Text, '-f')",
  "(65546, Token.Text.Whitespace, ' ')",
  "(65547, Token.Literal.String.Double, '\"$abs_ladir/$linklib\"')",
  "(65568, Token.Text, ';')",
  "(65569, Token.Text.Whitespace, ' ')",
  "(65570, Token.Text, 'then')",
  "(65574, Token.Text.NewLine, '\\n')",
  "(65575, Token.Text.Whitespace, '\\t    ')",
  "(65580, Token.Text, '$echo')",
  "(65585, Token.Text.Whitespace, ' ')",
  "(65586, Token.Literal.String.Double, '\"$modename: warning: library \\\\`$lib\\' was moved.\"')",
  "(65634, Token.Text.Whitespace, ' ')",
  "(65635, Token.Text, '1>&2')",
  "(65639, Token.Text.NewLine, '\\n')",
  "(65640, Token.Text.Whitespace, '\\t    ')",
  "(65645, Token.Text, 'dir=\"$ladir\"')",
  "(65657, Token.Text.NewLine, '\\n')",
  "(65658, Token.Text.Whitespace, '\\t    ')",
  "(65663, Token.Text, 'absdir=\"$abs_ladir\"')",
  "(65682, Token.Text.NewLine, '\\n')",
  "(65683, Token.Text.Whitespace, '\\t    ')",
  "(65688, Token.Text, 'libdir=\"$abs_ladir\"')",
  "(65707, Token.Text.NewLine, '\\n')",
  "(65708, Token.Text.Whitespace, '\\t  ')",
  "(65711, Token.Text, 'else')",
  "(65715, Token.Text.NewLine, '\\n')",
  "(65716, Token.Text.Whitespace, '\\t    ')",
  "(65721, Token.Text, 'dir=\"$libdir\"')",
  "(65734, Token.Text.NewLine, '\\n')",
  "(65735, Token.Text.Whitespace, '\\t    ')",
  "(65740, Token.Text, 'absdir=\"$libdir\"')",
  "(65756, Token.Text.NewLine, '\\n')",
  "(65757, Token.Text.Whitespace, '\\t  ')",
  "(65760, Token.Text, 'fi')",
  "(65762, Token.Text.NewLine, '\\n')",
  "(65763, Token.Text.Whitespace, '\\t  ')",
  "(65766, Token.Text, 'test')",
  "(65770, Token.Text.Whitespace, ' ')",
  "(65771, Token.Literal.String.Double, '\"X$hardcode_automatic\"')",
  "(65793, Token.Text.Whitespace, ' ')",
  "(65794, Token.Text, '=')",
  "(65795, Token.Text.Whitespace, ' ')",
  "(65796, Token.Text, 'Xyes')",
  "(65800, Token.Text.Whitespace, ' ')",
  "(65801, Token.Text, '&&')",
  "(65803, Token.Text.Whitespace, ' ')",
  "(65804, Token.Text, 'avoidtemprpath=yes')",
  "(65822, Token.Text.NewLine, '\\n')",
  "(65823, Token.Text.Whitespace, '\\t')",
  "(65824, Token.Text, 'else')",
  "(65828, Token.Text.NewLine, '\\n')",
  "(65829, Token.Text.Whitespace, '\\t  ')",
  "(65832, Token.Text, 'if')",
  "(65834, Token.Text.Whitespace, ' ')",
  "(65835, Token.Text, 'test')",
  "(65839, Token.Text.Whitespace, ' ')",
  "(65840, Token.Text, '!')",
  "(65841, Token.Text.Whitespace, ' ')",
  "(65842, Token.Text, '-f')",
  "(65844, Token.Text.Whitespace, ' ')",
  "(65845, Token.Literal.String.Double, '\"$ladir/$objdir/$linklib\"')",
  "(65870, Token.Text.Whitespace, ' ')",
  "(65871, Token.Text, '&&')",
  "(65873, Token.Text.Whitespace, ' ')",
  "(65874, Token.Text, 'test')",
  "(65878, Token.Text.Whitespace, ' ')",
  "(65879, Token.Text, '-f')",
  "(65881, Token.Text.Whitespace, ' ')",
  "(65882, Token.Literal.String.Double, '\"$abs_ladir/$linklib\"')",
  "(65903, Token.Text, ';')",
  "(65904, Token.Text.Whitespace, ' ')",
  "(65905, Token.Text, 'then')",
  "(65909, Token.Text.NewLine, '\\n')",
  "(65910, Token.Text.Whitespace, '\\t    ')",
  "(65915, Token.Text, 'dir=\"$ladir\"')",
  "(65927, Token.Text.NewLine, '\\n')",
  "(65928, Token.Text.Whitespace, '\\t    ')",
  "(65933, Token.Text, 'absdir=\"$abs_ladir\"')",
  "(65952, Token.Text.NewLine, '\\n')",
  "(65953, Token.Text.Whitespace, '\\t    ')",
  "(65958, Token.Comment.Single, '# Remove this search path later')",
  "(65989, Token.Text.NewLine, '\\n')",
  "(65990, Token.Text.Whitespace, '\\t    ')",
  "(65995, Token.Text, 'notinst_path=\"$notinst_path')",
  "(66022, Token.Text.Whitespace, ' ')",
  "(66023, Token.Text, '$abs_ladir\"')",
  "(66034, Token.Text.NewLine, '\\n')",
  "(66035, Token.Text.Whitespace, '\\t  ')",
  "(66038, Token.Text, 'else')",
  "(66042, Token.Text.NewLine, '\\n')",
  "(66043, Token.Text.Whitespace, '\\t    ')",
  "(66048, Token.Text, 'dir=\"$ladir/$objdir\"')",
  "(66068, Token.Text.NewLine, '\\n')",
  "(66069, Token.Text.Whitespace, '\\t    ')",
  "(66074, Token.Text, 'absdir=\"$abs_ladir/$objdir\"')",
  "(66101, Token.Text.NewLine, '\\n')",
  "(66102, Token.Text.Whitespace, '\\t    ')",
  "(66107, Token.Comment.Single, '# Remove this search path later')",
  "(66138, Token.Text.NewLine, '\\n')",
  "(66139, Token.Text.Whitespace, '\\t    ')",
  "(66144, Token.Text, 'notinst_path=\"$notinst_path')",
  "(66171, Token.Text.Whitespace, ' ')",
  "(66172, Token.Text, '$abs_ladir\"')",
  "(66183, Token.Text.NewLine, '\\n')",
  "(66184, Token.Text.Whitespace, '\\t  ')",
  "(66187, Token.Text, 'fi')",
  "(66189, Token.Text.NewLine, '\\n')",
  "(66190, Token.Text.Whitespace, '\\t')",
  "(66191, Token.Text, 'fi')",
  "(66193, Token.Text.Whitespace, ' ')",
  "(66194, Token.Comment.Single, '# $installed = yes')",
  "(66212, Token.Text.NewLine, '\\n')",
  "(66213, Token.Text.Whitespace, '\\t')",
  "(66214, Token.Text, 'name=`$echo')",
  "(66225, Token.Text.Whitespace, ' ')",
  "(66226, Token.Literal.String.Double, '\"X$laname\"')",
  "(66236, Token.Text.Whitespace, ' ')",
  "(66237, Token.Text, '|')",
  "(66238, Token.Text.Whitespace, ' ')",
  "(66239, Token.Text, '$Xsed')",
  "(66244, Token.Text.Whitespace, ' ')",
  "(66245, Token.Text, '-e')",
  "(66247, Token.Text.Whitespace, ' ')",
  "(66248, Token.Literal.String.Single, \"'s/\\\\.la$//'\")",
  "(66259, Token.Text.Whitespace, ' ')",
  "(66260, Token.Text, '-e')",
  "(66262, Token.Text.Whitespace, ' ')",
  "(66263, Token.Literal.String.Single, \"'s/^lib//'\")",
  "(66273, Token.Text, '`')",
  "(66274, Token.Text.NewLine, '\\n\\n')",
  "(66276, Token.Text.Whitespace, '\\t')",
  "(66277, Token.Comment.Single, '# This library was specified with -dlpreopen.')",
  "(66322, Token.Text.NewLine, '\\n')",
  "(66323, Token.Text.Whitespace, '\\t')",
  "(66324, Token.Text, 'if')",
  "(66326, Token.Text.Whitespace, ' ')",
  "(66327, Token.Text, 'test')",
  "(66331, Token.Text.Whitespace, ' ')",
  "(66332, Token.Literal.String.Double, '\"$pass\"')",
  "(66339, Token.Text.Whitespace, ' ')",
  "(66340, Token.Text, '=')",
  "(66341, Token.Text.Whitespace, ' ')",
  "(66342, Token.Text, 'dlpreopen;')",
  "(66352, Token.Text.Whitespace, ' ')",
  "(66353, Token.Text, 'then')",
  "(66357, Token.Text.NewLine, '\\n')",
  "(66358, Token.Text.Whitespace, '\\t  ')",
  "(66361, Token.Text, 'if')",
  "(66363, Token.Text.Whitespace, ' ')",
  "(66364, Token.Text, 'test')",
  "(66368, Token.Text.Whitespace, ' ')",
  "(66369, Token.Text, '-z')",
  "(66371, Token.Text.Whitespace, ' ')",
  "(66372, Token.Literal.String.Double, '\"$libdir\"')",
  "(66381, Token.Text, ';')",
  "(66382, Token.Text.Whitespace, ' ')",
  "(66383, Token.Text, 'then')",
  "(66387, Token.Text.NewLine, '\\n')",
  "(66388, Token.Text.Whitespace, '\\t    ')",
  "(66393, Token.Text, '$echo')",
  "(66398, Token.Text.Whitespace, ' ')",
  "(66399, Token.Literal.String.Double, '\"$modename: cannot -dlpreopen a convenience library: \\\\`$lib\\'\"')",
  "(66460, Token.Text.Whitespace, ' ')",
  "(66461, Token.Text, '1>&2')",
  "(66465, Token.Text.NewLine, '\\n')",
  "(66466, Token.Text.Whitespace, '\\t    ')",
  "(66471, Token.Text, 'exit')",
  "(66475, Token.Text.Whitespace, ' ')",
  "(66476, Token.Text, '$EXIT_FAILURE')",
  "(66489, Token.Text.NewLine, '\\n')",
  "(66490, Token.Text.Whitespace, '\\t  ')",
  "(66493, Token.Text, 'fi')",
  "(66495, Token.Text.NewLine, '\\n')",
  "(66496, Token.Text.Whitespace, '\\t  ')",
  "(66499, Token.Comment.Single, '# Prefer using a static library (so that no silly _DYNAMIC symbols')",
  "(66565, Token.Text.NewLine, '\\n')",
  "(66566, Token.Text.Whitespace, '\\t  ')",
  "(66569, Token.Comment.Single, '# are required to link).')",
  "(66593, Token.Text.NewLine, '\\n')",
  "(66594, Token.Text.Whitespace, '\\t  ')",
  "(66597, Token.Text, 'if')",
  "(66599, Token.Text.Whitespace, ' ')",
  "(66600, Token.Text, 'test')",
  "(66604, Token.Text.Whitespace, ' ')",
  "(66605, Token.Text, '-n')",
  "(66607, Token.Text.Whitespace, ' ')",
  "(66608, Token.Literal.String.Double, '\"$old_library\"')",
  "(66622, Token.Text, ';')",
  "(66623, Token.Text.Whitespace, ' ')",
  "(66624, Token.Text, 'then')",
  "(66628, Token.Text.NewLine, '\\n')",
  "(66629, Token.Text.Whitespace, '\\t    ')",
  "(66634, Token.Text, 'newdlprefiles=\"$newdlprefiles')",
  "(66663, Token.Text.Whitespace, ' ')",
  "(66664, Token.Text, '$dir/$old_library\"')",
  "(66682, Token.Text.NewLine, '\\n')",
  "(66683, Token.Text.Whitespace, '\\t  ')",
  "(66686, Token.Comment.Single, '# Otherwise, use the dlname, so that lt_dlopen finds it.')",
  "(66742, Token.Text.NewLine, '\\n')",
  "(66743, Token.Text.Whitespace, '\\t  ')",
  "(66746, Token.Text, 'elif')",
  "(66750, Token.Text.Whitespace, ' ')",
  "(66751, Token.Text, 'test')",
  "(66755, Token.Text.Whitespace, ' ')",
  "(66756, Token.Text, '-n')",
  "(66758, Token.Text.Whitespace, ' ')",
  "(66759, Token.Literal.String.Double, '\"$dlname\"')",
  "(66768, Token.Text, ';')",
  "(66769, Token.Text.Whitespace, ' ')",
  "(66770, Token.Text, 'then')",
  "(66774, Token.Text.NewLine, '\\n')",
  "(66775, Token.Text.Whitespace, '\\t    ')",
  "(66780, Token.Text, 'newdlprefiles=\"$newdlprefiles')",
  "(66809, Token.Text.Whitespace, ' ')",
  "(66810, Token.Text, '$dir/$dlname\"')",
  "(66823, Token.Text.NewLine, '\\n')",
  "(66824, Token.Text.Whitespace, '\\t  ')",
  "(66827, Token.Text, 'else')",
  "(66831, Token.Text.NewLine, '\\n')",
  "(66832, Token.Text.Whitespace, '\\t    ')",
  "(66837, Token.Text, 'newdlprefiles=\"$newdlprefiles')",
  "(66866, Token.Text.Whitespace, ' ')",
  "(66867, Token.Text, '$dir/$linklib\"')",
  "(66881, Token.Text.NewLine, '\\n')",
  "(66882, Token.Text.Whitespace, '\\t  ')",
  "(66885, Token.Text, 'fi')",
  "(66887, Token.Text.NewLine, '\\n')",
  "(66888, Token.Text.Whitespace, '\\t')",
  "(66889, Token.Text, 'fi')",
  "(66891, Token.Text.Whitespace, ' ')",
  "(66892, Token.Comment.Single, '# $pass = dlpreopen')",
  "(66911, Token.Text.NewLine, '\\n\\n')",
  "(66913, Token.Text.Whitespace, '\\t')",
  "(66914, Token.Text, 'if')",
  "(66916, Token.Text.Whitespace, ' ')",
  "(66917, Token.Text, 'test')",
  "(66921, Token.Text.Whitespace, ' ')",
  "(66922, Token.Text, '-z')",
  "(66924, Token.Text.Whitespace, ' ')",
  "(66925, Token.Literal.String.Double, '\"$libdir\"')",
  "(66934, Token.Text, ';')",
  "(66935, Token.Text.Whitespace, ' ')",
  "(66936, Token.Text, 'then')",
  "(66940, Token.Text.NewLine, '\\n')",
  "(66941, Token.Text.Whitespace, '\\t  ')",
  "(66944, Token.Comment.Single, '# Link the convenience library')",
  "(66974, Token.Text.NewLine, '\\n')",
  "(66975, Token.Text.Whitespace, '\\t  ')",
  "(66978, Token.Text, 'if')",
  "(66980, Token.Text.Whitespace, ' ')",
  "(66981, Token.Text, 'test')",
  "(66985, Token.Text.Whitespace, ' ')",
  "(66986, Token.Literal.String.Double, '\"$linkmode\"')",
  "(66997, Token.Text.Whitespace, ' ')",
  "(66998, Token.Text, '=')",
  "(66999, Token.Text.Whitespace, ' ')",
  "(67000, Token.Text, 'lib;')",
  "(67004, Token.Text.Whitespace, ' ')",
  "(67005, Token.Text, 'then')",
  "(67009, Token.Text.NewLine, '\\n')",
  "(67010, Token.Text.Whitespace, '\\t    ')",
  "(67015, Token.Text, 'deplibs=\"$dir/$old_library')",
  "(67041, Token.Text.Whitespace, ' ')",
  "(67042, Token.Text, '$deplibs\"')",
  "(67051, Token.Text.NewLine, '\\n')",
  "(67052, Token.Text.Whitespace, '\\t  ')",
  "(67055, Token.Text, 'elif')",
  "(67059, Token.Text.Whitespace, ' ')",
  "(67060, Token.Text, 'test')",
  "(67064, Token.Text.Whitespace, ' ')",
  "(67065, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(67082, Token.Text.Whitespace, ' ')",
  "(67083, Token.Text, '=')",
  "(67084, Token.Text.Whitespace, ' ')",
  "(67085, Token.Literal.String.Double, '\"prog,link\"')",
  "(67096, Token.Text, ';')",
  "(67097, Token.Text.Whitespace, ' ')",
  "(67098, Token.Text, 'then')",
  "(67102, Token.Text.NewLine, '\\n')",
  "(67103, Token.Text.Whitespace, '\\t    ')",
  "(67108, Token.Text, 'compile_deplibs=\"$dir/$old_library')",
  "(67142, Token.Text.Whitespace, ' ')",
  "(67143, Token.Text, '$compile_deplibs\"')",
  "(67160, Token.Text.NewLine, '\\n')",
  "(67161, Token.Text.Whitespace, '\\t    ')",
  "(67166, Token.Text, 'finalize_deplibs=\"$dir/$old_library')",
  "(67201, Token.Text.Whitespace, ' ')",
  "(67202, Token.Text, '$finalize_deplibs\"')",
  "(67220, Token.Text.NewLine, '\\n')",
  "(67221, Token.Text.Whitespace, '\\t  ')",
  "(67224, Token.Text, 'else')",
  "(67228, Token.Text.NewLine, '\\n')",
  "(67229, Token.Text.Whitespace, '\\t    ')",
  "(67234, Token.Text, 'deplibs=\"$lib')",
  "(67247, Token.Text.Whitespace, ' ')",
  "(67248, Token.Text, '$deplibs\"')",
  "(67257, Token.Text.Whitespace, ' ')",
  "(67258, Token.Comment.Single, '# used for prog,scan pass')",
  "(67283, Token.Text.NewLine, '\\n')",
  "(67284, Token.Text.Whitespace, '\\t  ')",
  "(67287, Token.Text, 'fi')",
  "(67289, Token.Text.NewLine, '\\n')",
  "(67290, Token.Text.Whitespace, '\\t  ')",
  "(67293, Token.Text, 'continue')",
  "(67301, Token.Text.NewLine, '\\n')",
  "(67302, Token.Text.Whitespace, '\\t')",
  "(67303, Token.Text, 'fi')",
  "(67305, Token.Text.NewLine, '\\n\\n\\n')",
  "(67308, Token.Text.Whitespace, '\\t')",
  "(67309, Token.Text, 'if')",
  "(67311, Token.Text.Whitespace, ' ')",
  "(67312, Token.Text, 'test')",
  "(67316, Token.Text.Whitespace, ' ')",
  "(67317, Token.Literal.String.Double, '\"$linkmode\"')",
  "(67328, Token.Text.Whitespace, ' ')",
  "(67329, Token.Text, '=')",
  "(67330, Token.Text.Whitespace, ' ')",
  "(67331, Token.Text, 'prog')",
  "(67335, Token.Text.Whitespace, ' ')",
  "(67336, Token.Text, '&&')",
  "(67338, Token.Text.Whitespace, ' ')",
  "(67339, Token.Text, 'test')",
  "(67343, Token.Text.Whitespace, ' ')",
  "(67344, Token.Literal.String.Double, '\"$pass\"')",
  "(67351, Token.Text.Whitespace, ' ')",
  "(67352, Token.Text, '!=')",
  "(67354, Token.Text.Whitespace, ' ')",
  "(67355, Token.Text, 'link;')",
  "(67360, Token.Text.Whitespace, ' ')",
  "(67361, Token.Text, 'then')",
  "(67365, Token.Text.NewLine, '\\n')",
  "(67366, Token.Text.Whitespace, '\\t  ')",
  "(67369, Token.Text, 'newlib_search_path=\"$newlib_search_path')",
  "(67408, Token.Text.Whitespace, ' ')",
  "(67409, Token.Text, '$ladir\"')",
  "(67416, Token.Text.NewLine, '\\n')",
  "(67417, Token.Text.Whitespace, '\\t  ')",
  "(67420, Token.Text, 'deplibs=\"$lib')",
  "(67433, Token.Text.Whitespace, ' ')",
  "(67434, Token.Text, '$deplibs\"')",
  "(67443, Token.Text.NewLine, '\\n\\n')",
  "(67445, Token.Text.Whitespace, '\\t  ')",
  "(67448, Token.Text, 'linkalldeplibs=no')",
  "(67465, Token.Text.NewLine, '\\n')",
  "(67466, Token.Text.Whitespace, '\\t  ')",
  "(67469, Token.Text, 'if')",
  "(67471, Token.Text.Whitespace, ' ')",
  "(67472, Token.Text, 'test')",
  "(67476, Token.Text.Whitespace, ' ')",
  "(67477, Token.Literal.String.Double, '\"$link_all_deplibs\"')",
  "(67496, Token.Text.Whitespace, ' ')",
  "(67497, Token.Text, '!=')",
  "(67499, Token.Text.Whitespace, ' ')",
  "(67500, Token.Text, 'no')",
  "(67502, Token.Text.Whitespace, ' ')",
  "(67503, Token.Text, '||')",
  "(67505, Token.Text.Whitespace, ' ')",
  "(67506, Token.Text, 'test')",
  "(67510, Token.Text.Whitespace, ' ')",
  "(67511, Token.Text, '-z')",
  "(67513, Token.Text.Whitespace, ' ')",
  "(67514, Token.Literal.String.Double, '\"$library_names\"')",
  "(67530, Token.Text.Whitespace, ' ')",
  "(67531, Token.Text, '||')",
  "(67533, Token.Text.NewLine, '\\n')",
  "(67534, Token.Text.Whitespace, '\\t     ')",
  "(67540, Token.Text, 'test')",
  "(67544, Token.Text.Whitespace, ' ')",
  "(67545, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(67566, Token.Text.Whitespace, ' ')",
  "(67567, Token.Text, '=')",
  "(67568, Token.Text.Whitespace, ' ')",
  "(67569, Token.Text, 'no;')",
  "(67572, Token.Text.Whitespace, ' ')",
  "(67573, Token.Text, 'then')",
  "(67577, Token.Text.NewLine, '\\n')",
  "(67578, Token.Text.Whitespace, '\\t    ')",
  "(67583, Token.Text, 'linkalldeplibs=yes')",
  "(67601, Token.Text.NewLine, '\\n')",
  "(67602, Token.Text.Whitespace, '\\t  ')",
  "(67605, Token.Text, 'fi')",
  "(67607, Token.Text.NewLine, '\\n\\n')",
  "(67609, Token.Text.Whitespace, '\\t  ')",
  "(67612, Token.Text, 'tmp_libs=')",
  "(67621, Token.Text.NewLine, '\\n')",
  "(67622, Token.Text.Whitespace, '\\t  ')",
  "(67625, Token.Text, 'for')",
  "(67628, Token.Text.Whitespace, ' ')",
  "(67629, Token.Text, 'deplib')",
  "(67635, Token.Text.Whitespace, ' ')",
  "(67636, Token.Text, 'in')",
  "(67638, Token.Text.Whitespace, ' ')",
  "(67639, Token.Text, '$dependency_libs;')",
  "(67656, Token.Text.Whitespace, ' ')",
  "(67657, Token.Text, 'do')",
  "(67659, Token.Text.NewLine, '\\n')",
  "(67660, Token.Text.Whitespace, '\\t    ')",
  "(67665, Token.Text, 'case')",
  "(67669, Token.Text.Whitespace, ' ')",
  "(67670, Token.Text, '$deplib')",
  "(67677, Token.Text.Whitespace, ' ')",
  "(67678, Token.Text, 'in')",
  "(67680, Token.Text.NewLine, '\\n')",
  "(67681, Token.Text.Whitespace, '\\t    ')",
  "(67686, Token.Text, '-L*)')",
  "(67690, Token.Text.Whitespace, ' ')",
  "(67691, Token.Text, 'newlib_search_path=\"$newlib_search_path')",
  "(67730, Token.Text.Whitespace, ' ')",
  "(67731, Token.Literal.String.Double, '\"`$echo \"')",
  "(67740, Token.Text, 'X$deplib\"')",
  "(67749, Token.Text.Whitespace, ' ')",
  "(67750, Token.Text, '|')",
  "(67751, Token.Text.Whitespace, ' ')",
  "(67752, Token.Text, '$Xsed')",
  "(67757, Token.Text.Whitespace, ' ')",
  "(67758, Token.Text, '-e')",
  "(67760, Token.Text.Whitespace, ' ')",
  "(67761, Token.Literal.String.Single, \"'s/^-L//'\")",
  "(67770, Token.Text, '`;;')",
  "(67773, Token.Text.Whitespace, ' ')",
  "(67774, Token.Comment.Single, '### testsuite: skip nested quoting test')",
  "(67813, Token.Text.NewLine, '\\n')",
  "(67814, Token.Text.Whitespace, '\\t    ')",
  "(67819, Token.Text, 'esac')",
  "(67823, Token.Text.NewLine, '\\n')",
  "(67824, Token.Text.Whitespace, '\\t    ')",
  "(67829, Token.Comment.Single, '# Need to link against all dependency_libs?')",
  "(67872, Token.Text.NewLine, '\\n')",
  "(67873, Token.Text.Whitespace, '\\t    ')",
  "(67878, Token.Text, 'if')",
  "(67880, Token.Text.Whitespace, ' ')",
  "(67881, Token.Text, 'test')",
  "(67885, Token.Text.Whitespace, ' ')",
  "(67886, Token.Literal.String.Double, '\"$linkalldeplibs\"')",
  "(67903, Token.Text.Whitespace, ' ')",
  "(67904, Token.Text, '=')",
  "(67905, Token.Text.Whitespace, ' ')",
  "(67906, Token.Text, 'yes;')",
  "(67910, Token.Text.Whitespace, ' ')",
  "(67911, Token.Text, 'then')",
  "(67915, Token.Text.NewLine, '\\n')",
  "(67916, Token.Text.Whitespace, '\\t      ')",
  "(67923, Token.Text, 'deplibs=\"$deplib')",
  "(67939, Token.Text.Whitespace, ' ')",
  "(67940, Token.Text, '$deplibs\"')",
  "(67949, Token.Text.NewLine, '\\n')",
  "(67950, Token.Text.Whitespace, '\\t    ')",
  "(67955, Token.Text, 'else')",
  "(67959, Token.Text.NewLine, '\\n')",
  "(67960, Token.Text.Whitespace, '\\t      ')",
  "(67967, Token.Comment.Single, '# Need to hardcode shared library paths')",
  "(68006, Token.Text.NewLine, '\\n')",
  "(68007, Token.Text.Whitespace, '\\t      ')",
  "(68014, Token.Comment.Single, '# or/and link against static libraries')",
  "(68052, Token.Text.NewLine, '\\n')",
  "(68053, Token.Text.Whitespace, '\\t      ')",
  "(68060, Token.Text, 'newdependency_libs=\"$deplib')",
  "(68087, Token.Text.Whitespace, ' ')",
  "(68088, Token.Text, '$newdependency_libs\"')",
  "(68108, Token.Text.NewLine, '\\n')",
  "(68109, Token.Text.Whitespace, '\\t    ')",
  "(68114, Token.Text, 'fi')",
  "(68116, Token.Text.NewLine, '\\n')",
  "(68117, Token.Text.Whitespace, '\\t    ')",
  "(68122, Token.Text, 'if')",
  "(68124, Token.Text.Whitespace, ' ')",
  "(68125, Token.Text, 'test')",
  "(68129, Token.Text.Whitespace, ' ')",
  "(68130, Token.Literal.String.Double, '\"X$duplicate_deps\"')",
  "(68148, Token.Text.Whitespace, ' ')",
  "(68149, Token.Text, '=')",
  "(68150, Token.Text.Whitespace, ' ')",
  "(68151, Token.Literal.String.Double, '\"Xyes\"')",
  "(68157, Token.Text.Whitespace, ' ')",
  "(68158, Token.Text, ';')",
  "(68159, Token.Text.Whitespace, ' ')",
  "(68160, Token.Text, 'then')",
  "(68164, Token.Text.NewLine, '\\n')",
  "(68165, Token.Text.Whitespace, '\\t      ')",
  "(68172, Token.Text, 'case')",
  "(68176, Token.Text.Whitespace, ' ')",
  "(68177, Token.Literal.String.Double, '\"$tmp_libs \"')",
  "(68189, Token.Text.Whitespace, ' ')",
  "(68190, Token.Text, 'in')",
  "(68192, Token.Text.NewLine, '\\n')",
  "(68193, Token.Text.Whitespace, '\\t      ')",
  "(68200, Token.Text, '*\"')",
  "(68202, Token.Text.Whitespace, ' ')",
  "(68203, Token.Text, '$deplib')",
  "(68210, Token.Text.Whitespace, ' ')",
  "(68211, Token.Literal.String.Double, '\"*) specialdeplibs=\"')",
  "(68231, Token.Text, '$specialdeplibs')",
  "(68246, Token.Text.Whitespace, ' ')",
  "(68247, Token.Text, '$deplib\"')",
  "(68255, Token.Text.Whitespace, ' ')",
  "(68256, Token.Text, ';;')",
  "(68258, Token.Text.NewLine, '\\n')",
  "(68259, Token.Text.Whitespace, '\\t      ')",
  "(68266, Token.Text, 'esac')",
  "(68270, Token.Text.NewLine, '\\n')",
  "(68271, Token.Text.Whitespace, '\\t    ')",
  "(68276, Token.Text, 'fi')",
  "(68278, Token.Text.NewLine, '\\n')",
  "(68279, Token.Text.Whitespace, '\\t    ')",
  "(68284, Token.Text, 'tmp_libs=\"$tmp_libs')",
  "(68303, Token.Text.Whitespace, ' ')",
  "(68304, Token.Text, '$deplib\"')",
  "(68312, Token.Text.NewLine, '\\n')",
  "(68313, Token.Text.Whitespace, '\\t  ')",
  "(68316, Token.Text, 'done')",
  "(68320, Token.Text.Whitespace, ' ')",
  "(68321, Token.Comment.Single, '# for deplib')",
  "(68333, Token.Text.NewLine, '\\n')",
  "(68334, Token.Text.Whitespace, '\\t  ')",
  "(68337, Token.Text, 'continue')",
  "(68345, Token.Text.NewLine, '\\n')",
  "(68346, Token.Text.Whitespace, '\\t')",
  "(68347, Token.Text, 'fi')",
  "(68349, Token.Text.Whitespace, ' ')",
  "(68350, Token.Comment.Single, '# $linkmode = prog...')",
  "(68371, Token.Text.NewLine, '\\n\\n')",
  "(68373, Token.Text.Whitespace, '\\t')",
  "(68374, Token.Text, 'if')",
  "(68376, Token.Text.Whitespace, ' ')",
  "(68377, Token.Text, 'test')",
  "(68381, Token.Text.Whitespace, ' ')",
  "(68382, Token.Literal.String.Double, '\"$linkmode,$pass\"')",
  "(68399, Token.Text.Whitespace, ' ')",
  "(68400, Token.Text, '=')",
  "(68401, Token.Text.Whitespace, ' ')",
  "(68402, Token.Literal.String.Double, '\"prog,link\"')",
  "(68413, Token.Text, ';')",
  "(68414, Token.Text.Whitespace, ' ')",
  "(68415, Token.Text, 'then')",
  "(68419, Token.Text.NewLine, '\\n')",
  "(68420, Token.Text.Whitespace, '\\t  ')",
  "(68423, Token.Text, 'if')",
  "(68425, Token.Text.Whitespace, ' ')",
  "(68426, Token.Text, 'test')",
  "(68430, Token.Text.Whitespace, ' ')",
  "(68431, Token.Text, '-n')",
  "(68433, Token.Text.Whitespace, ' ')",
  "(68434, Token.Literal.String.Double, '\"$library_names\"')",
  "(68450, Token.Text.Whitespace, ' ')",
  "(68451, Token.Text, '&&')",
  "(68453, Token.Text.NewLine, '\\n')",
  "(68454, Token.Text.Whitespace, '\\t     ')",
  "(68460, Token.Text, '{')",
  "(68461, Token.Text.Whitespace, ' ')",
  "(68462, Token.Text, 'test')",
  "(68466, Token.Text.Whitespace, ' ')",
  "(68467, Token.Literal.String.Double, '\"$prefer_static_libs\"')",
  "(68488, Token.Text.Whitespace, ' ')",
  "(68489, Token.Text, '=')",
  "(68490, Token.Text.Whitespace, ' ')",
  "(68491, Token.Text, 'no')",
  "(68493, Token.Text.Whitespace, ' ')",
  "(68494, Token.Text, '||')",
  "(68496, Token.Text.Whitespace, ' ')",
  "(68497, Token.Text, 'test')",
  "(68501, Token.Text.Whitespace, ' ')",
  "(68502, Token.Text, '-z')",
  "(68504, Token.Text.Whitespace, ' ')",
  "(68505, Token.Literal.String.Double, '\"$old_library\"')",
  "(68519, Token.Text, ';')",
  "(68520, Token.Text.Whitespace, ' ')",
  "(68521, Token.Text, '};')",
  "(68523, Token.Text.Whitespace, ' ')",
  "(68524, Token.Text, 'then')",
  "(68528, Token.Text.NewLine, '\\n')",
  "(68529, Token.Text.Whitespace, '\\t    ')",
  "(68534, Token.Comment.Single, '# We need to hardcode the library path')",
  "(68572, Token.Text.NewLine, '\\n')",
  "(68573, Token.Text.Whitespace, '\\t    ')",
  "(68578, Token.Text, 'if')",
  "(68580, Token.Text.Whitespace, ' ')",
  "(68581, Token.Text, 'test')",
  "(68585, Token.Text.Whitespace, ' ')",
  "(68586, Token.Text, '-n')",
  "(68588, Token.Text.Whitespace, ' ')",
  "(68589, Token.Literal.String.Double, '\"$shlibpath_var\"')",
  "(68605, Token.Text.Whitespace, ' ')",
  "(68606, Token.Text, '&&')",
  "(68608, Token.Text.Whitespace, ' ')",
  "(68609, Token.Text, 'test')",
  "(68613, Token.Text.Whitespace, ' ')",
  "(68614, Token.Text, '-z')",
  "(68616, Token.Text.Whitespace, ' ')",
  "(68617, Token.Literal.String.Double, '\"$avoidtemprpath\"')",
  "(68634, Token.Text.Whitespace, ' ')",
  "(68635, Token.Text, ';')",
  "(68636, Token.Text.Whitespace, ' ')",
  "(68637, Token.Text, 'then')",
  "(68641, Token.Text.NewLine, '\\n')",
  "(68642, Token.Text.Whitespace, '\\t      ')",
  "(68649, Token.Comment.Single, '# Make sure the rpath contains only unique directories.')",
  "(68704, Token.Text.NewLine, '\\n')",
  "(68705, Token.Text.Whitespace, '\\t      ')",
  "(68712, Token.Text, 'case')",
  "(68716, Token.Text.Whitespace, ' ')",
  "(68717, Token.Literal.String.Double, '\"$temp_rpath \"')",
  "(68731, Token.Text.Whitespace, ' ')",
  "(68732, Token.Text, 'in')",
  "(68734, Token.Text.NewLine, '\\n')",
  "(68735, Token.Text.Whitespace, '\\t      ')",
  "(68742, Token.Text, '*\"')",
  "(68744, Token.Text.Whitespace, ' ')",
  "(68745, Token.Text, '$dir')",
  "(68749, Token.Text.Whitespace, ' ')",
  "(68750, Token.Literal.String.Double, '\"*) ;;\\n\\t      *\"')",
  "(68766, Token.Text.Whitespace, ' ')",
  "(68767, Token.Text, '$absdir')",
  "(68774, Token.Text.Whitespace, ' ')",
  "(68775, Token.Literal.String.Double, '\"*) ;;\\n\\t      *) temp_rpath=\"')",
  "(68804, Token.Text, '$temp_rpath')",
  "(68815, Token.Text.Whitespace, ' ')",
  "(68816, Token.Text, '$absdir\"')",
  "(68824, Token.Text.Whitespace, ' ')",
  "(68825, Token.Text, ';;')",
  "(68827, Token.Text.NewLine, '\\n')",
  "(68828, Token.Text.Whitespace, '\\t      ')",
  "(68835, Token.Text, 'esac')",
  "(68839, Token.Text.NewLine, '\\n')",
  "(68840, Token.Text.Whitespace, '\\t    ')",
  "(68845, Token.Text, 'fi')",
  "(68847, Token.Text.NewLine, '\\n\\n')",
  "(68849, Token.Text.Whitespace, '\\t    ')",
  "(68854, Token.Comment.Single, '# Hardcode the library path.')",
  "(68882, Token.Text.NewLine, '\\n')",
  "(68883, Token.Text.Whitespace, '\\t    ')",
  "(68888, Token.Comment.Single, '# Skip directories that are in the system default run-time')",
  "(68946, Token.Text.NewLine, '\\n')",
  "(68947, Token.Text.Whitespace, '\\t    ')",
  "(68952, Token.Comment.Single, '# search path.')",
  "(68966, Token.Text.NewLine, '\\n')",
  "(68967, Token.Text.Whitespace, '\\t    ')",
  "(68972, Token.Text, 'case')",
  "(68976, Token.Text.Whitespace, ' ')",
  "(68977, Token.Literal.String.Double, '\" $sys_lib_dlsearch_path \"')",
  "(69003, Token.Text.Whitespace, ' ')",
  "(69004, Token.Text, 'in')",
  "(69006, Token.Text.NewLine, '\\n')",
  "(69007, Token.Text.Whitespace, '\\t    ')",
  "(69012, Token.Text, '*\"')",
  "(69014, Token.Text.Whitespace, ' ')",
  "(69015, Token.Text, '$absdir')",
  "(69022, Token.Text.Whitespace, ' ')",
  "(69023, Token.Literal.String.Double, '\"*) ;;\\n\\t    *)\\n\\t      case \"')",
  "(69051, Token.Text, '$compile_rpath')",
  "(69065, Token.Text.Whitespace, ' ')",
  "(69066, Token.Literal.String.Double, '\" in\\n\\t      *\"')",
  "(69080, Token.Text.Whitespace, ' ')",
  "(69081, Token.Text, '$absdir')",
  "(69088, Token.Text.Whitespace, ' ')",
  "(69089, Token.Literal.String.Double, '\"*) ;;\\n\\t      *) compile_rpath=\"')",
  "(69121, Token.Text, '$compile_rpath')",
  "(69135, Token.Text.Whitespace, ' ')",
  "(69136, Token.Text, '$absdir\"')",
  "(69144, Token.Text.NewLine, '\\n')",
  "(69145, Token.Text.Whitespace, '\\t      ')",
  "(69152, Token.Text, 'esac')",
  "(69156, Token.Text.NewLine, '\\n')",
  "(69157, Token.Text.Whitespace, '\\t      ')",
  "(69164, Token.Text, ';;')",
  "(69166, Token.Text.NewLine, '\\n')",
  "(69167, Token.Text.Whitespace, '\\t    ')",
  "(69172, Token.Text, 'esac')",
  "(69176, Token.Text.NewLine, '\\n')",
  "(69177, Token.Text.Whitespace, '\\t    ')",
  "(69182, Token.Text, 'case')",
  "(69186, Token.Text.Whitespace, ' ')",
  "(69187, Token.Literal.String.Double, '\" $sys_lib_dlsearch_path \"')",
  "(69213, Token.Text.Whitespace, ' ')",
  "(69214, Token.Text, 'in')",
  "(69216, Token.Text.NewLine, '\\n')",
  "(69217, Token.Text.Whitespace, '\\t    ')",
  "(69222, Token.Text, '*\"')",
  "(69224, Token.Text.Whitespace, ' ')",
  "(69225, Token.Text, '$libdir')",
  "(69232, Token.Text.Whitespace, ' ')",
  "(69233, Token.Literal.String.Double, '\"*) ;;\\n\\t    *)\\n\\t      case \"')",
  "(69261, Token.Text, '$finalize_rpath')",
  "(69276, Token.Text.Whitespace, ' ')",
  "(69277, Token.Literal.String.Double, '\" in\\n\\t      *\"')",
  "(69291, Token.Text.Whitespace, ' ')",
  "(69292, Token.Text, '$libdir')",
  "(69299, Token.Text.Whitespace, ' ')",
  "(69300, Token.Literal.String.Double, '\"*) ;;\\n\\t      *) finalize_rpath=\"')",
  "(69333, Token.Text, '$finalize_rpath')",
  "(69348, Token.Text.Whitespace, ' ')",
  "(69349, Token.Text, '$libdir\"')",
  "(69357, Token.Text.NewLine, '\\n')",
  "(69358, Token.Text.Whitespace, '\\t      ')",
  "(69365, Token.Text, 'esac')",
  "(69369, Token.Text.NewLine, '\\n')",
  "(69370, Token.Text.Whitespace, '\\t      ')",
  "(69377, Token.Text, ';;')",
  "(69379, Token.Text.NewLine, '\\n')",
  "(69380, Token.Text.Whitespace, '\\t    ')",
  "(69385, Token.Text, 'esac')",
  "(69389, Token.Text.NewLine, '\\n')",
  "(69390, Token.Text.Whitespace, '\\t  ')",
  "(69393, Token.Text, 'fi')",
  "(69395, Token.Text.Whitespace, ' ')",
  "(69396, Token.Comment.Single, '# $linkmode,$pass = prog,link...')",
  "(69428, Token.Text.NewLine, '\\n\\n')",
  "(69430, Token.Text.Whitespace, '\\t  ')",
  "(69433, Token.Text, 'if')",
  "(69435, Token.Text.Whitespace, ' ')",
  "(69436, Token.Text, 'test')",
  "(69440, Token.Text.Whitespace, ' ')",
  "(69441, Token.Literal.String.Double, '\"$alldeplibs\"')",
  "(69454, Token.Text.Whitespace, ' ')",
  "(69455, Token.Text, '=')",
  "(69456, Token.Text.Whitespace, ' ')",
  "(69457, Token.Text, 'yes')",
  "(69460, Token.Text.Whitespace, ' ')",
  "(69461, Token.Text, '&&')",
  "(69463, Token.Text.NewLine, '\\n')",
  "(69464, Token.Text.Whitespace, '\\t     ')",
  "(69470, Token.Text, '{')",
  "(69471, Token.Text.Whitespace, ' ')",
  "(69472, Token.Text, 'test')",
  "(69476, Token.Text.Whitespace, ' ')",
  "(69477, Token.Literal.String.Double, '\"$deplibs_check_method\"')",
  "(69500, Token.Text.Whitespace, ' ')",
  "(69501, Token.Text, '=')",
  "(69502, Token.Text.Whitespace, ' ')",
  "(69503, Token.Text, 'pass_all')",
  "(69511, Token.Text.Whitespace, ' ')",
  "(69512, Token.Text, '||')",
  "(69514, Token.Text.NewLine, '\\n')",
  "(69515, Token.Text.Whitespace, '\\t       ')",
  "(69523, Token.Text, '{')",
  "(69524, Token.Text.Whitespace, ' ')",
  "(69525, Token.Text, 'test')",
  "(69529, Token.Text.Whitespace, ' ')",
  "(69530, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(69551, Token.Text.Whitespace, ' ')",
  "(69552, Token.Text, '=')",
  "(69553, Token.Text.Whitespace, ' ')",
  "(69554, Token.Text, 'yes')",
  "(69557, Token.Text.Whitespace, ' ')",
  "(69558, Token.Text, '&&')",
  "(69560, Token.Text.NewLine, '\\n')",
  "(69561, Token.Text.Whitespace, '\\t\\t ')",
  "(69564, Token.Text, 'test')",
  "(69568, Token.Text.Whitespace, ' ')",
  "(69569, Token.Text, '-n')",
  "(69571, Token.Text.Whitespace, ' ')",
  "(69572, Token.Literal.String.Double, '\"$library_names\"')",
  "(69588, Token.Text, ';')",
  "(69589, Token.Text.Whitespace, ' ')",
  "(69590, Token.Text, '};')",
  "(69592, Token.Text.Whitespace, ' ')",
  "(69593, Token.Text, '};')",
  "(69595, Token.Text.Whitespace, ' ')",
  "(69596, Token.Text, 'then')",
  "(69600, Token.Text.NewLine, '\\n')",
  "(69601, Token.Text.Whitespace, '\\t    ')",
  "(69606, Token.Comment.Single, '# We only need to search for static libraries')",
  "(69651, Token.Text.NewLine, '\\n')",
  "(69652, Token.Text.Whitespace, '\\t    ')",
  "(69657, Token.Text, 'continue')",
  "(69665, Token.Text.NewLine, '\\n')",
  "(69666, Token.Text.Whitespace, '\\t  ')",
  "(69669, Token.Text, 'fi')",
  "(69671, Token.Text.NewLine, '\\n')",
  "(69672, Token.Text.Whitespace, '\\t')",
  "(69673, Token.Text, 'fi')",
  "(69675, Token.Text.NewLine, '\\n\\n')",
  "(69677, Token.Text.Whitespace, '\\t')",
  "(69678, Token.Text, 'link_static=no')",
  "(69692, Token.Text.Whitespace, ' ')",
  "(69693, Token.Comment.Single, '# Whether the deplib will be linked statically')",
  "(69739, Token.Text.NewLine, '\\n')",
  "(69740, Token.Text.Whitespace, '\\t')",
  "(69741, Token.Text, 'use_static_libs=$prefer_static_libs')",
  "(69776, Token.Text.NewLine, '\\n')",
  "(69777, Token.Text.Whitespace, '\\t')",
  "(69778, Token.Text, 'if')",
  "(69780, Token.Text.Whitespace, ' ')",
  "(69781, Token.Text, 'test')",
  "(69785, Token.Text.Whitespace, ' ')",
  "(69786, Token.Literal.String.Double, '\"$use_static_libs\"')",
  "(69804, Token.Text.Whitespace, ' ')",
  "(69805, Token.Text, '=')",
  "(69806, Token.Text.Whitespace, ' ')",
  "(69807, Token.Text, 'built')",
  "(69812, Token.Text.Whitespace, ' ')",
  "(69813, Token.Text, '&&')",
  "(69815, Token.Text.Whitespace, ' ')",
  "(69816, Token.Text, 'test')",
  "(69820, Token.Text.Whitespace, ' ')",
  "(69821, Token.Literal.String.Double, '\"$installed\"')",
  "(69833, Token.Text.Whitespace, ' ')",
  "(69834, Token.Text, '=')",
  "(69835, Token.Text.Whitespace, ' ')",
  "(69836, Token.Text, 'yes')",
  "(69839, Token.Text.Whitespace, ' ')",
  "(69840, Token.Text, ';')",
  "(69841, Token.Text.Whitespace, ' ')",
  "(69842, Token.Text, 'then')",
  "(69846, Token.Text.NewLine, '\\n')",
  "(69847, Token.Text.Whitespace, '\\t  ')",
  "(69850, Token.Text, 'use_static_libs=no')",
  "(69868, Token.Text.NewLine, '\\n')",
  "(69869, Token.Text.Whitespace, '\\t')",
  "(69870, Token.Text, 'fi')",
  "(69872, Token.Text.NewLine, '\\n')",
  "(69873, Token.Text.Whitespace, '\\t')",
  "(69874, Token.Text, 'if')",
  "(69876, Token.Text.Whitespace, ' ')",
  "(69877, Token.Text, 'test')",
  "(69881, Token.Text.Whitespace, ' ')",
  "(69882, Token.Text, '-n')",
  "(69884, Token.Text.Whitespace, ' ')",
  "(69885, Token.Literal.String.Double, '\"$library_names\"')",
  "(69901, Token.Text.Whitespace, ' ')",
  "(69902, Token.Text, '&&')",
  "(69904, Token.Text.NewLine, '\\n')",
  "(69905, Token.Text.Whitespace, '\\t   ')",
  "(69909, Token.Text, '{')",
  "(69910, Token.Text.Whitespace, ' ')",
  "(69911, Token.Text, 'test')",
  "(69915, Token.Text.Whitespace, ' ')",
  "(69916, Token.Literal.String.Double, '\"$use_static_libs\"')",
  "(69934, Token.Text.Whitespace, ' ')",
  "(69935, Token.Text, '=')",
  "(69936, Token.Text.Whitespace, ' ')",
  "(69937, Token.Text, 'no')",
  "(69939, Token.Text.Whitespace, ' ')",
  "(69940, Token.Text, '||')",
  "(69942, Token.Text.Whitespace, ' ')",
  "(69943, Token.Text, 'test')",
  "(69947, Token.Text.Whitespace, ' ')",
  "(69948, Token.Text, '-z')",
  "(69950, Token.Text.Whitespace, ' ')",
  "(69951, Token.Literal.String.Double, '\"$old_library\"')",
  "(69965, Token.Text, ';')",
  "(69966, Token.Text.Whitespace, ' ')",
  "(69967, Token.Text, '};')",
  "(69969, Token.Text.Whitespace, ' ')",
  "(69970, Token.Text, 'then')",
  "(69974, Token.Text.NewLine, '\\n')",
  "(69975, Token.Text.Whitespace, '\\t  ')",
  "(69978, Token.Text, 'if')",
  "(69980, Token.Text.Whitespace, ' ')",
  "(69981, Token.Text, 'test')",
  "(69985, Token.Text.Whitespace, ' ')",
  "(69986, Token.Literal.String.Double, '\"$installed\"')",
  "(69998, Token.Text.Whitespace, ' ')",
  "(69999, Token.Text, '=')",
  "(70000, Token.Text.Whitespace, ' ')",
  "(70001, Token.Text, 'no;')",
  "(70004, Token.Text.Whitespace, ' ')",
  "(70005, Token.Text, 'then')",
  "(70009, Token.Text.NewLine, '\\n')",
  "(70010, Token.Text.Whitespace, '\\t    ')",
  "(70015, Token.Text, 'notinst_deplibs=\"$notinst_deplibs')",
  "(70048, Token.Text.Whitespace, ' ')",
  "(70049, Token.Text, '$lib\"')",
  "(70054, Token.Text.NewLine, '\\n')",
  "(70055, Token.Text.Whitespace, '\\t    ')",
  "(70060, Token.Text, 'need_relink=yes')",
  "(70075, Token.Text.NewLine, '\\n')",
  "(70076, Token.Text.Whitespace, '\\t  ')",
  "(70079, Token.Text, 'fi')",
  "(70081, Token.Text.NewLine, '\\n')",
  "(70082, Token.Text.Whitespace, '\\t  ')",
  "(70085, Token.Comment.Single, '# This is a shared library')",
  "(70111, Token.Text.NewLine, '\\n\\n')",
  "(70113, Token.Text.Whitespace, '\\t  ')",
  "(70116, Token.Comment.Single, \"# Warn about portability, can't link against -module's on\")",
  "(70173, Token.Text.NewLine, '\\n')",
  "(70174, Token.Text.Whitespace, '\\t  ')",
  "(70177, Token.Comment.Single, '# some systems (darwin)')",
  "(70200, Token.Text.NewLine, '\\n')",
  "(70201, Token.Text.Whitespace, '\\t  ')",
  "(70204, Token.Text, 'if')",
  "(70206, Token.Text.Whitespace, ' ')",
  "(70207, Token.Text, 'test')",
  "(70211, Token.Text.Whitespace, ' ')",
  "(70212, Token.Literal.String.Double, '\"$shouldnotlink\"')",
  "(70228, Token.Text.Whitespace, ' ')",
  "(70229, Token.Text, '=')",
  "(70230, Token.Text.Whitespace, ' ')",
  "(70231, Token.Text, 'yes')",
  "(70234, Token.Text.Whitespace, ' ')",
  "(70235, Token.Text, '&&')",
  "(70237, Token.Text.Whitespace, ' ')",
  "(70238, Token.Text, 'test')",
  "(70242, Token.Text.Whitespace, ' ')",
  "(70243, Token.Literal.String.Double, '\"$pass\"')",
  "(70250, Token.Text.Whitespace, ' ')",
  "(70251, Token.Text, '=')",
  "(70252, Token.Text.Whitespace, ' ')",
  "(70253, Token.Text, 'link')",
  "(70257, Token.Text.Whitespace, ' ')",
  "(70258, Token.Text, ';')",
  "(70259, Token.Text.Whitespace, ' ')",
  "(70260, Token.Text, 'then')",
  "(70264, Token.Text.NewLine, '\\n')",
  "(70265, Token.Text.Whitespace, '\\t    ')",
  "(70270, Token.Text, '$echo')",
  "(70275, Token.Text.NewLine, '\\n')",
  "(70276, Token.Text.Whitespace, '\\t    ')",
  "(70281, Token.Text, 'if')",
  "(70283, Token.Text.Whitespace, ' ')",
  "(70284, Token.Text, 'test')",
  "(70288, Token.Text.Whitespace, ' ')",
  "(70289, Token.Literal.String.Double, '\"$linkmode\"')",
  "(70300, Token.Text.Whitespace, ' ')",
  "(70301, Token.Text, '=')",
  "(70302, Token.Text.Whitespace, ' ')",
  "(70303, Token.Text, 'prog;')",
  "(70308, Token.Text.Whitespace, ' ')",
  "(70309, Token.Text, 'then')",
  "(70313, Token.Text.NewLine, '\\n')",
  "(70314, Token.Text.Whitespace, '\\t      ')",
  "(70321, Token.Text, '$echo')",
  "(70326, Token.Text.Whitespace, ' ')",
  "(70327, Token.Literal.String.Double, '\"*** Warning: Linking the executable $output against the loadable module\"')",
  "(70400, Token.Text.NewLine, '\\n')",
  "(70401, Token.Text.Whitespace, '\\t    ')",
  "(70406, Token.Text, 'else')",
  "(70410, Token.Text.NewLine, '\\n')",
  "(70411, Token.Text.Whitespace, '\\t      ')",
  "(70418, Token.Text, '$echo')",
  "(70423, Token.Text.Whitespace, ' ')",
  "(70424, Token.Literal.String.Double, '\"*** Warning: Linking the shared library $output against the loadable module\"')",
  "(70501, Token.Text.NewLine, '\\n')",
  "(70502, Token.Text.Whitespace, '\\t    ')",
  "(70507, Token.Text, 'fi')",
  "(70509, Token.Text.NewLine, '\\n')",
  "(70510, Token.Text.Whitespace, '\\t    ')",
  "(70515, Token.Text, '$echo')",
  "(70520, Token.Text.Whitespace, ' ')",
  "(70521, Token.Literal.String.Double, '\"*** $linklib is not portable!\"')",
  "(70552, Token.Text.NewLine, '\\n')",
  "(70553, Token.Text.Whitespace, '\\t  ')",
  "(70556, Token.Text, 'fi')",
  "(70558, Token.Text.NewLine, '\\n')",
  "(70559, Token.Text.Whitespace, '\\t  ')",
  "(70562, Token.Text, 'if')",
  "(70564, Token.Text.Whitespace, ' ')",
  "(70565, Token.Text, 'test')",
  "(70569, Token.Text.Whitespace, ' ')",
  "(70570, Token.Literal.String.Double, '\"$linkmode\"')",
  "(70581, Token.Text.Whitespace, ' ')",
  "(70582, Token.Text, '=')",
  "(70583, Token.Text.Whitespace, ' ')",
  "(70584, Token.Text, 'lib')",
  "(70587, Token.Text.Whitespace, ' ')",
  "(70588, Token.Text, '&&')",
  "(70590, Token.Text.NewLine, '\\n')",
  "(70591, Token.Text.Whitespace, '\\t     ')",
  "(70597, Token.Text, 'test')",
  "(70601, Token.Text.Whitespace, ' ')",
  "(70602, Token.Literal.String.Double, '\"$hardcode_into_libs\"')",
  "(70623, Token.Text.Whitespace, ' ')",
  "(70624, Token.Text, '=')",
  "(70625, Token.Text.Whitespace, ' ')",
  "(70626, Token.Text, 'yes;')",
  "(70630, Token.Text.Whitespace, ' ')",
  "(70631, Token.Text, 'then')",
  "(70635, Token.Text.NewLine, '\\n')",
  "(70636, Token.Text.Whitespace, '\\t    ')",
  "(70641, Token.Comment.Single, '# Hardcode the library path.')",
  "(70669, Token.Text.NewLine, '\\n')",
  "(70670, Token.Text.Whitespace, '\\t    ')",
  "(70675, Token.Comment.Single, '# Skip directories that are in the system default run-time')",
  "(70733, Token.Text.NewLine, '\\n')",
  "(70734, Token.Text.Whitespace, '\\t    ')",
  "(70739, Token.Comment.Single, '# search path.')",
  "(70753, Token.Text.NewLine, '\\n')",
  "(70754, Token.Text.Whitespace, '\\t    ')",
  "(70759, Token.Text, 'case')",
  "(70763, Token.Text.Whitespace, ' ')",
  "(70764, Token.Literal.String.Double, '\" $sys_lib_dlsearch_path \"')",
  "(70790, Token.Text.Whitespace, ' ')",
  "(70791, Token.Text, 'in')",
  "(70793, Token.Text.NewLine, '\\n')",
  "(70794, Token.Text.Whitespace, '\\t    ')",
  "(70799, Token.Text, '*\"')",
  "(70801, Token.Text.Whitespace, ' ')",
  "(70802, Token.Text, '$absdir')",
  "(70809, Token.Text.Whitespace, ' ')",
  "(70810, Token.Literal.String.Double, '\"*) ;;\\n\\t    *)\\n\\t      case \"')",
  "(70838, Token.Text, '$compile_rpath')",
  "(70852, Token.Text.Whitespace, ' ')",
  "(70853, Token.Literal.String.Double, '\" in\\n\\t      *\"')",
  "(70867, Token.Text.Whitespace, ' ')",
  "(70868, Token.Text, '$absdir')",
  "(70875, Token.Text.Whitespace, ' ')",
  "(70876, Token.Literal.String.Double, '\"*) ;;\\n\\t      *) compile_rpath=\"')",
  "(70908, Token.Text, '$compile_rpath')",
  "(70922, Token.Text.Whitespace, ' ')",
  "(70923, Token.Text, '$absdir\"')",
  "(70931, Token.Text.NewLine, '\\n')",
  "(70932, Token.Text.Whitespace, '\\t      ')",
  "(70939, Token.Text, 'esac')",
  "(70943, Token.Text.NewLine, '\\n')",
  "(70944, Token.Text.Whitespace, '\\t      ')",
  "(70951, Token.Text, ';;')",
  "(70953, Token.Text.NewLine, '\\n')",
  "(70954, Token.Text.Whitespace, '\\t    ')",
  "(70959, Token.Text, 'esac')",
  "(70963, Token.Text.NewLine, '\\n')",
  "(70964, Token.Text.Whitespace, '\\t    ')",
  "(70969, Token.Text, 'case')",
  "(70973, Token.Text.Whitespace, ' ')",
  "(70974, Token.Literal.String.Double, '\" $sys_lib_dlsearch_path \"')",
  "(71000, Token.Text.Whitespace, ' ')",
  "(71001, Token.Text, 'in')",
  "(71003, Token.Text.NewLine, '\\n')",
  "(71004, Token.Text.Whitespace, '\\t    ')",
  "(71009, Token.Text, '*\"')",
  "(71011, Token.Text.Whitespace, ' ')",
  "(71012, Token.Text, '$libdir')",
  "(71019, Token.Text.Whitespace, ' ')",
  "(71020, Token.Literal.String.Double, '\"*) ;;\\n\\t    *)\\n\\t      case \"')",
  "(71048, Token.Text, '$finalize_rpath')",
  "(71063, Token.Text.Whitespace, ' ')",
  "(71064, Token.Literal.String.Double, '\" in\\n\\t      *\"')",
  "(71078, Token.Text.Whitespace, ' ')",
  "(71079, Token.Text, '$libdir')",
  "(71086, Token.Text.Whitespace, ' ')",
  "(71087, Token.Literal.String.Double, '\"*) ;;\\n\\t      *) finalize_rpath=\"')",
  "(71120, Token.Text, '$finalize_rpath')",
  "(71135, Token.Text.Whitespace, ' ')",
  "(71136, Token.Text, '$libdir\"')",
  "(71144, Token.Text.NewLine, '\\n')",
  "(71145, Token.Text.Whitespace, '\\t      ')",
  "(71152, Token.Text, 'esac')",
  "(71156, Token.Text.NewLine, '\\n')",
  "(71157, Token.Text.Whitespace, '\\t      ')",
  "(71164, Token.Text, ';;')",
  "(71166, Token.Text.NewLine, '\\n')",
  "(71167, Token.Text.Whitespace, '\\t    ')",
  "(71172, Token.Text, 'esac')",
  "(71176, Token.Text.NewLine, '\\n')",
  "(71177, Token.Text.Whitespace, '\\t  ')",
  "(71180, Token.Text, 'fi')",
  "(71182, Token.Text.NewLine, '\\n\\n')",
  "(71184, Token.Text.Whitespace, '\\t  ')",
  "(71187, Token.Text, 'if')",
  "(71189, Token.Text.Whitespace, ' ')",
  "(71190, Token.Text, 'test')",
  "(71194, Token.Text.Whitespace, ' ')",
  "(71195, Token.Text, '-n')",
  "(71197, Token.Text.Whitespace, ' ')",
  "(71198, Token.Literal.String.Double, '\"$old_archive_from_expsyms_cmds\"')",
  "(71230, Token.Text, ';')",
  "(71231, Token.Text.Whitespace, ' ')",
  "(71232, Token.Text, 'then')",
  "(71236, Token.Text.NewLine, '\\n')",
  "(71237, Token.Text.Whitespace, '\\t    ')",
  "(71242, Token.Comment.Single, '# figure out the soname')",
  "(71265, Token.Text.NewLine, '\\n')",
  "(71266, Token.Text.Whitespace, '\\t    ')",
  "(71271, Token.Text, 'set')",
  "(71274, Token.Text.Whitespace, ' ')",
  "(71275, Token.Text, 'dummy')",
  "(71280, Token.Text.Whitespace, ' ')",
  "(71281, Token.Text, '$library_names')",
  "(71295, Token.Text.NewLine, '\\n')",
  "(71296, Token.Text.Whitespace, '\\t    ')",
  "(71301, Token.Text, 'realname=\"$2\"')",
  "(71314, Token.Text.NewLine, '\\n')",
  "(71315, Token.Text.Whitespace, '\\t    ')",
  "(71320, Token.Text, 'shift;')",
  "(71326, Token.Text.Whitespace, ' ')",
  "(71327, Token.Text, 'shift')",
  "(71332, Token.Text.NewLine, '\\n')",
  "(71333, Token.Text.Whitespace, '\\t    ')",
  "(71338, Token.Text, 'libname=`eval')",
  "(71351, Token.Text.Whitespace, ' ')",
  "(71352, Token.Text, '\\\\\\\\$echo')",
  "(71359, Token.Text.Whitespace, ' ')",
  "(71360, Token.Text, '\\\\\"$libname_spec\\\\\"`')",
  "(71378, Token.Text.NewLine, '\\n')",
  "(71379, Token.Text.Whitespace, '\\t    ')",
  "(71384, Token.Comment.Single, \"# use dlname if we got it. it's perfectly good, no?\")",
  "(71435, Token.Text.NewLine, '\\n')",
  "(71436, Token.Text.Whitespace, '\\t    ')",
  "(71441, Token.Text, 'if')",
  "(71443, Token.Text.Whitespace, ' ')",
  "(71444, Token.Text, 'test')",
  "(71448, Token.Text.Whitespace, ' ')",
  "(71449, Token.Text, '-n')",
  "(71451, Token.Text.Whitespace, ' ')",
  "(71452, Token.Literal.String.Double, '\"$dlname\"')",
  "(71461, Token.Text, ';')",
  "(71462, Token.Text.Whitespace, ' ')",
  "(71463, Token.Text, 'then')",
  "(71467, Token.Text.NewLine, '\\n')",
  "(71468, Token.Text.Whitespace, '\\t      ')",
  "(71475, Token.Text, 'soname=\"$dlname\"')",
  "(71491, Token.Text.NewLine, '\\n')",
  "(71492, Token.Text.Whitespace, '\\t    ')",
  "(71497, Token.Text, 'elif')",
  "(71501, Token.Text.Whitespace, ' ')",
  "(71502, Token.Text, 'test')",
  "(71506, Token.Text.Whitespace, ' ')",
  "(71507, Token.Text, '-n')",
  "(71509, Token.Text.Whitespace, ' ')",
  "(71510, Token.Literal.String.Double, '\"$soname_spec\"')",
  "(71524, Token.Text, ';')",
  "(71525, Token.Text.Whitespace, ' ')",
  "(71526, Token.Text, 'then')",
  "(71530, Token.Text.NewLine, '\\n')",
  "(71531, Token.Text.Whitespace, '\\t      ')",
  "(71538, Token.Comment.Single, '# bleh windows')",
  "(71552, Token.Text.NewLine, '\\n')",
  "(71553, Token.Text.Whitespace, '\\t      ')",
  "(71560, Token.Text, 'case')",
  "(71564, Token.Text.Whitespace, ' ')",
  "(71565, Token.Text, '$host')",
  "(71570, Token.Text.Whitespace, ' ')",
  "(71571, Token.Text, 'in')",
  "(71573, Token.Text.NewLine, '\\n')",
  "(71574, Token.Text.Whitespace, '\\t      ')",
  "(71581, Token.Text, '*cygwin*')",
  "(71589, Token.Text.Whitespace, ' ')",
  "(71590, Token.Text, '|')",
  "(71591, Token.Text.Whitespace, ' ')",
  "(71592, Token.Text, 'mingw*)')",
  "(71599, Token.Text.NewLine, '\\n')",
  "(71600, Token.Text.Whitespace, '\\t\\t')",
  "(71602, Token.Text, 'major=`expr')",
  "(71613, Token.Text.Whitespace, ' ')",
  "(71614, Token.Text, '$current')",
  "(71622, Token.Text.Whitespace, ' ')",
  "(71623, Token.Text, '-')",
  "(71624, Token.Text.Whitespace, ' ')",
  "(71625, Token.Text, '$age`')",
  "(71630, Token.Text.NewLine, '\\n')",
  "(71631, Token.Text.Whitespace, '\\t\\t')",
  "(71633, Token.Text, 'versuffix=\"-$major\"')",
  "(71652, Token.Text.NewLine, '\\n')",
  "(71653, Token.Text.Whitespace, '\\t\\t')",
  "(71655, Token.Text, ';;')",
  "(71657, Token.Text.NewLine, '\\n')",
  "(71658, Token.Text.Whitespace, '\\t      ')",
  "(71665, Token.Text, 'esac')",
  "(71669, Token.Text.NewLine, '\\n')",
  "(71670, Token.Text.Whitespace, '\\t      ')",
  "(71677, Token.Text, 'eval')",
  "(71681, Token.Text.Whitespace, ' ')",
  "(71682, Token.Text, 'soname=\\\\\"$soname_spec\\\\\"')",
  "(71705, Token.Text.NewLine, '\\n')",
  "(71706, Token.Text.Whitespace, '\\t    ')",
  "(71711, Token.Text, 'else')",
  "(71715, Token.Text.NewLine, '\\n')",
  "(71716, Token.Text.Whitespace, '\\t      ')",
  "(71723, Token.Text, 'soname=\"$realname\"')",
  "(71741, Token.Text.NewLine, '\\n')",
  "(71742, Token.Text.Whitespace, '\\t    ')",
  "(71747, Token.Text, 'fi')",
  "(71749, Token.Text.NewLine, '\\n\\n')",
  "(71751, Token.Text.Whitespace, '\\t    ')",
  "(71756, Token.Comment.Single, '# Make a new name for the extract_expsyms_cmds to use')",
  "(71809, Token.Text.NewLine, '\\n')",
  "(71810, Token.Text.Whitespace, '\\t    ')",
  "(71815, Token.Text, 'soroot=\"$soname\"')",
  "(71831, Token.Text.NewLine, '\\n')",
  "(71832, Token.Text.Whitespace, '\\t    ')",
  "(71837, Token.Text, 'soname=`$echo')",
  "(71850, Token.Text.Whitespace, ' ')",
  "(71851, Token.Text, '$soroot')",
  "(71858, Token.Text.Whitespace, ' ')",
  "(71859, Token.Text, '|')",
  "(71860, Token.Text.Whitespace, ' ')",
  "(71861, Token.Text, '${SED}')",
  "(71867, Token.Text.Whitespace, ' ')",
  "(71868, Token.Text, '-e')",
  "(71870, Token.Text.Whitespace, ' ')",
  "(71871, Token.Literal.String.Single, \"'s/^.*\\\\///'\")",
  "(71882, Token.Text, '`')",
  "(71883, Token.Text.NewLine, '\\n')",
  "(71884, Token.Text.Whitespace, '\\t    ')",
  "(71889, Token.Text, 'newlib=\"libimp-`$echo')",
  "(71910, Token.Text.Whitespace, ' ')",
  "(71911, Token.Text, '$soname')",
  "(71918, Token.Text.Whitespace, ' ')",
  "(71919, Token.Text, '|')",
  "(71920, Token.Text.Whitespace, ' ')",
  "(71921, Token.Text, '${SED}')",
  "(71927, Token.Text.Whitespace, ' ')",
  "(71928, Token.Literal.String.Single, \"'s/^lib//;s/\\\\.dll$//'\")",
  "(71949, Token.Text, '`.a\"')",
  "(71953, Token.Text.NewLine, '\\n\\n')",
  "(71955, Token.Text.Whitespace, '\\t    ')",
  "(71960, Token.Comment.Single, '# If the library has no export list, then create one now')",
  "(72016, Token.Text.NewLine, '\\n')",
  "(72017, Token.Text.Whitespace, '\\t    ')",
  "(72022, Token.Text, 'if')",
  "(72024, Token.Text.Whitespace, ' ')",
  "(72025, Token.Text, 'test')",
  "(72029, Token.Text.Whitespace, ' ')",
  "(72030, Token.Text, '-f')",
  "(72032, Token.Text.Whitespace, ' ')",
  "(72033, Token.Literal.String.Double, '\"$output_objdir/$soname-def\"')",
  "(72061, Token.Text, ';')",
  "(72062, Token.Text.Whitespace, ' ')",
  "(72063, Token.Text, 'then')",
  "(72067, Token.Text.Whitespace, ' ')",
  "(72068, Token.Text, ':')",
  "(72069, Token.Text.NewLine, '\\n')",
  "(72070, Token.Text.Whitespace, '\\t    ')",
  "(72075, Token.Text, 'else')",
  "(72079, Token.Text.NewLine, '\\n')",
  "(72080, Token.Text.Whitespace, '\\t      ')",
  "(72087, Token.Text, '$show')",
  "(72092, Token.Text.Whitespace, ' ')",
  "(72093, Token.Literal.String.Double, '\"extracting exported symbol list from \\\\`$soname\\'\"')",
  "(72142, Token.Text.NewLine, '\\n')",
  "(72143, Token.Text.Whitespace, '\\t      ')",
  "(72150, Token.Text, 'save_ifs=\"$IFS\";')",
  "(72166, Token.Text.Whitespace, ' ')",
  "(72167, Token.Text, \"IFS='~'\")",
  "(72174, Token.Text.NewLine, '\\n')",
  "(72175, Token.Text.Whitespace, '\\t      ')",
  "(72182, Token.Text, 'cmds=$extract_expsyms_cmds')",
  "(72208, Token.Text.NewLine, '\\n')",
  "(72209, Token.Text.Whitespace, '\\t      ')",
  "(72216, Token.Text, 'for')",
  "(72219, Token.Text.Whitespace, ' ')",
  "(72220, Token.Text, 'cmd')",
  "(72223, Token.Text.Whitespace, ' ')",
  "(72224, Token.Text, 'in')",
  "(72226, Token.Text.Whitespace, ' ')",
  "(72227, Token.Text, '$cmds;')",
  "(72233, Token.Text.Whitespace, ' ')",
  "(72234, Token.Text, 'do')",
  "(72236, Token.Text.NewLine, '\\n')",
  "(72237, Token.Text.Whitespace, '\\t\\t')",
  "(72239, Token.Text, 'IFS=\"$save_ifs\"')",
  "(72254, Token.Text.NewLine, '\\n')",
  "(72255, Token.Text.Whitespace, '\\t\\t')",
  "(72257, Token.Text, 'eval')",
  "(72261, Token.Text.Whitespace, ' ')",
  "(72262, Token.Text, 'cmd=\\\\\"$cmd\\\\\"')",
  "(72274, Token.Text.NewLine, '\\n')",
  "(72275, Token.Text.Whitespace, '\\t\\t')",
  "(72277, Token.Text, '$show')",
  "(72282, Token.Text.Whitespace, ' ')",
  "(72283, Token.Literal.String.Double, '\"$cmd\"')",
  "(72289, Token.Text.NewLine, '\\n')",
  "(72290, Token.Text.Whitespace, '\\t\\t')",
  "(72292, Token.Text, '$run')",
  "(72296, Token.Text.Whitespace, ' ')",
  "(72297, Token.Text, 'eval')",
  "(72301, Token.Text.Whitespace, ' ')",
  "(72302, Token.Literal.String.Double, '\"$cmd\"')",
  "(72308, Token.Text.Whitespace, ' ')",
  "(72309, Token.Text, '||')",
  "(72311, Token.Text.Whitespace, ' ')",
  "(72312, Token.Text, 'exit')",
  "(72316, Token.Text.Whitespace, ' ')",
  "(72317, Token.Text, '$?')",
  "(72319, Token.Text.NewLine, '\\n')",
  "(72320, Token.Text.Whitespace, '\\t      ')",
  "(72327, Token.Text, 'done')",
  "(72331, Token.Text.NewLine, '\\n')",
  "(72332, Token.Text.Whitespace, '\\t      ')",
  "(72339, Token.Text, 'IFS=\"$save_ifs\"')",
  "(72354, Token.Text.NewLine, '\\n')",
  "(72355, Token.Text.Whitespace, '\\t    ')",
  "(72360, Token.Text, 'fi')",
  "(72362, Token.Text.NewLine, '\\n\\n')",
  "(72364, Token.Text.Whitespace, '\\t    ')",
  "(72369, Token.Comment.Single, '# Create $newlib')",
  "(72385, Token.Text.NewLine, '\\n')",
  "(72386, Token.Text.Whitespace, '\\t    ')",
  "(72391, Token.Text, 'if')",
  "(72393, Token.Text.Whitespace, ' ')",
  "(72394, Token.Text, 'test')",
  "(72398, Token.Text.Whitespace, ' ')",
  "(72399, Token.Text, '-f')",
  "(72401, Token.Text.Whitespace, ' ')",
  "(72402, Token.Literal.String.Double, '\"$output_objdir/$newlib\"')",
  "(72426, Token.Text, ';')",
  "(72427, Token.Text.Whitespace, ' ')",
  "(72428, Token.Text, 'then')",
  "(72432, Token.Text.Whitespace, ' ')",
  "(72433, Token.Text, ':;')",
  "(72435, Token.Text.Whitespace, ' ')",
  "(72436, Token.Text, 'else')",
  "(72440, Token.Text.NewLine, '\\n')",
  "(72441, Token.Text.Whitespace, '\\t      ')",
  "(72448, Token.Text, '$show')",
  "(72453, Token.Text.Whitespace, ' ')",
  "(72454, Token.Literal.String.Double, '\"generating import library for \\\\`$soname\\'\"')",
  "(72496, Token.Text.NewLine, '\\n')",
  "(72497, Token.Text.Whitespace, '\\t      ')",
  "(72504, Token.Text, 'save_ifs=\"$IFS\";')",
  "(72520, Token.Text.Whitespace, ' ')",
  "(72521, Token.Text, \"IFS='~'\")",
  "(72528, Token.Text.NewLine, '\\n')",
  "(72529, Token.Text.Whitespace, '\\t      ')",
  "(72536, Token.Text, 'cmds=$old_archive_from_expsyms_cmds')",
  "(72571, Token.Text.NewLine, '\\n')",
  "(72572, Token.Text.Whitespace, '\\t      ')",
  "(72579, Token.Text, 'for')",
  "(72582, Token.Text.Whitespace, ' ')",
  "(72583, Token.Text, 'cmd')",
  "(72586, Token.Text.Whitespace, ' ')",
  "(72587, Token.Text, 'in')",
  "(72589, Token.Text.Whitespace, ' ')",
  "(72590, Token.Text, '$cmds;')",
  "(72596, Token.Text.Whitespace, ' ')",
  "(72597, Token.Text, 'do')",
  "(72599, Token.Text.NewLine, '\\n')",
  "(72600, Token.Text.Whitespace, '\\t\\t')",
  "(72602, Token.Text, 'IFS=\"$save_ifs\"')",
  "(72617, Token.Text.NewLine, '\\n')",
  "(72618, Token.Text.Whitespace, '\\t\\t')",
  "(72620, Token.Text, 'eval')",
  "(72624, Token.Text.Whitespace, ' ')",
  "(72625, Token.Text, 'cmd=\\\\\"$cmd\\\\\"')",
  "(72637, Token.Text.NewLine, '\\n')",
  "(72638, Token.Text.Whitespace, '\\t\\t')",
  "(72640, Token.Text, '$show')",
  "(72645, Token.Text.Whitespace, ' ')",
  "(72646, Token.Literal.String.Double, '\"$cmd\"')",
  "(72652, Token.Text.NewLine, '\\n')",
  "(72653, Token.Text.Whitespace, '\\t\\t')",
  "(72655, Token.Text, '$run')",
  "(72659, Token.Text.Whitespace, ' ')",
  "(72660, Token.Text, 'eval')",
  "(72664, Token.Text.Whitespace, ' ')",
  "(72665, Token.Literal.String.Double, '\"$cmd\"')",
  "(72671, Token.Text.Whitespace, ' ')",
  "(72672, Token.Text, '||')",
  "(72674, Token.Text.Whitespace, ' ')",
  "(72675, Token.Text, 'exit')",
  "(72679, Token.Text.Whitespace, ' ')",
  "(72680, Token.Text, '$?')",
  "(72682, Token.Text.NewLine, '\\n')",
  "(72683, Token.Text.Whitespace, '\\t      ')",
  "(72690, Token.Text, 'done')",
  "(72694, Token.Text.NewLine, '\\n')",
  "(72695, Token.Text.Whitespace, '\\t      ')",
  "(72702, Token.Text, 'IFS=\"$save_ifs\"')",
  "(72717, Token.Text.NewLine, '\\n')",
  "(72718, Token.Text.Whitespace, '\\t    ')",
  "(72723, Token.Text, 'fi')",
  "(72725, Token.Text.NewLine, '\\n')",
  "(72726, Token.Text.Whitespace, '\\t    ')",
  "(72731, Token.Comment.Single, '# make sure the library variables are pointing to the new library')",
  "(72796, Token.Text.NewLine, '\\n')",
  "(72797, Token.Text.Whitespace, '\\t    ')",
  "(72802, Token.Text, 'dir=$output_objdir')",
  "(72820, Token.Text.NewLine, '\\n')",
  "(72821, Token.Text.Whitespace, '\\t    ')",
  "(72826, Token.Text, 'linklib=$newlib')",
  "(72841, Token.Text.NewLine, '\\n')",
  "(72842, Token.Text.Whitespace, '\\t  ')",
  "(72845, Token.Text, 'fi')",
  "(72847, Token.Text.Whitespace, ' ')",
  "(72848, Token.Comment.Single, '# test -n \"$old_archive_from_expsyms_cmds\"')",
  "(72890, Token.Text.NewLine, '\\n\\n')",
  "(72892, Token.Text.Whitespace, '\\t  ')",
  "(72895, Token.Text, 'if')",
  "(72897, Token.Text.Whitespace, ' ')",
  "(72898, Token.Text, 'test')",
  "(72902, Token.Text.Whitespace, ' ')",
  "(72903, Token.Literal.String.Double, '\"$linkmode\"')",
  "(72914, Token.Text.Whitespace, ' ')",
  "(72915, Token.Text, '=')",
  "(72916, Token.Text.Whitespace, ' ')",
  "(72917, Token.Text, 'prog')",
  "(72921, Token.Text.Whitespace, ' ')",
  "(72922, Token.Text, '||')",
  "(72924, Token.Text.Whitespace, ' ')",
  "(72925, Token.Text, 'test')",
  "(72929, Token.Text.Whitespace, ' ')",
  "(72930, Token.Literal.String.Double, '\"$mode\"')",
  "(72937, Token.Text.Whitespace, ' ')",
  "(72938, Token.Text, '!=')",
  "(72940, Token.Text.Whitespace, ' ')",
  "(72941, Token.Text, 'relink;')",
  "(72948, Token.Text.Whitespace, ' ')",
  "(72949, Token.Text, 'then')",
  "(72953, Token.Text.NewLine, '\\n')",
  "(72954, Token.Text.Whitespace, '\\t    ')",
  "(72959, Token.Text, 'add_shlibpath=')",
  "(72973, Token.Text.NewLine, '\\n')",
  "(72974, Token.Text.Whitespace, '\\t    ')",
  "(72979, Token.Text, 'add_dir=')",
  "(72987, Token.Text.NewLine, '\\n')",
  "(72988, Token.Text.Whitespace, '\\t    ')",
  "(72993, Token.Text, 'add=')",
  "(72997, Token.Text.NewLine, '\\n')",
  "(72998, Token.Text.Whitespace, '\\t    ')",
  "(73003, Token.Text, 'lib_linked=yes')",
  "(73017, Token.Text.NewLine, '\\n')",
  "(73018, Token.Text.Whitespace, '\\t    ')",
  "(73023, Token.Text, 'case')",
  "(73027, Token.Text.Whitespace, ' ')",
  "(73028, Token.Text, '$hardcode_action')",
  "(73044, Token.Text.Whitespace, ' ')",
  "(73045, Token.Text, 'in')",
  "(73047, Token.Text.NewLine, '\\n')",
  "(73048, Token.Text.Whitespace, '\\t    ')",
  "(73053, Token.Text, 'immediate')",
  "(73062, Token.Text.Whitespace, ' ')",
  "(73063, Token.Text, '|')",
  "(73064, Token.Text.Whitespace, ' ')",
  "(73065, Token.Text, 'unsupported)')",
  "(73077, Token.Text.NewLine, '\\n')",
  "(73078, Token.Text.Whitespace, '\\t      ')",
  "(73085, Token.Text, 'if')",
  "(73087, Token.Text.Whitespace, ' ')",
  "(73088, Token.Text, 'test')",
  "(73092, Token.Text.Whitespace, ' ')",
  "(73093, Token.Literal.String.Double, '\"$hardcode_direct\"')",
  "(73111, Token.Text.Whitespace, ' ')",
  "(73112, Token.Text, '=')",
  "(73113, Token.Text.Whitespace, ' ')",
  "(73114, Token.Text, 'no;')",
  "(73117, Token.Text.Whitespace, ' ')",
  "(73118, Token.Text, 'then')",
  "(73122, Token.Text.NewLine, '\\n')",
  "(73123, Token.Text.Whitespace, '\\t\\t')",
  "(73125, Token.Text, 'add=\"$dir/$linklib\"')",
  "(73144, Token.Text.NewLine, '\\n')",
  "(73145, Token.Text.Whitespace, '\\t\\t')",
  "(73147, Token.Text, 'case')",
  "(73151, Token.Text.Whitespace, ' ')",
  "(73152, Token.Text, '$host')",
  "(73157, Token.Text.Whitespace, ' ')",
  "(73158, Token.Text, 'in')",
  "(73160, Token.Text.NewLine, '\\n')",
  "(73161, Token.Text.Whitespace, '\\t\\t  ')",
  "(73165, Token.Text, '*-*-sco3.2v5.0.[024]*)')",
  "(73187, Token.Text.Whitespace, ' ')",
  "(73188, Token.Text, 'add_dir=\"-L$dir\"')",
  "(73204, Token.Text.Whitespace, ' ')",
  "(73205, Token.Text, ';;')",
  "(73207, Token.Text.NewLine, '\\n')",
  "(73208, Token.Text.Whitespace, '\\t\\t  ')",
  "(73212, Token.Text, '*-*-sysv4*uw2*)')",
  "(73227, Token.Text.Whitespace, ' ')",
  "(73228, Token.Text, 'add_dir=\"-L$dir\"')",
  "(73244, Token.Text.Whitespace, ' ')",
  "(73245, Token.Text, ';;')",
  "(73247, Token.Text.NewLine, '\\n')",
  "(73248, Token.Text.Whitespace, '\\t\\t  ')",
  "(73252, Token.Text, '*-*-sysv5OpenUNIX*')",
  "(73270, Token.Text.Whitespace, ' ')",
  "(73271, Token.Text, '|')",
  "(73272, Token.Text.Whitespace, ' ')",
  "(73273, Token.Text, '*-*-sysv5UnixWare7.[01].[10]*')",
  "(73302, Token.Text.Whitespace, ' ')",
  "(73303, Token.Text, '|')",
  "(73304, Token.Text.Whitespace, ' ')",
  "(73305, Token.Text, '\\\\')",
  "(73306, Token.Text.NewLine, '\\n')",
  "(73307, Token.Text.Whitespace, '\\t\\t    ')",
  "(73313, Token.Text, '*-*-unixware7*)')",
  "(73328, Token.Text.Whitespace, ' ')",
  "(73329, Token.Text, 'add_dir=\"-L$dir\"')",
  "(73345, Token.Text.Whitespace, ' ')",
  "(73346, Token.Text, ';;')",
  "(73348, Token.Text.NewLine, '\\n')",
  "(73349, Token.Text.Whitespace, '\\t\\t  ')",
  "(73353, Token.Text, '*-*-darwin*')",
  "(73364, Token.Text.Whitespace, ' ')",
  "(73365, Token.Text, ')')",
  "(73366, Token.Text.NewLine, '\\n')",
  "(73367, Token.Text.Whitespace, '\\t\\t    ')",
  "(73373, Token.Comment.Single, '# if the lib is a module then we can not link against')",
  "(73426, Token.Text.NewLine, '\\n')",
  "(73427, Token.Text.Whitespace, '\\t\\t    ')",
  "(73433, Token.Comment.Single, '# it, someone is ignoring the new warnings I added')",
  "(73483, Token.Text.NewLine, '\\n')",
  "(73484, Token.Text.Whitespace, '\\t\\t    ')",
  "(73490, Token.Text, 'if')",
  "(73492, Token.Text.Whitespace, ' ')",
  "(73493, Token.Text, '/usr/bin/file')",
  "(73506, Token.Text.Whitespace, ' ')",
  "(73507, Token.Text, '-L')",
  "(73509, Token.Text.Whitespace, ' ')",
  "(73510, Token.Text, '$add')",
  "(73514, Token.Text.Whitespace, ' ')",
  "(73515, Token.Text, '2>')",
  "(73517, Token.Text.Whitespace, ' ')",
  "(73518, Token.Text, '/dev/null')",
  "(73527, Token.Text.Whitespace, ' ')",
  "(73528, Token.Text, '|')",
  "(73529, Token.Text.NewLine, '\\n')",
  "(73530, Token.Text.Whitespace, '                      ')",
  "(73552, Token.Text, '$EGREP')",
  "(73558, Token.Text.Whitespace, ' ')",
  "(73559, Token.Literal.String.Double, '\": [^:]* bundle\"')",
  "(73575, Token.Text.Whitespace, ' ')",
  "(73576, Token.Text, '>/dev/null')",
  "(73586, Token.Text.Whitespace, ' ')",
  "(73587, Token.Text, ';')",
  "(73588, Token.Text.Whitespace, ' ')",
  "(73589, Token.Text, 'then')",
  "(73593, Token.Text.NewLine, '\\n')",
  "(73594, Token.Text.Whitespace, '\\t\\t      ')",
  "(73602, Token.Text, '$echo')",
  "(73607, Token.Text.Whitespace, ' ')",
  "(73608, Token.Literal.String.Double, '\"** Warning, lib $linklib is a module, not a shared library\"')",
  "(73668, Token.Text.NewLine, '\\n')",
  "(73669, Token.Text.Whitespace, '\\t\\t      ')",
  "(73677, Token.Text, 'if')",
  "(73679, Token.Text.Whitespace, ' ')",
  "(73680, Token.Text, 'test')",
  "(73684, Token.Text.Whitespace, ' ')",
  "(73685, Token.Text, '-z')",
  "(73687, Token.Text.Whitespace, ' ')",
  "(73688, Token.Literal.String.Double, '\"$old_library\"')",
  "(73702, Token.Text.Whitespace, ' ')",
  "(73703, Token.Text, ';')",
  "(73704, Token.Text.Whitespace, ' ')",
  "(73705, Token.Text, 'then')",
  "(73709, Token.Text.NewLine, '\\n')",
  "(73710, Token.Text.Whitespace, '\\t\\t        ')",
  "(73720, Token.Text, '$echo')",
  "(73725, Token.Text.NewLine, '\\n')",
  "(73726, Token.Text.Whitespace, '\\t\\t        ')",
  "(73736, Token.Text, '$echo')",
  "(73741, Token.Text.Whitespace, ' ')",
  "(73742, Token.Literal.String.Double, '\"** And there doesn\\'t seem to be a static archive available\"')",
  "(73802, Token.Text.NewLine, '\\n')",
  "(73803, Token.Text.Whitespace, '\\t\\t        ')",
  "(73813, Token.Text, '$echo')",
  "(73818, Token.Text.Whitespace, ' ')",
  "(73819, Token.Literal.String.Double, '\"** The link will probably fail, sorry\"')",
  "(73858, Token.Text.NewLine, '\\n')",
  "(73859, Token.Text.Whitespace, '\\t\\t      ')",
  "(73867, Token.Text, 'else')",
  "(73871, Token.Text.NewLine, '\\n')",
  "(73872, Token.Text.Whitespace, '\\t\\t        ')",
  "(73882, Token.Text, 'add=\"$dir/$old_library\"')",
  "(73905, Token.Text.NewLine, '\\n')",
  "(73906, Token.Text.Whitespace, '\\t\\t      ')",
  "(73914, Token.Text, 'fi')",
  "(73916, Token.Text.NewLine, '\\n')",
  "(73917, Token.Text.Whitespace, '\\t\\t    ')",
  "(73923, Token.Text, 'fi')",
  "(73925, Token.Text.NewLine, '\\n')",
  "(73926, Token.Text.Whitespace, '\\t\\t')",
  "(73928, Token.Text, 'esac')",
  "(73932, Token.Text.NewLine, '\\n')",
  "(73933, Token.Text.Whitespace, '\\t      ')",
  "(73940, Token.Text, 'elif')",
  "(73944, Token.Text.Whitespace, ' ')",
  "(73945, Token.Text, 'test')",
  "(73949, Token.Text.Whitespace, ' ')",
  "(73950, Token.Literal.String.Double, '\"$hardcode_minus_L\"')",
  "(73969, Token.Text.Whitespace, ' ')",
  "(73970, Token.Text, '=')",
  "(73971, Token.Text.Whitespace, ' ')",
  "(73972, Token.Text, 'no;')",
  "(73975, Token.Text.Whitespace, ' ')",
  "(73976, Token.Text, 'then')",
  "(73980, Token.Text.NewLine, '\\n')",
  "(73981, Token.Text.Whitespace, '\\t\\t')",
  "(73983, Token.Text, 'case')",
  "(73987, Token.Text.Whitespace, ' ')",
  "(73988, Token.Text, '$host')",
  "(73993, Token.Text.Whitespace, ' ')",
  "(73994, Token.Text, 'in')",
  "(73996, Token.Text.NewLine, '\\n')",
  "(73997, Token.Text.Whitespace, '\\t\\t')",
  "(73999, Token.Text, '*-*-sunos*)')",
  "(74010, Token.Text.Whitespace, ' ')",
  "(74011, Token.Text, 'add_shlibpath=\"$dir\"')",
  "(74031, Token.Text.Whitespace, ' ')",
  "(74032, Token.Text, ';;')",
  "(74034, Token.Text.NewLine, '\\n')",
  "(74035, Token.Text.Whitespace, '\\t\\t')",
  "(74037, Token.Text, 'esac')",
  "(74041, Token.Text.NewLine, '\\n')",
  "(74042, Token.Text.Whitespace, '\\t\\t')",
  "(74044, Token.Text, 'add_dir=\"-L$dir\"')",
  "(74060, Token.Text.NewLine, '\\n')",
  "(74061, Token.Text.Whitespace, '\\t\\t')",
  "(74063, Token.Text, 'add=\"-l$name\"')",
  "(74076, Token.Text.NewLine, '\\n')",
  "(74077, Token.Text.Whitespace, '\\t      ')",
  "(74084, Token.Text, 'elif')",
  "(74088, Token.Text.Whitespace, ' ')",
  "(74089, Token.Text, 'test')",
  "(74093, Token.Text.Whitespace, ' ')",
  "(74094, Token.Literal.String.Double, '\"$hardcode_shlibpath_var\"')",
  "(74119, Token.Text.Whitespace, ' ')",
  "(74120, Token.Text, '=')",
  "(74121, Token.Text.Whitespace, ' ')",
  "(74122, Token.Text, 'no;')",
  "(74125, Token.Text.Whitespace, ' ')",
  "(74126, Token.Text, 'then')",
  "(74130, Token.Text.NewLine, '\\n')",
  "(74131, Token.Text.Whitespace, '\\t\\t')",
  "(74133, Token.Text, 'add_shlibpath=\"$dir\"')",
  "(74153, Token.Text.NewLine, '\\n')",
  "(74154, Token.Text.Whitespace, '\\t\\t')",
  "(74156, Token.Text, 'add=\"-l$name\"')",
  "(74169, Token.Text.NewLine, '\\n')",
  "(74170, Token.Text.Whitespace, '\\t      ')",
  "(74177, Token.Text, 'else')",
  "(74181, Token.Text.NewLine, '\\n')",
  "(74182, Token.Text.Whitespace, '\\t\\t')",
  "(74184, Token.Text, 'lib_linked=no')",
  "(74197, Token.Text.NewLine, '\\n')",
  "(74198, Token.Text.Whitespace, '\\t      ')",
  "(74205, Token.Text, 'fi')",
  "(74207, Token.Text.NewLine, '\\n')",
  "(74208, Token.Text.Whitespace, '\\t      ')",
  "(74215, Token.Text, ';;')",
  "(74217, Token.Text.NewLine, '\\n')",
  "(74218, Token.Text.Whitespace, '\\t    ')",
  "(74223, Token.Text, 'relink)')",
  "(74230, Token.Text.NewLine, '\\n')",
  "(74231, Token.Text.Whitespace, '\\t      ')",
  "(74238, Token.Text, 'if')",
  "(74240, Token.Text.Whitespace, ' ')",
  "(74241, Token.Text, 'test')",
  "(74245, Token.Text.Whitespace, ' ')",
  "(74246, Token.Literal.String.Double, '\"$hardcode_direct\"')",
  "(74264, Token.Text.Whitespace, ' ')",
  "(74265, Token.Text, '=')",
  "(74266, Token.Text.Whitespace, ' ')",
  "(74267, Token.Text, 'yes;')",
  "(74271, Token.Text.Whitespace, ' ')",
  "(74272, Token.Text, 'then')",
  "(74276, Token.Text.NewLine, '\\n')",
  "(74277, Token.Text.Whitespace, '\\t\\t')",
  "(74279, Token.Text, 'add=\"$dir/$linklib\"')",
  "(74298, Token.Text.NewLine, '\\n')",
  "(74299, Token.Text.Whitespace, '\\t      ')",
  "(74306, Token.Text, 'elif')",
  "(74310, Token.Text.Whitespace, ' ')",
  "(74311, Token.Text, 'test')",
  "(74315, Token.Text.Whitespace, ' ')",
  "(74316, Token.Literal.String.Double, '\"$hardcode_minus_L\"')",
  "(74335, Token.Text.Whitespace, ' ')",
  "(74336, Token.Text, '=')",
  "(74337, Token.Text.Whitespace, ' ')",
  "(74338, Token.Text, 'yes;')",
  "(74342, Token.Text.Whitespace, ' ')",
  "(74343, Token.Text, 'then')",
  "(74347, Token.Text.NewLine, '\\n')",
  "(74348, Token.Text.Whitespace, '\\t\\t')",
  "(74350, Token.Text, 'add_dir=\"-L$dir\"')",
  "(74366, Token.Text.NewLine, '\\n')",
  "(74367, Token.Text.Whitespace, '\\t\\t')",
  "(74369, Token.Comment.Single, \"# Try looking first in the location we're being installed to.\")",
  "(74430, Token.Text.NewLine, '\\n')",
  "(74431, Token.Text.Whitespace, '\\t\\t')",
  "(74433, Token.Text, 'if')",
  "(74435, Token.Text.Whitespace, ' ')",
  "(74436, Token.Text, 'test')",
  "(74440, Token.Text.Whitespace, ' ')",
  "(74441, Token.Text, '-n')",
  "(74443, Token.Text.Whitespace, ' ')",
  "(74444, Token.Literal.String.Double, '\"$inst_prefix_dir\"')",
  "(74462, Token.Text, ';')",
  "(74463, Token.Text.Whitespace, ' ')",
  "(74464, Token.Text, 'then')",
  "(74468, Token.Text.NewLine, '\\n')",
  "(74469, Token.Text.Whitespace, '\\t\\t  ')",
  "(74473, Token.Text, 'case')",
  "(74477, Token.Text.Whitespace, ' ')",
  "(74478, Token.Text, '$libdir')",
  "(74485, Token.Text.Whitespace, ' ')",
  "(74486, Token.Text, 'in')",
  "(74488, Token.Text.NewLine, '\\n')",
  "(74489, Token.Text.Whitespace, '\\t\\t    ')",
  "(74495, Token.Text, '[\\\\\\\\/]*)')",
  "(74502, Token.Text.NewLine, '\\n')",
  "(74503, Token.Text.Whitespace, '\\t\\t      ')",
  "(74511, Token.Text, 'add_dir=\"$add_dir')",
  "(74528, Token.Text.Whitespace, ' ')",
  "(74529, Token.Text, '-L$inst_prefix_dir$libdir\"')",
  "(74555, Token.Text.NewLine, '\\n')",
  "(74556, Token.Text.Whitespace, '\\t\\t      ')",
  "(74564, Token.Text, ';;')",
  "(74566, Token.Text.NewLine, '\\n')",
  "(74567, Token.Text.Whitespace, '\\t\\t  ')",
  "(74571, Token.Text, 'esac')",
  "(74575, Token.Text.NewLine, '\\n')",
  "(74576, Token.Text.Whitespace, '\\t\\t')",
  "(74578, Token.Text, 'fi')",
  "(74580, Token.Text.NewLine, '\\n')",
  "(74581, Token.Text.Whitespace, '\\t\\t')",
  "(74583, Token.Text, 'add=\"-l$name\"')",
  "(74596, Token.Text.NewLine, '\\n')",
  "(74597, Token.Text.Whitespace, '\\t      ')",
  "(74604, Token.Text, 'elif')",
  "(74608, Token.Text.Whitespace, ' ')",
  "(74609, Token.Text, 'test')",
  "(74613, Token.Text.Whitespace, ' ')",
  "(74614, Token.Literal.String.Double, '\"$hardcode_shlibpath_var\"')",
  "(74639, Token.Text.Whitespace, ' ')",
  "(74640, Token.Text, '=')",
  "(74641, Token.Text.Whitespace, ' ')",
  "(74642, Token.Text, 'yes;')",
  "(74646, Token.Text.Whitespace, ' ')",
  "(74647, Token.Text, 'then')",
  "(74651, Token.Text.NewLine, '\\n')",
  "(74652, Token.Text.Whitespace, '\\t\\t')",
  "(74654, Token.Text, 'add_shlibpath=\"$dir\"')",
  "(74674, Token.Text.NewLine, '\\n')",
  "(74675, Token.Text.Whitespace, '\\t\\t')",
  "(74677, Token.Text, 'add=\"-l$name\"')",
  "(74690, Token.Text.NewLine, '\\n')",
  "(74691, Token.Text.Whitespace, '\\t      ')",
  "(74698, Token.Text, 'else')",
  "(74702, Token.Text.NewLine, '\\n')",
  "(74703, Token.Text.Whitespace, '\\t\\t')",
  "(74705, Token.Text, 'lib_linked=no')",
  "(74718, Token.Text.NewLine, '\\n')",
  "(74719, Token.Text.Whitespace, '\\t      ')",
  "(74726, Token.Text, 'fi')",
  "(74728, Token.Text.NewLine, '\\n')",
  "(74729, Token.Text.Whitespace, '\\t      ')",
  "(74736, Token.Text, ';;')",
  "(74738, Token.Text.NewLine, '\\n')",
  "(74739, Token.Text.Whitespace, '\\t    ')",
  "(74744, Token.Text, '*)')",
  "(74746, Token.Text.Whitespace, ' ')",
  "(74747, Token.Text, 'lib_linked=no')",
  "(74760, Token.Text.Whitespace, ' ')",
  "(74761, Token.Text, ';;')",
  "(74763, Token.Text.NewLine, '\\n')",
  "(74764, Token.Text.Whitespace, '\\t    ')",
  "(74769, Token.Text, 'esac')",
  "(74773, Token.Text.NewLine, '\\n\\n')",
  "(74775, Token.Text.Whitespace, '\\t    ')",
  "(74780, Token.Text, 'if')",
  "(74782, Token.Text.Whitespace, ' ')",
  "(74783, Token.Text, 'test')",
  "(74787, Token.Text.Whitespace, ' ')",
  "(74788, Token.Literal.String.Double, '\"$lib_linked\"')",
  "(74801, Token.Text.Whitespace, ' ')",
  "(74802, Token.Text, '!=')",
  "(74804, Token.Text.Whitespace, ' ')",
  "(74805, Token.Text, 'yes;')",
  "(74809, Token.Text.Whitespace, ' ')",
  "(74810, Token.Text, 'then')",
  "(74814, Token.Text.NewLine, '\\n')",
  "(74815, Token.Text.Whitespace, '\\t      ')",
  "(74822, Token.Text, '$echo')",
  "(74827, Token.Text.Whitespace, ' ')",
  "(74828, Token.Literal.String.Double, '\"$modename: configuration error: unsupported hardcode properties\"')",
  "(74893, Token.Text.NewLine, '\\n')",
  "(74894, Token.Text.Whitespace, '\\t      ')",
  "(74901, Token.Text, 'exit')",
  "(74905, Token.Text.Whitespace, ' ')",
  "(74906, Token.Text, '$EXIT_FAILURE')",
  "(74919, Token.Text.NewLine, '\\n')",
  "(74920, Token.Text.Whitespace, '\\t    ')",
  "(74925, Token.Text, 'fi')",
  "(74927, Token.Text.NewLine, '\\n\\n')",
  "(74929, Token.Text.Whitespace, '\\t    ')",
  "(74934, Token.Text, 'if')",
  "(74936, Token.Text.Whitespace, ' ')",
  "(74937, Token.Text, 'test')",
  "(74941, Token.Text.Whitespace, ' ')",
  "(74942, Token.Text, '-n')",
  "(74944, Token.Text.Whitespace, ' ')",
  "(74945, Token.Literal.String.Double, '\"$add_shlibpath\"')",
  "(74961, Token.Text, ';')",
  "(74962, Token.Text.Whitespace, ' ')",
  "(74963, Token.Text, 'then')",
  "(74967, Token.Text.NewLine, '\\n')",
  "(74968, Token.Text.Whitespace, '\\t      ')",
  "(74975, Token.Text, 'case')",
  "(74979, Token.Text.Whitespace, ' ')",
  "(74980, Token.Text, ':$compile_shlibpath:')",
  "(75000, Token.Text.Whitespace, ' ')",
  "(75001, Token.Text, 'in')",
  "(75003, Token.Text.NewLine, '\\n')",
  "(75004, Token.Text.Whitespace, '\\t      ')",
  "(75011, Token.Text, '*\":$add_shlibpath:\"*)')",
  "(75032, Token.Text.Whitespace, ' ')",
  "(75033, Token.Text, ';;')",
  "(75035, Token.Text.NewLine, '\\n')",
  "(75036, Token.Text.Whitespace, '\\t      ')",
  "(75043, Token.Text, '*)')",
  "(75045, Token.Text.Whitespace, ' ')",
  "(75046, Token.Text, 'compile_shlibpath=\"$compile_shlibpath$add_shlibpath:\"')",
  "(75099, Token.Text.Whitespace, ' ')",
  "(75100, Token.Text, ';;')",
  "(75102, Token.Text.NewLine, '\\n')",
  "(75103, Token.Text.Whitespace, '\\t      ')",
  "(75110, Token.Text, 'esac')",
  "(75114, Token.Text.NewLine, '\\n')",
  "(75115, Token.Text.Whitespace, '\\t    ')",
  "(75120, Token.Text, 'fi')",
  "(75122, Token.Text.NewLine, '\\n')",
  "(75123, Token.Text.Whitespace, '\\t    ')",
  "(75128, Token.Text, 'if')",
  "(75130, Token.Text.Whitespace, ' ')",
  "(75131, Token.Text, 'test')",
  "(75135, Token.Text.Whitespace, ' ')",
  "(75136, Token.Literal.String.Double, '\"$linkmode\"')",
  "(75147, Token.Text.Whitespace, ' ')",
  "(75148, Token.Text, '=')",
  "(75149, Token.Text.Whitespace, ' ')",
  "(75150, Token.Text, 'prog;')",
  "(75155, Token.Text.Whitespace, ' ')",
  "(75156, Token.Text, 'then')",
  "(75160, Token.Text.NewLine, '\\n')",
  "(75161, Token.Text.Whitespace, '\\t      ')",
  "(75168, Token.Text, 'test')",
  "(75172, Token.Text.Whitespace, ' ')",
  "(75173, Token.Text, '-n')",
  "(75175, Token.Text.Whitespace, ' ')",
  "(75176, Token.Literal.String.Double, '\"$add_dir\"')",
  "(75186, Token.Text.Whitespace, ' ')",
  "(75187, Token.Text, '&&')",
  "(75189, Token.Text.Whitespace, ' ')",
  "(75190, Token.Text, 'compile_deplibs=\"$add_dir')",
  "(75215, Token.Text.Whitespace, ' ')",
  "(75216, Token.Text, '$compile_deplibs\"')",
  "(75233, Token.Text.NewLine, '\\n')",
  "(75234, Token.Text.Whitespace, '\\t      ')",
  "(75241, Token.Text, 'test')",
  "(75245, Token.Text.Whitespace, ' ')",
  "(75246, Token.Text, '-n')",
  "(75248, Token.Text.Whitespace, ' ')",
  "(75249, Token.Literal.String.Double, '\"$add\"')",
  "(75255, Token.Text.Whitespace, ' ')",
  "(75256, Token.Text, '&&')",
  "(75258, Token.Text.Whitespace, ' ')",
  "(75259, Token.Text, 'compile_deplibs=\"$add')",
  "(75280, Token.Text.Whitespace, ' ')",
  "(75281, Token.Text, '$compile_deplibs\"')",
  "(75298, Token.Text.NewLine, '\\n')",
  "(75299, Token.Text.Whitespace, '\\t    ')",
  "(75304, Token.Text, 'else')",
  "(75308, Token.Text.NewLine, '\\n')",
  "(75309, Token.Text.Whitespace, '\\t      ')",
  "(75316, Token.Text, 'test')",
  "(75320, Token.Text.Whitespace, ' ')",
  "(75321, Token.Text, '-n')",
  "(75323, Token.Text.Whitespace, ' ')",
  "(75324, Token.Literal.String.Double, '\"$add_dir\"')",
  "(75334, Token.Text.Whitespace, ' ')",
  "(75335, Token.Text, '&&')",
  "(75337, Token.Text.Whitespace, ' ')",
  "(75338, Token.Text, 'deplibs=\"$add_dir')",
  "(75355, Token.Text.Whitespace, ' ')",
  "(75356, Token.Text, '$deplibs\"')",
  "(75365, Token.Text.NewLine, '\\n')",
  "(75366, Token.Text.Whitespace, '\\t      ')",
  "(75373, Token.Text, 'test')",
  "(75377, Token.Text.Whitespace, ' ')",
  "(75378, Token.Text, '-n')",
  "(75380, Token.Text.Whitespace, ' ')",
  "(75381, Token.Literal.String.Double, '\"$add\"')",
  "(75387, Token.Text.Whitespace, ' ')",
  "(75388, Token.Text, '&&')",
  "(75390, Token.Text.Whitespace, ' ')",
  "(75391, Token.Text, 'deplibs=\"$add')",
  "(75404, Token.Text.Whitespace, ' ')",
  "(75405, Token.Text, '$deplibs\"')",
  "(75414, Token.Text.NewLine, '\\n')",
  "(75415, Token.Text.Whitespace, '\\t      ')",
  "(75422, Token.Text, 'if')",
  "(75424, Token.Text.Whitespace, ' ')",
  "(75425, Token.Text, 'test')",
  "(75429, Token.Text.Whitespace, ' ')",
  "(75430, Token.Literal.String.Double, '\"$hardcode_direct\"')",
  "(75448, Token.Text.Whitespace, ' ')",
  "(75449, Token.Text, '!=')",
  "(75451, Token.Text.Whitespace, ' ')",
  "(75452, Token.Text, 'yes')",
  "(75455, Token.Text.Whitespace, ' ')",
  "(75456, Token.Text, '&&')",
  "(75458, Token.Text.Whitespace, ' ')",
  "(75459, Token.Text, '\\\\')",
  "(75460, Token.Text.NewLine, '\\n')",
  "(75461, Token.Text.Whitespace, '\\t\\t ')",
  "(75464, Token.Text, 'test')",
  "(75468, Token.Text.Whitespace, ' ')",
  "(75469, Token.Literal.String.Double, '\"$hardcode_minus_L\"')",
  "(75488, Token.Text.Whitespace, ' ')",
  "(75489, Token.Text, '!=')",
  "(75491, Token.Text.Whitespace, ' ')",
  "(75492, Token.Text, 'yes')",
  "(75495, Token.Text.Whitespace, ' ')",
  "(75496, Token.Text, '&&')",
  "(75498, Token.Text.Whitespace, ' ')",
  "(75499, Token.Text, '\\\\')",
  "(75500, Token.Text.NewLine, '\\n')",
  "(75501, Token.Text.Whitespace, '\\t\\t ')",
  "(75504, Token.Text, 'test')",
  "(75508, Token.Text.Whitespace, ' ')",
  "(75509, Token.Literal.String.Double, '\"$hardcode_shlibpath_var\"')",
  "(75534, Token.Text.Whitespace, ' ')",
  "(75535, Token.Text, '=')",
  "(75536, Token.Text.Whitespace, ' ')",
  "(75537, Token.Text, 'yes;')",
  "(75541, Token.Text.Whitespace, ' ')",
  "(75542, Token.Text, 'then')",
  "(75546, Token.Text.NewLine, '\\n')",
  "(75547, Token.Text.Whitespace, '\\t\\t')",
  "(75549, Token.Text, 'case')",
  "(75553, Token.Text.Whitespace, ' ')",
  "(75554, Token.Text, ':$finalize_shlibpath:')",
  "(75575, Token.Text.Whitespace, ' ')",
  "(75576, Token.Text, 'in')",
  "(75578, Token.Text.NewLine, '\\n')",
  "(75579, Token.Text.Whitespace, '\\t\\t')",
  "(75581, Token.Text, '*\":$libdir:\"*)')",
  "(75595, Token.Text.Whitespace, ' ')",
  "(75596, Token.Text, ';;')",
  "(75598, Token.Text.NewLine, '\\n')",
  "(75599, Token.Text.Whitespace, '\\t\\t')",
  "(75601, Token.Text, '*)')",
  "(75603, Token.Text.Whitespace, ' ')",
  "(75604, Token.Text, 'finalize_shlibpath=\"$finalize_shlibpath$libdir:\"')",
  "(75652, Token.Text.Whitespace, ' ')",
  "(75653, Token.Text, ';;')",
  "(75655, Token.Text.NewLine, '\\n')",
  "(75656, Token.Text.Whitespace, '\\t\\t')",
  "(75658, Token.Text, 'esac')",
  "(75662, Token.Text.NewLine, '\\n')",
  "(75663, Token.Text.Whitespace, '\\t      ')",
  "(75670, Token.Text, 'fi')",
  "(75672, Token.Text.NewLine, '\\n')",
  "(75673, Token.Text.Whitespace, '\\t    ')",
  "(75678, Token.Text, 'fi')",
  "(75680, Token.Text.NewLine, '\\n')",
  "(75681, Token.Text.Whitespace, '\\t  ')",
  "(75684, Token.Text, 'fi')",
  "(75686, Token.Text.NewLine, '\\n\\n')",
  "(75688, Token.Text.Whitespace, '\\t  ')",
  "(75691, Token.Text, 'if')",
  "(75693, Token.Text.Whitespace, ' ')",
  "(75694, Token.Text, 'test')",
  "(75698, Token.Text.Whitespace, ' ')",
  "(75699, Token.Literal.String.Double, '\"$linkmode\"')",
  "(75710, Token.Text.Whitespace, ' ')",
  "(75711, Token.Text, '=')",
  "(75712, Token.Text.Whitespace, ' ')",
  "(75713, Token.Text, 'prog')",
  "(75717, Token.Text.Whitespace, ' ')",
  "(75718, Token.Text, '||')",
  "(75720, Token.Text.Whitespace, ' ')",
  "(75721, Token.Text, 'test')",
  "(75725, Token.Text.Whitespace, ' ')",
  "(75726, Token.Literal.String.Double, '\"$mode\"')",
  "(75733, Token.Text.Whitespace, ' ')",
  "(75734, Token.Text, '=')",
  "(75735, Token.Text.Whitespace, ' ')",
  "(75736, Token.Text, 'relink;')",
  "(75743, Token.Text.Whitespace, ' ')",
  "(75744, Token.Text, 'then')",
  "(75748, Token.Text.NewLine, '\\n')",
  "(75749, Token.Text.Whitespace, '\\t    ')",
  "(75754, Token.Text, 'add_shlibpath=')",
  "(75768, Token.Text.NewLine, '\\n')",
  "(75769, Token.Text.Whitespace, '\\t    ')",
  "(75774, Token.Text, 'add_dir=')",
  "(75782, Token.Text.NewLine, '\\n')",
  "(75783, Token.Text.Whitespace, '\\t    ')",
  "(75788, Token.Text, 'add=')",
  "(75792, Token.Text.NewLine, '\\n')",
  "(75793, Token.Text.Whitespace, '\\t    ')",
  "(75798, Token.Comment.Single, '# Finalize command for both is simple: just hardcode it.')",
  "(75854, Token.Text.NewLine, '\\n')",
  "(75855, Token.Text.Whitespace, '\\t    ')",
  "(75860, Token.Text, 'if')",
  "(75862, Token.Text.Whitespace, ' ')",
  "(75863, Token.Text, 'test')",
  "(75867, Token.Text.Whitespace, ' ')",
  "(75868, Token.Literal.String.Double, '\"$hardcode_direct\"')",
  "(75886, Token.Text.Whitespace, ' ')",
  "(75887, Token.Text, '=')",
  "(75888, Token.Text.Whitespace, ' ')",
  "(75889, Token.Text, 'yes;')",
  "(75893, Token.Text.Whitespace, ' ')",
  "(75894, Token.Text, 'then')",
  "(75898, Token.Text.NewLine, '\\n')",
  "(75899, Token.Text.Whitespace, '\\t      ')",
  "(75906, Token.Text, 'add=\"$libdir/$linklib\"')",
  "(75928, Token.Text.NewLine, '\\n')",
  "(75929, Token.Text.Whitespace, '\\t    ')",
  "(75934, Token.Text, 'elif')",
  "(75938, Token.Text.Whitespace, ' ')",
  "(75939, Token.Text, 'test')",
  "(75943, Token.Text.Whitespace, ' ')",
  "(75944, Token.Literal.String.Double, '\"$hardcode_minus_L\"')",
  "(75963, Token.Text.Whitespace, ' ')",
  "(75964, Token.Text, '=')",
  "(75965, Token.Text.Whitespace, ' ')",
  "(75966, Token.Text, 'yes;')",
  "(75970, Token.Text.Whitespace, ' ')",
  "(75971, Token.Text, 'then')",
  "(75975, Token.Text.NewLine, '\\n')",
  "(75976, Token.Text.Whitespace, '\\t      ')",
  "(75983, Token.Text, 'add_dir=\"-L$libdir\"')",
  "(76002, Token.Text.NewLine, '\\n')",
  "(76003, Token.Text.Whitespace, '\\t      ')",
  "(76010, Token.Text, 'add=\"-l$name\"')",
  "(76023, Token.Text.NewLine, '\\n')",
  "(76024, Token.Text.Whitespace, '\\t    ')",
  "(76029, Token.Text, 'elif')",
  "(76033, Token.Text.Whitespace, ' ')",
  "(76034, Token.Text, 'test')",
  "(76038, Token.Text.Whitespace, ' ')",
  "(76039, Token.Literal.String.Double, '\"$hardcode_shlibpath_var\"')",
  "(76064, Token.Text.Whitespace, ' ')",
  "(76065, Token.Text, '=')",
  "(76066, Token.Text.Whitespace, ' ')",
  "(76067, Token.Text, 'yes;')",
  "(76071, Token.Text.Whitespace, ' ')",
  "(76072, Token.Text, 'then')",
  "(76076, Token.Text.NewLine, '\\n')",
  "(76077, Token.Text.Whitespace, '\\t      ')",
  "(76084, Token.Text, 'case')",
  "(76088, Token.Text.Whitespace, ' ')",
  "(76089, Token.Text, ':$finalize_shlibpath:')",
  "(76110, Token.Text.Whitespace, ' ')",
  "(76111, Token.Text, 'in')",
  "(76113, Token.Text.NewLine, '\\n')",
  "(76114, Token.Text.Whitespace, '\\t      ')",
  "(76121, Token.Text, '*\":$libdir:\"*)')",
  "(76135, Token.Text.Whitespace, ' ')",
  "(76136, Token.Text, ';;')",
  "(76138, Token.Text.NewLine, '\\n')",
  "(76139, Token.Text.Whitespace, '\\t      ')",
  "(76146, Token.Text, '*)')",
  "(76148, Token.Text.Whitespace, ' ')",
  "(76149, Token.Text, 'finalize_shlibpath=\"$finalize_shlibpath$libdir:\"')",
  "(76197, Token.Text.Whitespace, ' ')",
  "(76198, Token.Text, ';;')",
  "(76200, Token.Text.NewLine, '\\n')",
  "(76201, Token.Text.Whitespace, '\\t      ')",
  "(76208, Token.Text, 'esac')",
  "(76212, Token.Text.NewLine, '\\n')",
  "(76213, Token.Text.Whitespace, '\\t      ')",
  "(76220, Token.Text, 'add=\"-l$name\"')",
  "(76233, Token.Text.NewLine, '\\n')",
  "(76234, Token.Text.Whitespace, '\\t    ')",
  "(76239, Token.Text, 'elif')",
  "(76243, Token.Text.Whitespace, ' ')",
  "(76244, Token.Text, 'test')",
  "(76248, Token.Text.Whitespace, ' ')",
  "(76249, Token.Literal.String.Double, '\"$hardcode_automatic\"')",
  "(76270, Token.Text.Whitespace, ' ')",
  "(76271, Token.Text, '=')",
  "(76272, Token.Text.Whitespace, ' ')",
  "(76273, Token.Text, 'yes;')",
  "(76277, Token.Text.Whitespace, ' ')",
  "(76278, Token.Text, 'then')",
  "(76282, Token.Text.NewLine, '\\n')",
  "(76283, Token.Text.Whitespace, '\\t      ')",
  "(76290, Token.Text, 'if')",
  "(76292, Token.Text.Whitespace, ' ')",
  "(76293, Token.Text, 'test')",
  "(76297, Token.Text.Whitespace, ' ')",
  "(76298, Token.Text, '-n')",
  "(76300, Token.Text.Whitespace, ' ')",
  "(76301, Token.Literal.String.Double, '\"$inst_prefix_dir\"')",
  "(76319, Token.Text.Whitespace, ' ')",
  "(76320, Token.Text, '&&')",
  "(76322, Token.Text.NewLine, '\\n')",
  "(76323, Token.Text.Whitespace, '\\t\\t ')",
  "(76326, Token.Text, 'test')",
  "(76330, Token.Text.Whitespace, ' ')",
  "(76331, Token.Text, '-f')",
  "(76333, Token.Text.Whitespace, ' ')",
  "(76334, Token.Literal.String.Double, '\"$inst_prefix_dir$libdir/$linklib\"')",
  "(76368, Token.Text.Whitespace, ' ')",
  "(76369, Token.Text, ';')",
  "(76370, Token.Text.Whitespace, ' ')",
  "(76371, Token.Text, 'then')",
  "(76375, Token.Text.NewLine, '\\n')",
  "(76376, Token.Text.Whitespace, '\\t        ')",
  "(76385, Token.Text, 'add=\"$inst_prefix_dir$libdir/$linklib\"')",
  "(76423, Token.Text.NewLine, '\\n')",
  "(76424, Token.Text.Whitespace, '\\t      ')",
  "(76431, Token.Text, 'else')",
  "(76435, Token.Text.NewLine, '\\n')",
  "(76436, Token.Text.Whitespace, '\\t        ')",
  "(76445, Token.Text, 'add=\"$libdir/$linklib\"')",
  "(76467, Token.Text.NewLine, '\\n')",
  "(76468, Token.Text.Whitespace, '\\t      ')",
  "(76475, Token.Text, 'fi')",
  "(76477, Token.Text.NewLine, '\\n')",
  "(76478, Token.Text.Whitespace, '\\t    ')",
  "(76483, Token.Text, 'else')",
  "(76487, Token.Text.NewLine, '\\n')",
  "(76488, Token.Text.Whitespace, '\\t      ')",
  "(76495, Token.Comment.Single, \"# We cannot seem to hardcode it, guess we'll fake it.\")",
  "(76548, Token.Text.NewLine, '\\n')",
  "(76549, Token.Text.Whitespace, '\\t      ')",
  "(76556, Token.Text, 'add_dir=\"-L$libdir\"')",
  "(76575, Token.Text.NewLine, '\\n')",
  "(76576, Token.Text.Whitespace, '\\t      ')",
  "(76583, Token.Comment.Single, \"# Try looking first in the location we're being installed to.\")",
  "(76644, Token.Text.NewLine, '\\n')",
  "(76645, Token.Text.Whitespace, '\\t      ')",
  "(76652, Token.Text, 'if')",
  "(76654, Token.Text.Whitespace, ' ')",
  "(76655, Token.Text, 'test')",
  "(76659, Token.Text.Whitespace, ' ')",
  "(76660, Token.Text, '-n')",
  "(76662, Token.Text.Whitespace, ' ')",
  "(76663, Token.Literal.String.Double, '\"$inst_prefix_dir\"')",
  "(76681, Token.Text, ';')",
  "(76682, Token.Text.Whitespace, ' ')",
  "(76683, Token.Text, 'then')",
  "(76687, Token.Text.NewLine, '\\n')",
  "(76688, Token.Text.Whitespace, '\\t\\t')",
  "(76690, Token.Text, 'case')",
  "(76694, Token.Text.Whitespace, ' ')",
  "(76695, Token.Text, '$libdir')",
  "(76702, Token.Text.Whitespace, ' ')",
  "(76703, Token.Text, 'in')",
  "(76705, Token.Text.NewLine, '\\n')",
  "(76706, Token.Text.Whitespace, '\\t\\t  ')",
  "(76710, Token.Text, '[\\\\\\\\/]*)')",
  "(76717, Token.Text.NewLine, '\\n')",
  "(76718, Token.Text.Whitespace, '\\t\\t    ')",
  "(76724, Token.Text, 'add_dir=\"$add_dir')",
  "(76741, Token.Text.Whitespace, ' ')",
  "(76742, Token.Text, '-L$inst_prefix_dir$libdir\"')",
  "(76768, Token.Text.NewLine, '\\n')",
  "(76769, Token.Text.Whitespace, '\\t\\t    ')",
  "(76775, Token.Text, ';;')",
  "(76777, Token.Text.NewLine, '\\n')",
  "(76778, Token.Text.Whitespace, '\\t\\t')",
  "(76780, Token.Text, 'esac')",
  "(76784, Token.Text.NewLine, '\\n')",
  "(76785, Token.Text.Whitespace, '\\t      ')",
  "(76792, Token.Text, 'fi')",
  "(76794, Token.Text.NewLine, '\\n')",
  "(76795, Token.Text.Whitespace, '\\t      ')",
  "(76802, Token.Text, 'add=\"-l$name\"')",
  "(76815, Token.Text.NewLine, '\\n')",
  "(76816, Token.Text.Whitespace, '\\t    ')",
  "(76821, Token.Text, 'fi')",
  "(76823, Token.Text.NewLine, '\\n\\n')",
  "(76825, Token.Text.Whitespace, '\\t    ')",
  "(76830, Token.Text, 'if')",
  "(76832, Token.Text.Whitespace, ' ')",
  "(76833, Token.Text, 'test')",
  "(76837, Token.Text.Whitespace, ' ')",
  "(76838, Token.Literal.String.Double, '\"$linkmode\"')",
  "(76849, Token.Text.Whitespace, ' ')",
  "(76850, Token.Text, '=')",
  "(76851, Token.Text.Whitespace, ' ')",
  "(76852, Token.Text, 'prog;')",
  "(76857, Token.Text.Whitespace, ' ')",
  "(76858, Token.Text, 'then')",
  "(76862, Token.Text.NewLine, '\\n')",
  "(76863, Token.Text.Whitespace, '\\t      ')",
  "(76870, Token.Text, 'test')",
  "(76874, Token.Text.Whitespace, ' ')",
  "(76875, Token.Text, '-n')",
  "(76877, Token.Text.Whitespace, ' ')",
  "(76878, Token.Literal.String.Double, '\"$add_dir\"')",
  "(76888, Token.Text.Whitespace, ' ')",
  "(76889, Token.Text, '&&')",
  "(76891, Token.Text.Whitespace, ' ')",
  "(76892, Token.Text, 'finalize_deplibs=\"$add_dir')",
  "(76918, Token.Text.Whitespace, ' ')",
  "(76919, Token.Text, '$finalize_deplibs\"')",
  "(76937, Token.Text.NewLine, '\\n')",
  "(76938, Token.Text.Whitespace, '\\t      ')",
  "(76945, Token.Text, 'test')",
  "(76949, Token.Text.Whitespace, ' ')",
  "(76950, Token.Text, '-n')",
  "(76952, Token.Text.Whitespace, ' ')",
  "(76953, Token.Literal.String.Double, '\"$add\"')",
  "(76959, Token.Text.Whitespace, ' ')",
  "(76960, Token.Text, '&&')",
  "(76962, Token.Text.Whitespace, ' ')",
  "(76963, Token.Text, 'finalize_deplibs=\"$add')",
  "(76985, Token.Text.Whitespace, ' ')",
  "(76986, Token.Text, '$finalize_deplibs\"')",
  "(77004, Token.Text.NewLine, '\\n')",
  "(77005, Token.Text.Whitespace, '\\t    ')",
  "(77010, Token.Text, 'else')",
  "(77014, Token.Text.NewLine, '\\n')",
  "(77015, Token.Text.Whitespace, '\\t      ')",
  "(77022, Token.Text, 'test')",
  "(77026, Token.Text.Whitespace, ' ')",
  "(77027, Token.Text, '-n')",
  "(77029, Token.Text.Whitespace, ' ')",
  "(77030, Token.Literal.String.Double, '\"$add_dir\"')",
  "(77040, Token.Text.Whitespace, ' ')",
  "(77041, Token.Text, '&&')",
  "(77043, Token.Text.Whitespace, ' ')",
  "(77044, Token.Text, 'deplibs=\"$add_dir')",
  "(77061, Token.Text.Whitespace, ' ')",
  "(77062, Token.Text, '$deplibs\"')",
  "(77071, Token.Text.NewLine, '\\n')",
  "(77072, Token.Text.Whitespace, '\\t      ')",
  "(77079, Token.Text, 'test')",
  "(77083, Token.Text.Whitespace, ' ')",
  "(77084, Token.Text, '-n')",
  "(77086, Token.Text.Whitespace, ' ')",
  "(77087, Token.Literal.String.Double, '\"$add\"')",
  "(77093, Token.Text.Whitespace, ' ')",
  "(77094, Token.Text, '&&')",
  "(77096, Token.Text.Whitespace, ' ')",
  "(77097, Token.Text, 'deplibs=\"$add')",
  "(77110, Token.Text.Whitespace, ' ')",
  "(77111, Token.Text, '$deplibs\"')",
  "(77120, Token.Text.NewLine, '\\n')",
  "(77121, Token.Text.Whitespace, '\\t    ')",
  "(77126, Token.Text, 'fi')",
  "(77128, Token.Text.NewLine, '\\n')",
  "(77129, Token.Text.Whitespace, '\\t  ')",
  "(77132, Token.Text, 'fi')",
  "(77134, Token.Text.NewLine, '\\n')",
  "(77135, Token.Text.Whitespace, '\\t')",
  "(77136, Token.Text, 'elif')",
  "(77140, Token.Text.Whitespace, ' ')",
  "(77141, Token.Text, 'test')",
  "(77145, Token.Text.Whitespace, ' ')",
  "(77146, Token.Literal.String.Double, '\"$linkmode\"')",
  "(77157, Token.Text.Whitespace, ' ')",
  "(77158, Token.Text, '=')",
  "(77159, Token.Text.Whitespace, ' ')",
  "(77160, Token.Text, 'prog;')",
  "(77165, Token.Text.Whitespace, ' ')",
  "(77166, Token.Text, 'then')",
  "(77170, Token.Text.NewLine, '\\n')",
  "(77171, Token.Text.Whitespace, '\\t  ')",
  "(77174, Token.Comment.Single, '# Here we assume that one of hardcode_direct or hardcode_minus_L')",
  "(77238, Token.Text.NewLine, '\\n')",
  "(77239, Token.Text.Whitespace, '\\t  ')",
  "(77242, Token.Comment.Single, '# is not unsupported.  This is valid on all known static and')",
  "(77302, Token.Text.NewLine, '\\n')",
  "(77303, Token.Text.Whitespace, '\\t  ')",
  "(77306, Token.Comment.Single, '# shared platforms.')",
  "(77325, Token.Text.NewLine, '\\n')",
  "(77326, Token.Text.Whitespace, '\\t  ')",
  "(77329, Token.Text, 'if')",
  "(77331, Token.Text.Whitespace, ' ')",
  "(77332, Token.Text, 'test')",
  "(77336, Token.Text.Whitespace, ' ')",
  "(77337, Token.Literal.String.Double, '\"$hardcode_direct\"')",
  "(77355, Token.Text.Whitespace, ' ')",
  "(77356, Token.Text, '!=')",
  "(77358, Token.Text.Whitespace, ' ')",
  "(77359, Token.Text, 'unsupported;')",
  "(77371, Token.Text.Whitespace, ' ')",
  "(77372, Token.Text, 'then')",
  "(77376, Token.Text.NewLine, '\\n')",
  "(77377, Token.Text.Whitespace, '\\t    ')",
  "(77382, Token.Text, 'test')",
  "(77386, Token.Text.Whitespace, ' ')",
  "(77387, Token.Text, '-n')",
  "(77389, Token.Text.Whitespace, ' ')",
  "(77390, Token.Literal.String.Double, '\"$old_library\"')",
  "(77404, Token.Text.Whitespace, ' ')",
  "(77405, Token.Text, '&&')",
  "(77407, Token.Text.Whitespace, ' ')",
  "(77408, Token.Text, 'linklib=\"$old_library\"')",
  "(77430, Token.Text.NewLine, '\\n')",
  "(77431, Token.Text.Whitespace, '\\t    ')",
  "(77436, Token.Text, 'compile_deplibs=\"$dir/$linklib')",
  "(77466, Token.Text.Whitespace, ' ')",
  "(77467, Token.Text, '$compile_deplibs\"')",
  "(77484, Token.Text.NewLine, '\\n')",
  "(77485, Token.Text.Whitespace, '\\t    ')",
  "(77490, Token.Text, 'finalize_deplibs=\"$dir/$linklib')",
  "(77521, Token.Text.Whitespace, ' ')",
  "(77522, Token.Text, '$finalize_deplibs\"')",
  "(77540, Token.Text.NewLine, '\\n')",
  "(77541, Token.Text.Whitespace, '\\t  ')",
  "(77544, Token.Text, 'else')",
  "(77548, Token.Text.NewLine, '\\n')",
  "(77549, Token.Text.Whitespace, '\\t    ')",
  "(77554, Token.Text, 'compile_deplibs=\"-l$name')",
  "(77578, Token.Text.Whitespace, ' ')",
  "(77579, Token.Text, '-L$dir')",
  "(77585, Token.Text.Whitespace, ' ')",
  "(77586, Token.Text, '$compile_deplibs\"')",
  "(77603, Token.Text.NewLine, '\\n')",
  "(77604, Token.Text.Whitespace, '\\t    ')",
  "(77609, Token.Text, 'finalize_deplibs=\"-l$name')",
  "(77634, Token.Text.Whitespace, ' ')",
  "(77635, Token.Text, '-L$dir')",
  "(77641, Token.Text.Whitespace, ' ')",
  "(77642, Token.Text, '$finalize_deplibs\"')",
  "(77660, Token.Text.NewLine, '\\n')",
  "(77661, Token.Text.Whitespace, '\\t  ')",
  "(77664, Token.Text, 'fi')",
  "(77666, Token.Text.NewLine, '\\n')",
  "(77667, Token.Text.Whitespace, '\\t')",
  "(77668, Token.Text, 'elif')",
  "(77672, Token.Text.Whitespace, ' ')",
  "(77673, Token.Text, 'test')",
  "(77677, Token.Text.Whitespace, ' ')",
  "(77678, Token.Literal.String.Double, '\"$build_libtool_libs\"')",
  "(77699, Token.Text.Whitespace, ' ')",
  "(77700, Token.Text, '=')",
  "(77701, Token.Text.Whitespace, ' ')",
  "(77702, Token.Text, 'yes;')",
  "(77706, Token.Text.Whitespace, ' ')",
  "(77707, Token.Text, 'then')",
  "(77711, Token.Text.NewLine, '\\n')",
  "(77712, Token.Text.Whitespace, '\\t  ')",
  "(77715, Token.Comment.Single, '# Not a shared library')",
  "(77737, Token.Text.NewLine, '\\n')",
  "(77738, Token.Text.Whitespace, '\\t  ')",
  "(77741, Token.Text, 'if')",
  "(77743, Token.Text.Whitespace, ' ')",
  "(77744, Token.Text, 'test')",
  "(77748, Token.Text.Whitespace, ' ')",
  "(77749, Token.Literal.String.Double, '\"$deplibs_check_method\"')",
  "(77772, Token.Text.Whitespace, ' ')",
  "(77773, Token.Text, '!=')",
  "(77775, Token.Text.Whitespace, ' ')",
  "(77776, Token.Text, 'pass_all;')",
  "(77785, Token.Text.Whitespace, ' ')",
  "(77786, Token.Text, 'then')",
  "(77790, Token.Text.NewLine, '\\n')",
  "(77791, Token.Text.Whitespace, '\\t    ')",
  "(77796, Token.Comment.Single, \"# We're trying link a shared library against a static one\")",
  "(77853, Token.Text.NewLine, '\\n')",
  "(77854, Token.Text.Whitespace, '\\t    ')",
  "(77859, Token.Comment.Single, \"# but the system doesn't support it.\")",
  "(77895, Token.Text.NewLine, '\\n\\n')"
]