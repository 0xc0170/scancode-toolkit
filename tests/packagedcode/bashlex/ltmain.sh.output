'# ltmain.sh - Provide generalized library-building support services.\n' Comment.Single

'# NOTE: Changing this file will not affect anything until you rerun configure.\n' Comment.Single

'#\n'         Comment.Single

'# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n' Comment.Single

'# Free Software Foundation, Inc.\n' Comment.Single

'# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n' Comment.Single

'#\n'         Comment.Single

'# This program is free software; you can redistribute it and/or modify\n' Comment.Single

'# it under the terms of the GNU General Public License as published by\n' Comment.Single

'# the Free Software Foundation; either version 2 of the License, or\n' Comment.Single

'# (at your option) any later version.\n' Comment.Single

'#\n'         Comment.Single

'# This program is distributed in the hope that it will be useful, but\n' Comment.Single

'# WITHOUT ANY WARRANTY; without even the implied warranty of\n' Comment.Single

'# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n' Comment.Single

'# General Public License for more details.\n' Comment.Single

'#\n'         Comment.Single

'# You should have received a copy of the GNU General Public License\n' Comment.Single

'# along with this program; if not, write to the Free Software\n' Comment.Single

'# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n' Comment.Single

'#\n'         Comment.Single

'# As a special exception to the GNU General Public License, if you\n' Comment.Single

'# distribute this file as part of a program that contains a\n' Comment.Single

'# configuration script generated by Autoconf, you may include it under\n' Comment.Single

'# the same distribution terms that you use for the rest of that program.\n' Comment.Single

'\n'          Text.NewLine

'basename'    Name.Variable
'='           Operator.Equal
'"s,^.*/,,g"' Literal.String.Double
'\n\n'        Text.NewLine

'# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n' Comment.Single

'# is ksh but when the shell is invoked as "sh" and the current value of\n' Comment.Single

'# the _XPG environment variable is not equal to 1 (one), the special\n' Comment.Single

'# positional parameter $0, within a function call, is the name of the\n' Comment.Single

'# function.\n' Comment.Single

'progpath'    Name.Variable
'='           Operator.Equal
'"$0"'        Literal.String.Double
'\n\n'        Text.NewLine

"# define SED for historic ltconfig's generated by Libtool 1.3\n" Comment.Single

'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$SED"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'SED=sed'     Text
'\n\n'        Text.NewLine

'# The name of this program:\n' Comment.Single

'progname'    Name.Variable
'='           Operator.Equal
'`echo'       Text
' '           Text.Whitespace
'"$progpath"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$SED'        Text
' '           Text.Whitespace
'$basename`'  Text
'\n'          Text.NewLine

'modename'    Name.Variable
'='           Operator.Equal
'"$progname"' Literal.String.Double
'\n\n'        Text.NewLine

'# Global variables:\n' Comment.Single

'EXIT_SUCCESS' Name.Variable
'='           Operator.Equal
'0'           Text
'\n'          Text.NewLine

'EXIT_FAILURE' Name.Variable
'='           Operator.Equal
'1'           Text
'\n\n'        Text.NewLine

'PROGRAM'     Name.Variable
'='           Operator.Equal
'ltmain.sh'   Text
'\n'          Text.NewLine

'PACKAGE'     Name.Variable
'='           Operator.Equal
'libtool'     Text
'\n'          Text.NewLine

'VERSION'     Name.Variable
'='           Operator.Equal
'1.5.22'      Text
'\n'          Text.NewLine

'TIMESTAMP'   Name.Variable
'='           Operator.Equal
'" (1.1220.2.365 2005/12/18 22:14:06)"' Literal.String.Double
'\n\n'        Text.NewLine

'# See if we are running on zsh, and set the options which allow our\n' Comment.Single

'# commands through without removal of \\ escapes.\n' Comment.Single

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"${ZSH_VERSION+set}"' Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'setopt'      Text
' '           Text.Whitespace
'NO_GLOB_SUBST' Text
'\n'          Text.NewLine

'fi'          Text
'\n'          Text.NewLine

'# Same for EGREP, and just to be sure, do LTCC as well\n' Comment.Single

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$EGREP"'   Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'X'           Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'EGREP=egrep' Text
'\n'          Text.NewLine

'fi'          Text
'\n'          Text.NewLine

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$LTCC"'    Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'X'           Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'LTCC=${CC-gcc}' Text
'\n'          Text.NewLine

'fi'          Text
'\n\n'        Text.NewLine

'# Check that we have a working $echo.\n' Comment.Single

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$1"'       Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'X--no-reexec;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'# Discard the --no-reexec flag, and continue.\n' Comment.Single

'  '          Text.Whitespace
'shift'       Text
'\n'          Text.NewLine

'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$1"'       Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'X--fallback-echo;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'# Avoid inline document here, it may be left over\n' Comment.Single

'  '          Text.Whitespace
':'           Text
'\n'          Text.NewLine

'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X`($echo \'\\t\') 2>/dev/null`"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
"'X\\t'"      Literal.String.Single
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'# Yippee, $echo works!\n' Comment.Single

'  '          Text.Whitespace
':'           Text
'\n'          Text.NewLine

'else'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'# Restart under the correct shell, and then maybe $echo will work.\n' Comment.Single

'  '          Text.Whitespace
'exec'        Text
' '           Text.Whitespace
'$SHELL'      Text
' '           Text.Whitespace
'"$progpath"' Literal.String.Double
' '           Text.Whitespace
'--no-reexec' Text
' '           Text.Whitespace
'${1+"$@"}'   Text
'\n'          Text.NewLine

'fi'          Text
'\n\n'        Text.NewLine

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$1"'       Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'X--fallback-echo;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'# used as fallback echo\n' Comment.Single

'  '          Text.Whitespace
'shift'       Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'cat'         Text
' '           Text.Whitespace
'<<EOF'       Text
'\n'          Text.NewLine

'$*'          Text
'\n'          Text.NewLine

'EOF'         Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_SUCCESS' Text
'\n'          Text.NewLine

'fi'          Text
'\n\n'        Text.NewLine

'default_mode' Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'help'        Name.Variable
'='           Operator.Equal
'"Try \\`$progname --help\' for more information."' Literal.String.Double
'\n'          Text.NewLine

'magic'       Name.Variable
'='           Operator.Equal
'"%%%MAGIC variable%%%"' Literal.String.Double
'\n'          Text.NewLine

'mkdir'       Name.Variable
'='           Operator.Equal
'"mkdir"'     Literal.String.Double
'\n'          Text.NewLine

'mv'          Name.Variable
'='           Operator.Equal
'"mv -f"'     Literal.String.Double
'\n'          Text.NewLine

'rm'          Name.Variable
'='           Operator.Equal
'"rm -f"'     Literal.String.Double
'\n\n'        Text.NewLine

'# Sed substitution that helps us do robust quoting.  It backslashifies\n' Comment.Single

'# metacharacters that are still active within double-quoted strings.\n' Comment.Single

'Xsed'        Name.Variable
'='           Operator.Equal
'"${SED}"'    Literal.String.Double
"' -e 1s/^X//'" Literal.String.Single
'\n'          Text.NewLine

'sed_quote_subst' Name.Variable
'='           Operator.Equal
'\'s/\\([\\\\`\\\\"$\\\\\\\\]\\)/\\\\\\1/g\'' Literal.String.Single
'\n'          Text.NewLine

'# test EBCDIC or ASCII\n' Comment.Single

'case'        Text
' '           Text.Whitespace
'`echo'       Text
' '           Text.Whitespace
'X|tr'        Text
' '           Text.Whitespace
'X'           Text
' '           Text.Whitespace
"'\\101'"     Literal.String.Single
'`'           Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

' '           Text.Whitespace
'A)'          Text
' '           Text.Whitespace
'# ASCII based system\n' Comment.Single

'    '        Text.Whitespace
'# \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n' Comment.Single

'  '          Text.Whitespace
"SP2NL='tr"   Text
' '           Text.Whitespace
'\\040'       Text
' '           Text.Whitespace
"\\012'"      Text
'\n'          Text.NewLine

'  '          Text.Whitespace
"NL2SP='tr"   Text
' '           Text.Whitespace
'\\015\\012'  Text
' '           Text.Whitespace
"\\040\\040'" Text
'\n'          Text.NewLine

'  '          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

' '           Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'# EBCDIC based system\n' Comment.Single

'  '          Text.Whitespace
"SP2NL='tr"   Text
' '           Text.Whitespace
'\\100'       Text
' '           Text.Whitespace
"\\n'"        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
"NL2SP='tr"   Text
' '           Text.Whitespace
'\\r\\n'      Text
' '           Text.Whitespace
"\\100\\100'" Text
'\n'          Text.NewLine

'  '          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'esac'        Text
'\n\n'        Text.NewLine

'# NLS nuisances.\n' Comment.Single

'# Only set LANG and LC_ALL to C if already set.\n' Comment.Single

'# These must not be set unconditionally because not all systems understand\n' Comment.Single

'# e.g. LANG=C (notably SCO).\n' Comment.Single

'# We save the old values to restore during execute mode.\n' Comment.Single

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"${LC_ALL+set}"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'set;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'save_LC_ALL="$LC_ALL";' Text
' '           Text.Whitespace
'LC_ALL=C;'   Text
' '           Text.Whitespace
'export'      Text
' '           Text.Whitespace
'LC_ALL'      Text
'\n'          Text.NewLine

'fi'          Text
'\n'          Text.NewLine

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"${LANG+set}"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'set;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'save_LANG="$LANG";' Text
' '           Text.Whitespace
'LANG=C;'     Text
' '           Text.Whitespace
'export'      Text
' '           Text.Whitespace
'LANG'        Text
'\n'          Text.NewLine

'fi'          Text
'\n\n'        Text.NewLine

'# Make sure IFS has a sensible default\n' Comment.Single

'lt_nl'       Name.Variable
'='           Operator.Equal
"'\n'"        Literal.String.Single
'\n'          Text.NewLine

'IFS'         Name.Variable
'='           Operator.Equal
'" \t$lt_nl"' Literal.String.Double
'\n\n'        Text.NewLine

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_old_libs"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: not configured to build any kind of library"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"Fatal configuration error.  See the $PACKAGE docs for more information."' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'fi'          Text
'\n\n'        Text.NewLine

'# Global variables.\n' Comment.Single

'mode'        Name.Variable
'='           Operator.Equal
'$default_mode' Text
'\n'          Text.NewLine

'nonopt'      Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'prev'        Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'prevopt'     Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'run'         Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'show'        Name.Variable
'='           Operator.Equal
'"$echo"'     Literal.String.Double
'\n'          Text.NewLine

'show_help'   Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'execute_dlfiles' Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'duplicate_deps' Name.Variable
'='           Operator.Equal
'no'          Text
'\n'          Text.NewLine

'preserve_args' Name.Variable
'='           Operator.Equal
'\n'          Text.NewLine

'lo2o'        Name.Variable
'='           Operator.Equal
'"s/\\\\.lo\\$/.${objext}/"' Literal.String.Double
'\n'          Text.NewLine

'o2lo'        Name.Variable
'='           Operator.Equal
'"s/\\\\.${objext}\\$/.lo/"' Literal.String.Double
'\n\n'        Text.NewLine

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$max_cmd_len"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'i=0'         Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'testring="ABCD"' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'new_result=' Text
'\n'          Text.NewLine

'  \n  '      Text.Whitespace
"# If test is not a shell built-in, we'll probably end up computing a\n" Comment.Single

'  '          Text.Whitespace
'# maximum length that is only half of the actual maximum length, but\n' Comment.Single

'  '          Text.Whitespace
"# we can't tell.\n" Comment.Single

'  '          Text.Whitespace
'while'       Text
' '           Text.Whitespace
'(test'       Text
' '           Text.Whitespace
'"X"'         Literal.String.Double
'`$SHELL'     Text
' '           Text.Whitespace
'$0'          Text
' '           Text.Whitespace
'--fallback-echo' Text
' '           Text.Whitespace
'"X$testring"' Literal.String.Double
' '           Text.Whitespace
'2>/dev/null`' Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'             ' Text.Whitespace
'='           Text
' '           Text.Whitespace
'"XX$testring"' Literal.String.Double
')'           Text
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
'2>&1'        Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'          '  Text.Whitespace
'new_result=`expr' Text
' '           Text.Whitespace
'"X$testring"' Literal.String.Double
' '           Text.Whitespace
':'           Text
' '           Text.Whitespace
'".*"'        Literal.String.Double
' '           Text.Whitespace
'2>&1`'       Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'          '  Text.Whitespace
'max_cmd_len="$new_result"' Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'          '  Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$i"'        Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'17'          Text
' '           Text.Whitespace
'# 1/2 MB should be enough\n' Comment.Single

'  '          Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'i=`expr'     Text
' '           Text.Whitespace
'$i'          Text
' '           Text.Whitespace
'+'           Text
' '           Text.Whitespace
'1`'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'testring="$testring$testring"' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'testring='   Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'# Add a significant safety factor because C++ compilers can tack on massive\n' Comment.Single

'  '          Text.Whitespace
'# amounts of additional arguments before passing them to the linker.\n' Comment.Single

'  '          Text.Whitespace
'# It appears as though 1/2 is a usable value.\n' Comment.Single

'  '          Text.Whitespace
'max_cmd_len=`expr' Text
' '           Text.Whitespace
'$max_cmd_len' Text
' '           Text.Whitespace
'\\/'         Text
' '           Text.Whitespace
'2`'          Text
'\n'          Text.NewLine

'fi'          Text
'\n\n'        Text.NewLine

'#####################################\n' Comment.Single

'# Shell function definitions:\n' Comment.Single

'# This seems to be the best place for them\n' Comment.Single

'\n'          Text.NewLine

'# func_mktempdir [string]\n' Comment.Single

"# Make a temporary directory that won't clash with other running\n" Comment.Single

'# libtool processes, and avoids race conditions if possible.  If\n' Comment.Single

'# given, STRING is the basename for that directory.\n' Comment.Single

'func_mktempdir' Text
' '           Text.Whitespace
'()'          Text
'\n'          Text.NewLine

'{'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_template="${TMPDIR-/tmp}/${1-$progname}"' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'":"'         Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
"# Return a directory name, but don't create it in dry-run mode\n" Comment.Single

'      '      Text.Whitespace
'my_tmpdir="${my_template}-$$"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# If mktemp works, use that first and foremost\n' Comment.Single

'      '      Text.Whitespace
'my_tmpdir=`mktemp' Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"${my_template}-XXXXXXXX"' Literal.String.Double
' '           Text.Whitespace
'2>/dev/null`' Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"$my_tmpdir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Failing that, at least try and use $RANDOM to avoid a race\n' Comment.Single

'\t'          Text.Whitespace
'my_tmpdir="${my_template}-${RANDOM-0}$$"' Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'save_mktempdir_umask=`umask`' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'umask'       Text
' '           Text.Whitespace
'0077'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$mkdir'      Text
' '           Text.Whitespace
'"$my_tmpdir"' Literal.String.Double
'\n'          Text.NewLine

'\t'          Text.Whitespace
'umask'       Text
' '           Text.Whitespace
'$save_mktempdir_umask' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
"# If we're not in dry-run mode, bomb out on failure\n" Comment.Single

'      '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"$my_tmpdir"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'{'           Text
'\n'          Text.NewLine

'        '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"cannot create temporary directory \\`$my_tmpdir\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'}'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"X$my_tmpdir"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
'\n'          Text.NewLine

'}'           Text
'\n\n\n'      Text.NewLine

'# func_win32_libid arg\n' Comment.Single

"# return the library type of file 'arg'\n" Comment.Single

'#\n'         Comment.Single

'# Need a lot of goo to handle *both* DLLs and import libs\n' Comment.Single

"# Has to be a shell function in order to 'eat' the argument\n" Comment.Single

'# that is supplied when $file_magic_command is called.\n' Comment.Single

'func_win32_libid' Text
' '           Text.Whitespace
'()'          Text
'\n'          Text.NewLine

'{'           Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'win32_libid_type="unknown"' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'win32_fileres=`file' Text
' '           Text.Whitespace
'-L'          Text
' '           Text.Whitespace
'$1'          Text
' '           Text.Whitespace
'2>/dev/null`' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$win32_fileres' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'*ar\\'       Text
' '           Text.Whitespace
'archive\\'   Text
' '           Text.Whitespace
'import\\'    Text
' '           Text.Whitespace
'library*)'   Text
' '           Text.Whitespace
'# definitely import\n' Comment.Single

'    '        Text.Whitespace
'win32_libid_type="x86' Text
' '           Text.Whitespace
'archive'     Text
' '           Text.Whitespace
'import"'     Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'*ar\\'       Text
' '           Text.Whitespace
'archive*)'   Text
' '           Text.Whitespace
'# could be an import, or static\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'$OBJDUMP'    Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'$1'          Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$SED'        Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'10q'"       Literal.String.Single
' '           Text.Whitespace
'2>/dev/null' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$EGREP'      Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'file format pe-i386(.*architecture: i386)?'" Literal.String.Single
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'win32_nmres=`eval' Text
' '           Text.Whitespace
'$NM'         Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'posix'       Text
' '           Text.Whitespace
'-A'          Text
' '           Text.Whitespace
'$1'          Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$SED'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'1,100{/ I /{s,.*,import,;p;q;};}'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$win32_nmres' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'import*)'    Text
'  '          Text.Whitespace
'win32_libid_type="x86' Text
' '           Text.Whitespace
'archive'     Text
' '           Text.Whitespace
'import";;'   Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'*)'          Text
'        '    Text.Whitespace
'win32_libid_type="x86' Text
' '           Text.Whitespace
'archive'     Text
' '           Text.Whitespace
'static";;'   Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'*DLL*)'      Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'win32_libid_type="x86' Text
' '           Text.Whitespace
'DLL"'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'*executable*)' Text
' '           Text.Whitespace
'# but shell scripts are "executable" too...\n' Comment.Single

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$win32_fileres' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*MS\\'       Text
' '           Text.Whitespace
'Windows\\'   Text
' '           Text.Whitespace
'PE\\'        Text
' '           Text.Whitespace
'Intel*)'     Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'win32_libid_type="x86' Text
' '           Text.Whitespace
'DLL"'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'$win32_libid_type' Text
'\n'          Text.NewLine

'}'           Text
'\n\n\n'      Text.NewLine

'# func_infer_tag arg\n' Comment.Single

'# Infer tagged configuration to use if any are available and\n' Comment.Single

'# if one wasn\'t chosen via the "--tag" command line option.\n' Comment.Single

'# Only attempt this if the compiler in the base compile\n' Comment.Single

"# command doesn't match the default compiler.\n" Comment.Single

"# arg is usually of the form 'gcc ...'\n" Comment.Single

'func_infer_tag' Text
' '           Text.Whitespace
'()'          Text
'\n'          Text.NewLine

'{'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$available_tags"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$tagname"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'CC_quoted='  Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'arg'         Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$CC;'        Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg="\\"$arg\\""' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'CC_quoted="$CC_quoted' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$@'          Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# Blanks in the command may have been stripped by the calling shell,\n' Comment.Single

'      '      Text.Whitespace
'# but not from the CC environment variable when configure was run.\n' Comment.Single

'      '      Text.Whitespace
'" $CC "'     Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"$CC "'      Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" `$echo $CC` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"`$echo $CC` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" $CC_quoted"' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"$CC_quoted "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" `$echo $CC_quoted` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"`$echo $CC_quoted` "' Literal.String.Double
'*)'          Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# Blanks at the start of $base_compile will cause this to fail\n' Comment.Single

'      '      Text.Whitespace
"# if we don't check for them as well.\n" Comment.Single

'      '      Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'for'         Text
' '           Text.Whitespace
'z'           Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$available_tags;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'grep'        Text
' '           Text.Whitespace
'"^# ### BEGIN LIBTOOL TAG CONFIG: $z$"' Literal.String.Double
' '           Text.Whitespace
'<'           Text
' '           Text.Whitespace
'"$progpath"' Literal.String.Double
' '           Text.Whitespace
'>'           Text
' '           Text.Whitespace
'/dev/null;'  Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Evaluate the configuration.\n' Comment.Single

'\t    '      Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"`${SED} -n -e \'/^# ### BEGIN LIBTOOL TAG CONFIG: \'$z\'$/,/^# ### END LIBTOOL TAG CONFIG: \'$z\'$/p\' < $progpath`"' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'CC_quoted='  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'arg'         Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$CC;'        Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Double-quote args containing other shell metacharacters.\n' Comment.Single

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'arg="\\"$arg\\""' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'CC_quoted="$CC_quoted' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"# user sometimes does CC=<HOST>-gcc so we need to match that to 'gcc'\n" Comment.Single

'\t    '      Text.Whitespace
'trimedcc=`echo' Text
' '           Text.Whitespace
'${CC}'       Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$SED'        Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"s/${host}-//g"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# and sometimes libtool has CC=<HOST>-gcc but user does CC=gcc\n' Comment.Single

'\t    '      Text.Whitespace
'extendcc=${host}-${CC}' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# and sometimes libtool has CC=<OLDHOST>-gcc but user has CC=<NEWHOST>-gcc  \n' Comment.Single

'\t    '      Text.Whitespace
'# (Gentoo-specific hack because we always export $CHOST)\n' Comment.Single

'\t    '      Text.Whitespace
'mungedcc=${CHOST-${host}}-${trimedcc}' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$@ "'       Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'"cc "'       Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" cc "'      Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"${host}-cc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" ${host}-cc "' Literal.String.Double
'*|\\'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'"gcc "'      Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" gcc "'     Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"${host}-gcc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" ${host}-gcc "' Literal.String.Double
'*)'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'tagname=CC'  Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'break'       Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'"$trimedcc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" $trimedcc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"`$echo $trimedcc` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" `$echo $trimedcc` "' Literal.String.Double
'*|\\'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'"$extendcc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" $extendcc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"`$echo $extendcc` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" `$echo $extendcc` "' Literal.String.Double
'*|\\'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'"$mungedcc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" $mungedcc "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"`$echo $mungedcc` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" `$echo $mungedcc` "' Literal.String.Double
'*|\\'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'" $CC "'     Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"$CC "'      Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" `$echo $CC` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"`$echo $CC` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" $CC_quoted"' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"$CC_quoted "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'" `$echo $CC_quoted` "' Literal.String.Double
'*'           Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'"`$echo $CC_quoted` "' Literal.String.Double
'*)'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# The compiler in the base compile command matches\n' Comment.Single

'\t      '    Text.Whitespace
'# the one in the tagged configuration.\n' Comment.Single

'\t      '    Text.Whitespace
'# Assume this is the tagged configuration we want.\n' Comment.Single

'\t      '    Text.Whitespace
'tagname=$z'  Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'break'       Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
"# If $tagname still isn't set, then no tagged configuration\n" Comment.Single

'\t'          Text.Whitespace
'# was found and let the user know that the "--tag" command\n' Comment.Single

'\t'          Text.Whitespace
'# line option must be used.\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$tagname"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: unable to infer tagged configuration"' Literal.String.Double
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: specify a tag with \\`--tag\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'#        else\n' Comment.Single

'#          $echo "$modename: using $tagname tagged configuration"\n' Comment.Single

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'}'           Text
'\n\n\n'      Text.NewLine

'# func_extract_an_archive dir oldlib\n' Comment.Single

'func_extract_an_archive' Text
' '           Text.Whitespace
'()'          Text
'\n'          Text.NewLine

'{'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'f_ex_an_ar_dir="$1";' Text
' '           Text.Whitespace
'shift'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'f_ex_an_ar_oldlib="$1"' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"(cd $f_ex_an_ar_dir && $AR x $f_ex_an_ar_oldlib)"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"(cd \\$f_ex_an_ar_dir && $AR x \\$f_ex_an_ar_oldlib)"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$?'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'($AR'        Text
' '           Text.Whitespace
't'           Text
' '           Text.Whitespace
'"$f_ex_an_ar_oldlib"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'sort'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'sort'        Text
' '           Text.Whitespace
'-uc'         Text
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
'2>&1);'      Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'     '       Text.Whitespace
':'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: ERROR: object name conflicts: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'}'           Text
'\n\n'        Text.NewLine

'# func_extract_archives gentop oldlib ...\n' Comment.Single

'func_extract_archives' Text
' '           Text.Whitespace
'()'          Text
'\n'          Text.NewLine

'{'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_gentop="$1";' Text
' '           Text.Whitespace
'shift'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_oldlibs=${1+"$@"}' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_oldobjs=""' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_xlib=""'  Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_xabs=""'  Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_xdir=""'  Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_status=""' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"${rm}r $my_gentop"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'${rm}r'      Text
' '           Text.Whitespace
'"$my_gentop"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$mkdir $my_gentop"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$mkdir'      Text
' '           Text.Whitespace
'"$my_gentop"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'my_status=$?' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$my_status"' Literal.String.Double
' '           Text.Whitespace
'-ne'         Text
' '           Text.Whitespace
'0'           Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"$my_gentop"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$my_status'  Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'my_xlib'     Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$my_oldlibs;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# Extract the objects.\n' Comment.Single

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$my_xlib'    Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'[\\\\/]*'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'[A-Za-z]:[\\\\/]*)' Text
' '           Text.Whitespace
'my_xabs="$my_xlib"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'my_xabs=`pwd`"/$my_xlib"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'my_xlib=`$echo' Text
' '           Text.Whitespace
'"X$my_xlib"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%^.*/%%'"  Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'my_xdir="$my_gentop/$my_xlib"' Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"${rm}r $my_xdir"' Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'${rm}r'      Text
' '           Text.Whitespace
'"$my_xdir"'  Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$mkdir $my_xdir"' Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$mkdir'      Text
' '           Text.Whitespace
'"$my_xdir"'  Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit_status=$?' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$exit_status"' Literal.String.Double
' '           Text.Whitespace
'-ne'         Text
' '           Text.Whitespace
'0'           Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"$my_xdir"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$exit_status' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'*-darwin*)'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"Extracting $my_xabs"' Literal.String.Double
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Do not bother doing anything if just a dry run\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'darwin_orig_dir=`pwd`' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'cd'          Text
' '           Text.Whitespace
'$my_xdir'    Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$?'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'darwin_archive=$my_xabs' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'darwin_curdir=`pwd`' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'darwin_base_archive=`$echo' Text
' '           Text.Whitespace
'"X$darwin_archive"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%^.*/%%'"  Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'darwin_arches=`lipo' Text
' '           Text.Whitespace
'-info'       Text
' '           Text.Whitespace
'"$darwin_archive"' Literal.String.Double
' '           Text.Whitespace
'2>/dev/null' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$EGREP'      Text
' '           Text.Whitespace
'Architectures' Text
' '           Text.Whitespace
'2>/dev/null`' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$darwin_arches"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
' \n\t    '   Text.Whitespace
'darwin_arches=`echo' Text
' '           Text.Whitespace
'"$darwin_arches"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$SED'        Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/.*are://'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'darwin_arch=' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$darwin_base_archive has multiple architectures $darwin_arches"' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'darwin_arch' Text
' '           Text.Whitespace
'in'          Text
'  '          Text.Whitespace
'$darwin_arches' Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'mkdir'       Text
' '           Text.Whitespace
'-p'          Text
' '           Text.Whitespace
'"unfat-$$/${darwin_base_archive}-${darwin_arch}"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'lipo'        Text
' '           Text.Whitespace
'-thin'       Text
' '           Text.Whitespace
'$darwin_arch' Text
' '           Text.Whitespace
'-output'     Text
' '           Text.Whitespace
'"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}"' Literal.String.Double
' '           Text.Whitespace
'"${darwin_archive}"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'cd'          Text
' '           Text.Whitespace
'"unfat-$$/${darwin_base_archive}-${darwin_arch}"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'func_extract_an_archive' Text
' '           Text.Whitespace
'"`pwd`"'     Literal.String.Double
' '           Text.Whitespace
'"${darwin_base_archive}"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'cd'          Text
' '           Text.Whitespace
'"$darwin_curdir"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}"' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'done'        Text
' '           Text.Whitespace
'# $darwin_arches\n' Comment.Single

'      '      Text.Whitespace
'## Okay now we have a bunch of thin objects, gotta fatten them up :)\n' Comment.Single

'\t    '      Text.Whitespace
'darwin_filelist=`find' Text
' '           Text.Whitespace
'unfat-$$'    Text
' '           Text.Whitespace
'-type'       Text
' '           Text.Whitespace
'f'           Text
' '           Text.Whitespace
'-name'       Text
' '           Text.Whitespace
'\\*.o'       Text
' '           Text.Whitespace
'-print'      Text
' '           Text.Whitespace
'-o'          Text
' '           Text.Whitespace
'-name'       Text
' '           Text.Whitespace
'\\*.lo'      Text
' '           Text.Whitespace
'-print|'     Text
' '           Text.Whitespace
'xargs'       Text
' '           Text.Whitespace
'basename'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'sort'        Text
' '           Text.Whitespace
'-u'          Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$NL2SP`'     Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'darwin_file=' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'darwin_files=' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'darwin_file' Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$darwin_filelist;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'darwin_files=`find' Text
' '           Text.Whitespace
'unfat-$$'    Text
' '           Text.Whitespace
'-name'       Text
' '           Text.Whitespace
'$darwin_file' Text
' '           Text.Whitespace
'-print'      Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$NL2SP`'     Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'lipo'        Text
' '           Text.Whitespace
'-create'     Text
' '           Text.Whitespace
'-output'     Text
' '           Text.Whitespace
'"$darwin_file"' Literal.String.Double
' '           Text.Whitespace
'$darwin_files' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'done'        Text
' '           Text.Whitespace
'# $darwin_filelist\n' Comment.Single

'\t    '      Text.Whitespace
'${rm}r'      Text
' '           Text.Whitespace
'unfat-$$'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'cd'          Text
' '           Text.Whitespace
'"$darwin_orig_dir"' Literal.String.Double
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'cd'          Text
' '           Text.Whitespace
'"$darwin_orig_dir"' Literal.String.Double
'\n'          Text.NewLine

' \t    '     Text.Whitespace
'func_extract_an_archive' Text
' '           Text.Whitespace
'"$my_xdir"'  Literal.String.Double
' '           Text.Whitespace
'"$my_xabs"'  Literal.String.Double
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $darwin_arches\n' Comment.Single

'\t'          Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $run\n'    Comment.Single

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'        '    Text.Whitespace
'func_extract_an_archive' Text
' '           Text.Whitespace
'"$my_xdir"'  Literal.String.Double
' '           Text.Whitespace
'"$my_xabs"'  Literal.String.Double
'\n'          Text.NewLine

'        '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'my_oldobjs="$my_oldobjs' Text
' '           Text.Whitespace
'"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n    done\n    func_extract_archives_result="' Literal.String.Double
'$my_oldobjs"' Text
'\n'          Text.NewLine

'}'           Text
'\n'          Text.NewLine

'# End of Shell function definitions\n' Comment.Single

'#####################################\n' Comment.Single

'\n'          Text.NewLine

'# Darwin sucks\n' Comment.Single

'eval'        Text
' '           Text.Whitespace
'std_shrext=\\"$shrext_cmds\\"' Text
'\n\n'        Text.NewLine

'disable_libs' Name.Variable
'='           Operator.Equal
'no'          Text
'\n\n'        Text.NewLine

'# Parse our command line options once, thoroughly.\n' Comment.Single

'while'       Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$#"'        Literal.String.Double
' '           Text.Whitespace
'-gt'         Text
' '           Text.Whitespace
'0'           Text
'\n'          Text.NewLine

'do'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'arg="$1"'    Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'shift'       Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'-*=*)'       Text
' '           Text.Whitespace
'optarg=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/[-_a-zA-Z0-9]*=//'" Literal.String.Single
'`'           Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'optarg='     Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'# If the previous option needs an argument, assign it.\n' Comment.Single

'  '          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$prev'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'execute_dlfiles)' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'execute_dlfiles="$execute_dlfiles' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'tag)'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'tagname="$arg"' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'preserve_args="${preserve_args}=$arg"' Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Check whether tagname contains only valid characters\n' Comment.Single

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$tagname'    Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'*[!-_A-Za-z0-9,/]*)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$progname: invalid tag name: $tagname"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$tagname'    Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'CC)'         Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Don\'t test for the "default" C tag, as we know, it\'s there, but\n' Comment.Single

'\t'          Text.Whitespace
'# not specially marked.\n' Comment.Single

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'grep'        Text
' '           Text.Whitespace
'"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$"' Literal.String.Double
' '           Text.Whitespace
'<'           Text
' '           Text.Whitespace
'"$progpath"' Literal.String.Double
' '           Text.Whitespace
'>'           Text
' '           Text.Whitespace
'/dev/null;'  Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'taglist="$taglist' Text
' '           Text.Whitespace
'$tagname"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Evaluate the configuration.\n' Comment.Single

'\t  '        Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"`${SED} -n -e \'/^# ### BEGIN LIBTOOL TAG CONFIG: \'$tagname\'$/,/^# ### END LIBTOOL TAG CONFIG: \'$tagname\'$/p\' < $progpath`"' Literal.String.Double
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$progname: ignoring unknown tag $tagname"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"$prev=\\$arg"' Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prevopt='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'# Have we seen a non-optional argument yet?\n' Comment.Single

'  '          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'--help)'     Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'show_help=yes' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--version)'  Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$PROGRAM (GNU $PACKAGE) $VERSION$TIMESTAMP"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"Copyright (C) 2005  Free Software Foundation, Inc."' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"This is free software; see the source for copying conditions.  There is NO"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$?'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--config)'   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'${SED}'      Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'1,/^# ### BEGIN LIBTOOL CONFIG/d'" Literal.String.Single
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'/^# ### END LIBTOOL CONFIG/,$d'" Literal.String.Single
' '           Text.Whitespace
'$progpath'   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'# Now print the configurations for the tags.\n' Comment.Single

'    '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'tagname'     Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$taglist;'   Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'${SED}'      Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"/^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$/,/^# ### END LIBTOOL TAG CONFIG: $tagname$/p"' Literal.String.Double
' '           Text.Whitespace
'<'           Text
' '           Text.Whitespace
'"$progpath"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$?'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--debug)'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$progname: enabling shell trace mode"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'set'         Text
' '           Text.Whitespace
'-x'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'preserve_args="$preserve_args' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--dry-run'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'-n)'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'run=:'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--features)' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"host: $host"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"enable shared libraries"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"disable shared libraries"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_old_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"enable static libraries"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"disable static libraries"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$?'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--finish)'   Text
' '           Text.Whitespace
'mode="finish"' Text
' '           Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--mode)'     Text
' '           Text.Whitespace
'prevopt="--mode"' Text
' '           Text.Whitespace
'prev=mode'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'--mode=*)'   Text
' '           Text.Whitespace
'mode="$optarg"' Text
' '           Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--preserve-dup-deps)' Text
' '           Text.Whitespace
'duplicate_deps="yes"' Text
' '           Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--quiet'     Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'--silent)'   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'show=:'      Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'preserve_args="$preserve_args' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'--tag)'      Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prevopt="--tag"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prev=tag'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'preserve_args="$preserve_args' Text
' '           Text.Whitespace
'--tag"'      Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'--tag=*)'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'set'         Text
' '           Text.Whitespace
'tag'         Text
' '           Text.Whitespace
'"$optarg"'   Literal.String.Double
' '           Text.Whitespace
'${1+"$@"}'   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'shift'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prev=tag'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'preserve_args="$preserve_args' Text
' '           Text.Whitespace
'--tag"'      Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'-dlopen)'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prevopt="-dlopen"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prev=execute_dlfiles' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'-*)'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: unrecognized option \\`$arg\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$help"'     Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'nonopt="$arg"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'break'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'done'        Text
'\n\n'        Text.NewLine

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$prevopt"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: option \\`$prevopt\' requires an argument"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$help"'     Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'fi'          Text
'\n\n'        Text.NewLine

'case'        Text
' '           Text.Whitespace
'$disable_libs' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'no)'         Text
' \n  '       Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'shared)'     Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'build_libtool_libs=no' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'build_old_libs=yes' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'static)'     Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'build_old_libs=`case' Text
' '           Text.Whitespace
'$build_libtool_libs' Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'yes)'        Text
' '           Text.Whitespace
'echo'        Text
' '           Text.Whitespace
'no;;'        Text
' '           Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'echo'        Text
' '           Text.Whitespace
'yes;;'       Text
' '           Text.Whitespace
'esac`'       Text
'\n'          Text.NewLine

'  '          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'esac'        Text
'\n\n'        Text.NewLine

'# If this variable is set in any of the actions, the command in it\n' Comment.Single

'# will be execed at the end.  This prevents here-documents from being\n' Comment.Single

'# left over by shells.\n' Comment.Single

'exec_cmd'    Name.Variable
'='           Operator.Equal
'\n\n'        Text.NewLine

'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$show_help"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'# Infer the operation mode.\n' Comment.Single

'  '          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$mode"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** Warning: inferring the mode of operation is deprecated."' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** Future versions of Libtool will require --mode=MODE be specified."' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$nonopt'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*cc'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'cc*'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*++'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'gcc*'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-gcc*'      Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'g++*'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'xlc*)'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'mode=link'   Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'arg'         Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'-c)'         Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
'mode=compile' Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
'break'       Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*db'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*dbx'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*strace'     Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*truss)'     Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'mode=execute' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*install*|cp|mv)' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'mode=install' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*rm)'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'mode=uninstall' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# If we have no mode, but dlfiles were specified, then do execute mode.\n' Comment.Single

'      '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$execute_dlfiles"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'mode=execute' Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Just use the default operation mode.\n' Comment.Single

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$mode"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$nonopt"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: cannot infer operation mode from \\`$nonopt\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: cannot infer operation mode without MODE-ARGS"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'# Only execute mode is allowed to have -dlopen flags.\n' Comment.Single

'  '          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$execute_dlfiles"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$mode"'     Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'execute;'    Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: unrecognized option \\`-dlopen\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$help"'     Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'# Change the help message to a mode-specific one.\n' Comment.Single

'  '          Text.Whitespace
'generic_help="$help"' Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'help="Try'   Text
' '           Text.Whitespace
'\\`$modename' Text
' '           Text.Whitespace
'--help'      Text
' '           Text.Whitespace
"--mode=$mode'" Text
' '           Text.Whitespace
'for'         Text
' '           Text.Whitespace
'more'        Text
' '           Text.Whitespace
'information."' Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'# These modes are in order of execution frequency so that they run quickly.\n' Comment.Single

'  '          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$mode'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'  '          Text.Whitespace
'# libtool compile mode\n' Comment.Single

'  '          Text.Whitespace
'compile)'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'modename="$modename:' Text
' '           Text.Whitespace
'compile"'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'# Get the compilation command and the source file.\n' Comment.Single

'    '        Text.Whitespace
'base_compile=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'srcfile="$nonopt"' Text
'  '          Text.Whitespace
'#  always keep a non-empty value in "srcfile"\n' Comment.Single

'    '        Text.Whitespace
'suppress_opt=yes' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'suppress_output=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'arg_mode=normal' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'libobj='     Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'later='      Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'arg'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg_mode'   Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'arg'         Text
'  '          Text.Whitespace
')'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# do not "continue".  Instead, add this to base_compile\n' Comment.Single

'\t'          Text.Whitespace
'lastarg="$arg"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'arg_mode=normal' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'target'      Text
' '           Text.Whitespace
')'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'libobj="$arg"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'arg_mode=normal' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'normal'      Text
' '           Text.Whitespace
')'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Accept any command-line options.\n' Comment.Single

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'-o)'         Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$libobj"'   Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: you cannot specify \\`-o\' more than once"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg_mode=target' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'-static'     Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'-prefer-pic' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'-prefer-non-pic)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'later="$later' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'-no-suppress)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'suppress_opt=no' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'-Xcompiler)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg_mode=arg' Text
'  '          Text.Whitespace
'#  the next one goes into the "base_compile" arg list\n' Comment.Single

'\t  '        Text.Whitespace
'continue'    Text
'      '      Text.Whitespace
'#  The current "srcfile" will either be retained or\n' Comment.Single

'\t  '        Text.Whitespace
';;'          Text
'            ' Text.Whitespace
'#  replaced later.  I would guess that would be a bug.\n' Comment.Single

'\n'          Text.NewLine

'\t'          Text.Whitespace
'-Wc,*)'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'args=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"s/^-Wc,//"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'lastarg='    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'save_ifs="$IFS";' Text
' '           Text.Whitespace
"IFS=','"     Text
'\n'          Text.NewLine

' \t  '       Text.Whitespace
'for'         Text
' '           Text.Whitespace
'arg'         Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$args;'      Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'IFS="$save_ifs"' Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# Double-quote args containing other shell metacharacters.\n' Comment.Single

'\t    '      Text.Whitespace
'# Many Bourne shells cannot handle close brackets correctly\n' Comment.Single

'\t    '      Text.Whitespace
'# in scan sets, so we specify it separately.\n' Comment.Single

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'arg="\\"$arg\\""' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'lastarg="$lastarg' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'lastarg=`$echo' Text
' '           Text.Whitespace
'"X$lastarg"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"s/^ //"'    Literal.String.Double
'`'           Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'# Add the arguments to base_compile.\n' Comment.Single

'\t  '        Text.Whitespace
'base_compile="$base_compile' Text
' '           Text.Whitespace
'$lastarg"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'*'           Text
' '           Text.Whitespace
')'           Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Accept the current argument as the source file.\n' Comment.Single

'\t  '        Text.Whitespace
'# The previous "srcfile" becomes the current argument.\n' Comment.Single

'\t  '        Text.Whitespace
'#\n'         Comment.Single

'\t  '        Text.Whitespace
'lastarg="$srcfile"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'srcfile="$arg"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'  '          Text.Whitespace
'#  case $arg\n' Comment.Single

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'    '        Text.Whitespace
'#  case $arg_mode\n' Comment.Single

'\n'          Text.NewLine

'      '      Text.Whitespace
'# Aesthetically quote the previous argument.\n' Comment.Single

'      '      Text.Whitespace
'lastarg=`$echo' Text
' '           Text.Whitespace
'"X$lastarg"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
'`'           Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$lastarg'    Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# Double-quote args containing other shell metacharacters.\n' Comment.Single

'      '      Text.Whitespace
'# Many Bourne shells cannot handle close brackets correctly\n' Comment.Single

'      '      Text.Whitespace
'# in scan sets, and some SunOS ksh mistreat backslash-escaping\n' Comment.Single

'      '      Text.Whitespace
'# in scan sets (worked around with variable expansion),\n' Comment.Single

'      '      Text.Whitespace
"# and furthermore cannot handle '|' '&' '(' ')' in scan sets \n" Comment.Single

'      '      Text.Whitespace
'# at all, so we specify them separately.\n' Comment.Single

'      '      Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'lastarg="\\"$lastarg\\""' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'base_compile="$base_compile' Text
' '           Text.Whitespace
'$lastarg"'   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'done'        Text
' '           Text.Whitespace
'# for arg\n' Comment.Single

'\n'          Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg_mode'   Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'arg)'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: you must specify an argument for -Xcompile"' Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'target)'     Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: you must specify a target with \\`-o\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# Get the name of the library object.\n' Comment.Single

'      '      Text.Whitespace
'['           Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$libobj"'   Literal.String.Double
' '           Text.Whitespace
']'           Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'libobj=`$echo' Text
' '           Text.Whitespace
'"X$srcfile"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%^.*/%%'"  Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Recognize several different file suffixes.\n' Comment.Single

'    '        Text.Whitespace
'# If the user specifies -o file.o, it is replaced with file.lo\n' Comment.Single

'    '        Text.Whitespace
"xform='[cCFSifmso]'" Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$libobj'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.ada)'      Text
' '           Text.Whitespace
'xform=ada'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.adb)'      Text
' '           Text.Whitespace
'xform=adb'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.ads)'      Text
' '           Text.Whitespace
'xform=ads'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.asm)'      Text
' '           Text.Whitespace
'xform=asm'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.c++)'      Text
' '           Text.Whitespace
'xform=c++'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.cc)'       Text
' '           Text.Whitespace
'xform=cc'    Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.ii)'       Text
' '           Text.Whitespace
'xform=ii'    Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.class)'    Text
' '           Text.Whitespace
'xform=class' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.cpp)'      Text
' '           Text.Whitespace
'xform=cpp'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.cxx)'      Text
' '           Text.Whitespace
'xform=cxx'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.f90)'      Text
' '           Text.Whitespace
'xform=f90'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.for)'      Text
' '           Text.Whitespace
'xform=for'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.java)'     Text
' '           Text.Whitespace
'xform=java'  Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'libobj=`$echo' Text
' '           Text.Whitespace
'"X$libobj"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"s/\\.$xform$/.lo/"' Literal.String.Double
'`'           Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$libobj'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.lo)'       Text
' '           Text.Whitespace
'obj=`$echo'  Text
' '           Text.Whitespace
'"X$libobj"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$lo2o"'     Literal.String.Double
'`'           Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot determine name of library object from \\`$libobj\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'func_infer_tag' Text
' '           Text.Whitespace
'$base_compile' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'arg'         Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$later;'     Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'-static)'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'build_old_libs=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-prefer-pic)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'pic_mode=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-prefer-non-pic)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'pic_mode=no' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'done'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'qlibobj=`$echo' Text
' '           Text.Whitespace
'"X$libobj"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$qlibobj'    Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'qlibobj="\\"$qlibobj\\""' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$libobj"'  Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'"X$qlibobj"' Literal.String.Double
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"X$libobj"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'grep'        Text
' '           Text.Whitespace
'\'[]~#^*{};<>?"\'' Literal.String.Single
'"\'"'        Literal.String.Double
"' \t&()|`$[]'" Literal.String.Single
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: libobj name \\`$libobj\' may not contain shell special characters."' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'objname=`$echo' Text
' '           Text.Whitespace
'"X$obj"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%^.*/%%'"  Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'xdir=`$echo' Text
' '           Text.Whitespace
'"X$obj"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$xdir"'    Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$obj"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'xdir='       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'xdir=$xdir/' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'lobj=${xdir}$objdir/$objname' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$base_compile"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: you must specify a compilation command"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$help"'     Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Delete any leftover library objects.\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_old_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'removelist="$obj' Text
' '           Text.Whitespace
'$lobj'       Text
' '           Text.Whitespace
'$libobj'     Text
' '           Text.Whitespace
'${libobj}T"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'removelist="$lobj' Text
' '           Text.Whitespace
'$libobj'     Text
' '           Text.Whitespace
'${libobj}T"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'trap'        Text
' '           Text.Whitespace
'"$run $rm $removelist; exit $EXIT_FAILURE"' Literal.String.Double
' '           Text.Whitespace
'1'           Text
' '           Text.Whitespace
'2'           Text
' '           Text.Whitespace
'15'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# On Cygwin there\'s no "real" PIC flag so we must build both object types\n' Comment.Single

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host_os'    Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'cygwin*'     Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'mingw*'      Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'pw32*'       Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'os2*)'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'pic_mode=default' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_mode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no'          Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$deplibs_check_method"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'pass_all;'   Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# non-PIC code in shared libraries is not supported\n' Comment.Single

'      '      Text.Whitespace
'pic_mode=default' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Calculate the filename of the output object if compiler does\n' Comment.Single

'    '        Text.Whitespace
'# not support -o with -c\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$compiler_c_o"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'output_obj=`$echo' Text
' '           Text.Whitespace
'"X$srcfile"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%^.*/%%'"  Literal.String.Single
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%\\.[^.]*$%%'" Literal.String.Single
'`.${objext}' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'lockfile="$output_obj.lock"' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'removelist="$removelist' Text
' '           Text.Whitespace
'$output_obj' Text
' '           Text.Whitespace
'$lockfile"'  Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'trap'        Text
' '           Text.Whitespace
'"$run $rm $removelist; exit $EXIT_FAILURE"' Literal.String.Double
' '           Text.Whitespace
'1'           Text
' '           Text.Whitespace
'2'           Text
' '           Text.Whitespace
'15'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'output_obj=' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'need_locks=no' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'lockfile='   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Lock this critical section if it is needed\n' Comment.Single

'    '        Text.Whitespace
'# We use this script file to make the link, it avoids creating a new file\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$need_locks"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'until'       Text
' '           Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'ln'          Text
' '           Text.Whitespace
'"$srcfile"'  Literal.String.Double
' '           Text.Whitespace
'"$lockfile"' Literal.String.Double
' '           Text.Whitespace
'2>/dev/null;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"Waiting for $lockfile to be removed"' Literal.String.Double
'\n'          Text.NewLine

'\t'          Text.Whitespace
'sleep'       Text
' '           Text.Whitespace
'2'           Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$need_locks"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'warn;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$lockfile"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c\' and \\`-o\' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler."' Literal.String.Double
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$srcfile"'  Literal.String.Double
' '           Text.Whitespace
'>'           Text
' '           Text.Whitespace
'"$lockfile"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$fix_srcfile_path"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'srcfile=\\"$fix_srcfile_path\\"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'qsrcfile=`$echo' Text
' '           Text.Whitespace
'"X$srcfile"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$qsrcfile'   Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'qsrcfile="\\"$qsrcfile\\""' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'"$libobj"'   Literal.String.Double
' '           Text.Whitespace
'"${libobj}T"' Literal.String.Double
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Create a libtool object file (analogous to a ".la" file),\n' Comment.Single

'    '        Text.Whitespace
"# but don't create it if we're doing a dry run.\n" Comment.Single

'    '        Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'cat'         Text
' '           Text.Whitespace
'>'           Text
' '           Text.Whitespace
'${libobj}T'  Text
' '           Text.Whitespace
'<<EOF'       Text
'\n'          Text.NewLine

'# $libobj - a libtool object file\n' Comment.Single

'# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP\n' Comment.Single

'#\n'         Comment.Single

'# Please DO NOT delete this file!\n' Comment.Single

'# It is necessary for linking the library.\n' Comment.Single

'\n'          Text.NewLine

'# Name of the PIC object.\n' Comment.Single

'EOF'         Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Only build a PIC object if we are building libtool libraries.\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# Without this assignment, base_compile gets emptied.\n' Comment.Single

'      '      Text.Whitespace
'fbsd_hideous_sh_bug=$base_compile' Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_mode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'command="$base_compile' Text
' '           Text.Whitespace
'$qsrcfile'   Text
' '           Text.Whitespace
'$pic_flag"'  Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
"# Don't build PIC code\n" Comment.Single

'\t'          Text.Whitespace
'command="$base_compile' Text
' '           Text.Whitespace
'$qsrcfile"'  Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"${xdir}$objdir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$mkdir ${xdir}$objdir"' Literal.String.Double
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$mkdir'      Text
' '           Text.Whitespace
'${xdir}$objdir' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit_status=$?' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$exit_status"' Literal.String.Double
' '           Text.Whitespace
'-ne'         Text
' '           Text.Whitespace
'0'           Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"${xdir}$objdir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$exit_status' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$output_obj"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Place PIC objects in $objdir\n' Comment.Single

'\t'          Text.Whitespace
'command="$command' Text
' '           Text.Whitespace
'-o'          Text
' '           Text.Whitespace
'$lobj"'      Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'"$lobj"'     Literal.String.Double
' '           Text.Whitespace
'"$output_obj"' Literal.String.Double
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$command"'  Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"$command"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':'           Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$output_obj"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$need_locks"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'warn'        Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t '         Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X`cat $lockfile 2>/dev/null`"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'"X$srcfile"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c\' and \\`-o\' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler."' Literal.String.Double
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Just move the object if needed, then go on to compile the next one\n' Comment.Single

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$output_obj"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$output_obj"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'"X$lobj"'    Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$mv $output_obj $lobj"' Literal.String.Double
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$mv'         Text
' '           Text.Whitespace
'$output_obj' Text
' '           Text.Whitespace
'$lobj;'      Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'error=$?'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$error'      Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Append the name of the PIC object to the libtool object file.\n' Comment.Single

'      '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'cat'         Text
' '           Text.Whitespace
'>>'          Text
' '           Text.Whitespace
'${libobj}T'  Text
' '           Text.Whitespace
'<<EOF'       Text
'\n'          Text.NewLine

'pic_object'  Name.Variable
'='           Operator.Equal
"'$objdir/$objname'" Literal.String.Single
'\n\n'        Text.NewLine

'EOF'         Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Allow error messages only from the first compilation.\n' Comment.Single

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$suppress_opt"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'        '    Text.Whitespace
"suppress_output='" Text
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
"2>&1'"       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
"# No PIC object so indicate it doesn't exist in the libtool\n" Comment.Single

'      '      Text.Whitespace
'# object file.\n' Comment.Single

'      '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'cat'         Text
' '           Text.Whitespace
'>>'          Text
' '           Text.Whitespace
'${libobj}T'  Text
' '           Text.Whitespace
'<<EOF'       Text
'\n'          Text.NewLine

'pic_object'  Name.Variable
'='           Operator.Equal
'none'        Text
'\n\n'        Text.NewLine

'EOF'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Only build a position-dependent object if we build old libraries.\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_old_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_mode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
"# Don't build PIC code\n" Comment.Single

'\t'          Text.Whitespace
'command="$base_compile' Text
' '           Text.Whitespace
'$qsrcfile"'  Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'command="$base_compile' Text
' '           Text.Whitespace
'$qsrcfile'   Text
' '           Text.Whitespace
'$pic_flag"'  Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$compiler_c_o"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'command="$command' Text
' '           Text.Whitespace
'-o'          Text
' '           Text.Whitespace
'$obj"'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Suppress compiler output if we already did a PIC compilation.\n' Comment.Single

'      '      Text.Whitespace
'command="$command$suppress_output"' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'"$obj"'      Literal.String.Double
' '           Text.Whitespace
'"$output_obj"' Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$command"'  Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"$command"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':'           Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$need_locks"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'warn'        Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t '         Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X`cat $lockfile 2>/dev/null`"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'"X$srcfile"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c\' and \\`-o\' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler."' Literal.String.Double
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Just move the object if needed\n' Comment.Single

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$output_obj"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$output_obj"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'"X$obj"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$mv $output_obj $obj"' Literal.String.Double
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$mv'         Text
' '           Text.Whitespace
'$output_obj' Text
' '           Text.Whitespace
'$obj;'       Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'error=$?'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'$removelist' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$error'      Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Append the name of the non-PIC object the libtool object file.\n' Comment.Single

'      '      Text.Whitespace
'# Only append if the libtool object file exists.\n' Comment.Single

'      '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'cat'         Text
' '           Text.Whitespace
'>>'          Text
' '           Text.Whitespace
'${libobj}T'  Text
' '           Text.Whitespace
'<<EOF'       Text
'\n'          Text.NewLine

'# Name of the non-PIC object.\n' Comment.Single

'non_pic_object' Name.Variable
'='           Operator.Equal
"'$objname'"  Literal.String.Single
'\n\n'        Text.NewLine

'EOF'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# Append the name of the non-PIC object the libtool object file.\n' Comment.Single

'      '      Text.Whitespace
'# Only append if the libtool object file exists.\n' Comment.Single

'      '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'cat'         Text
' '           Text.Whitespace
'>>'          Text
' '           Text.Whitespace
'${libobj}T'  Text
' '           Text.Whitespace
'<<EOF'       Text
'\n'          Text.NewLine

'# Name of the non-PIC object.\n' Comment.Single

'non_pic_object' Name.Variable
'='           Operator.Equal
'none'        Text
'\n\n'        Text.NewLine

'EOF'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$mv'         Text
' '           Text.Whitespace
'"${libobj}T"' Literal.String.Double
' '           Text.Whitespace
'"${libobj}"' Literal.String.Double
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Unlock the critical section if it was locked\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$need_locks"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$rm'         Text
' '           Text.Whitespace
'"$lockfile"' Literal.String.Double
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_SUCCESS' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'  '          Text.Whitespace
'# libtool link mode\n' Comment.Single

'  '          Text.Whitespace
'link'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'relink)'     Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'modename="$modename:' Text
' '           Text.Whitespace
'link"'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*-*-cygwin*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-mingw*'  Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-pw32*'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-os2*)'   Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# It is impossible to link a dll without this setting, and\n' Comment.Single

'      '      Text.Whitespace
"# we shouldn't force the makefile maintainer to figure out\n" Comment.Single

'      '      Text.Whitespace
'# which system we are compiling for in order to pass an extra\n' Comment.Single

'      '      Text.Whitespace
'# flag for every libtool invocation.\n' Comment.Single

'      '      Text.Whitespace
'# allow_undefined=no\n' Comment.Single

'\n'          Text.NewLine

'      '      Text.Whitespace
'# FIXME: Unfortunately, there are problems with the above when trying\n' Comment.Single

'      '      Text.Whitespace
'# to make a dll which has undefined symbols, in which case not\n' Comment.Single

'      '      Text.Whitespace
'# even a static library is built.  For now, we need to specify\n' Comment.Single

'      '      Text.Whitespace
'# -no-undefined on the libtool link line when we can be certain\n' Comment.Single

'      '      Text.Whitespace
'# that all symbols are satisfied, otherwise we get a static library.\n' Comment.Single

'      '      Text.Whitespace
'allow_undefined=yes' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'allow_undefined=yes' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'libtool_args="$nonopt"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'base_compile="$nonopt' Text
' '           Text.Whitespace
'$@"'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'compile_command="$nonopt"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'finalize_command="$nonopt"' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'compile_rpath=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'finalize_rpath=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'compile_shlibpath=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'finalize_shlibpath=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'convenience=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'old_convenience=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'deplibs='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'old_deplibs=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'compiler_flags=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'linker_flags=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'dllsearchpath=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'lib_search_path=`pwd`' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'inst_prefix_dir=' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'avoid_version=no' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'dlfiles='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'dlprefiles=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'dlself=no'   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'export_dynamic=no' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'export_symbols=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'export_symbols_regex=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'generated='  Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'libobjs='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'ltlibs='     Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'module=no'   Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'no_install=no' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'objs='       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'non_pic_objects=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'notinst_path=' Text
' '           Text.Whitespace
'# paths that contain not-installed libtool libraries\n' Comment.Single

'    '        Text.Whitespace
'precious_files_regex=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prefer_static_libs=no' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'preload=no'  Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prevarg='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'release='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'rpath='      Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'xrpath='     Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'perm_rpath=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'temp_rpath=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'thread_safe=no' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'vinfo='      Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'vinfo_number=no' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'func_infer_tag' Text
' '           Text.Whitespace
'$base_compile' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# We need to know -static, to get the right output filenames.\n' Comment.Single

'    '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'arg'         Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'-all-static' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'-static)'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-all-static"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$link_static_flag"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: complete static linking is impossible in this configuration"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$link_static_flag"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'dlopen_self=$dlopen_self_static' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prefer_static_libs=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$pic_flag"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$link_static_flag"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'dlopen_self=$dlopen_self_static' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prefer_static_libs=built' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'build_libtool_libs=no' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'build_old_libs=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'break'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'done'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# See if our shared archives depend on static archives.\n' Comment.Single

'    '        Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$old_archive_from_new_cmds"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'build_old_libs=yes' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Go through the arguments, transforming them on the way.\n' Comment.Single

'    '        Text.Whitespace
'while'       Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$#"'        Literal.String.Double
' '           Text.Whitespace
'-gt'         Text
' '           Text.Whitespace
'0;'          Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'arg="$1"'    Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'shift'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'qarg=\\"`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
'`\\"'        Text
' '           Text.Whitespace
'### testsuite: skip nested quoting test\n' Comment.Single

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'qarg=$arg'   Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'libtool_args="$libtool_args' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# If the previous option needs an argument, assign it.\n' Comment.Single

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$prev'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'output)'     Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'@OUTPUT@"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'@OUTPUT@"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$prev'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'dlfiles|dlprefiles)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$preload"'  Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Add the symbol object into the linking commands.\n' Comment.Single

'\t    '      Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'@SYMFILE@"'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'@SYMFILE@"'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'preload=yes' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*.la'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*.lo)'       Text
' '           Text.Whitespace
';;'          Text
'  '          Text.Whitespace
'# We handle these cases below.\n' Comment.Single

'\t  '        Text.Whitespace
'force)'      Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$dlself"'   Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'dlself=needless' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'export_dynamic=yes' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'self)'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlprefiles;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'dlself=yes'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlfiles'     Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$dlopen_self"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'dlself=yes'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'dlself=needless' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'export_dynamic=yes' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlfiles;'    Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'dlfiles="$dlfiles' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'dlprefiles="$dlprefiles' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'expsyms)'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'export_symbols="$arg"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$arg"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: symbol file \\`$arg\' does not exist"' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'expsyms_regex)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'export_symbols_regex="$arg"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'inst_prefix)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'inst_prefix_dir="$arg"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'precious_regex)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'precious_files_regex="$arg"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'release)'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'release="-$arg"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'objectlist)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$arg"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'save_arg=$arg' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'moreargs='   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'fil'         Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'`cat'        Text
' '           Text.Whitespace
'$save_arg`'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'#\t      moreargs="$moreargs $fil"\n' Comment.Single

'\t      '    Text.Whitespace
'arg=$fil'    Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# A libtool-controlled object.\n' Comment.Single

'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# Check to see that this really is a libtool object.\n' Comment.Single

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'(${SED}'     Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'2q'"        Literal.String.Single
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'grep'        Text
' '           Text.Whitespace
'"^# Generated by .*$PACKAGE"' Literal.String.Double
')'           Text
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
'2>&1;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'pic_object=' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'non_pic_object=' Text
'\n\n'        Text.NewLine

'\t\t'        Text.Whitespace
'# Read the .lo file\n' Comment.Single

'\t\t'        Text.Whitespace
'# If there is no directory component, then add one.\n' Comment.Single

'\t\t'        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'*/*'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*\\\\*)'     Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'./$arg'      Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t\t   '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$non_pic_object"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t\t   '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'none'        Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t\t   '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$non_pic_object"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'none;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot find name of object for \\`$arg\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t\t'        Text.Whitespace
'# Extract subdirectory from the argument.\n' Comment.Single

'\t\t'        Text.Whitespace
'xdir=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$xdir"'    Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'xdir='       Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'xdir="$xdir/"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'none;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'# Prepend the subdirectory the object is found in.\n' Comment.Single

'\t\t  '      Text.Whitespace
'pic_object="$xdir$pic_object"' Text
'\n\n'        Text.NewLine

'\t\t  '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlfiles;'    Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$dlopen_support"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'dlfiles="$dlfiles' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'# If libtool objects are unsupported, then we need to preload.\n' Comment.Single

'\t\t      '  Text.Whitespace
'prev=dlprefiles' Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t\t  '      Text.Whitespace
'# CHECK ME:  I think I busted this.  -Ossama\n' Comment.Single

'\t\t  '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlprefiles;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'# Preload the old-style object.\n' Comment.Single

'\t\t    '    Text.Whitespace
'dlprefiles="$dlprefiles' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t\t  '      Text.Whitespace
'# A PIC object.\n' Comment.Single

'\t\t  '      Text.Whitespace
'libobjs="$libobjs' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'arg="$pic_object"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t\t'        Text.Whitespace
'# Non-PIC object.\n' Comment.Single

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$non_pic_object"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'none;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'# Prepend the subdirectory the object is found in.\n' Comment.Single

'\t\t  '      Text.Whitespace
'non_pic_object="$xdir$non_pic_object"' Text
'\n\n'        Text.NewLine

'\t\t  '      Text.Whitespace
'# A standard non-PIC object\n' Comment.Single

'\t\t  '      Text.Whitespace
'non_pic_objects="$non_pic_objects' Text
' '           Text.Whitespace
'$non_pic_object"' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'none'        Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'arg="$non_pic_object"' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'# If the PIC object exists, use it instead.\n' Comment.Single

'\t\t  '      Text.Whitespace
'# $xdir was prepended to $pic_object above.\n' Comment.Single

'\t\t  '      Text.Whitespace
'non_pic_object="$pic_object"' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'non_pic_objects="$non_pic_objects' Text
' '           Text.Whitespace
'$non_pic_object"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'# Only an error if not doing a dry-run.\n' Comment.Single

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: \\`$arg\' is not a valid libtool object"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'# Dry-run case.\n' Comment.Single

'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'# Extract subdirectory from the argument.\n' Comment.Single

'\t\t  '      Text.Whitespace
'xdir=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$xdir"'    Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'xdir='       Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'xdir="$xdir/"' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t\t  '      Text.Whitespace
'pic_object=`$echo' Text
' '           Text.Whitespace
'"X${xdir}${objdir}/${arg}"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$lo2o"'     Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'non_pic_object=`$echo' Text
' '           Text.Whitespace
'"X${xdir}${arg}"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$lo2o"'     Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'libobjs="$libobjs' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'non_pic_objects="$non_pic_objects' Text
' '           Text.Whitespace
'$non_pic_object"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: link input file \\`$save_arg\' does not exist"' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg=$save_arg' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'rpath'       Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'xrpath)'     Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# We need an absolute path.\n' Comment.Single

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'[\\\\/]*'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'[A-Za-z]:[\\\\/]*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: only absolute run-paths are allowed"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'rpath;'      Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$rpath "'   Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'"*) ;;\n\t    *) rpath="' Literal.String.Double
'$rpath'      Text
' '           Text.Whitespace
'$arg"'       Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$xrpath "'  Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'"*) ;;\n\t    *) xrpath="' Literal.String.Double
'$xrpath'     Text
' '           Text.Whitespace
'$arg"'       Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'xcompiler)'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'xlinker)'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'linker_flags="$linker_flags' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$wl$qarg"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$wl$qarg"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$wl$qarg"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'xcclinker)'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'linker_flags="$linker_flags' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$qarg"'      Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'shrext)'     Text
'\n'          Text.NewLine

'  \t  '      Text.Whitespace
'shrext_cmds="$arg"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'darwin_framework|darwin_framework_skip)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"darwin_framework"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"$prev=\\"\\$arg\\""' Literal.String.Double
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# test -n "$prev"\n' Comment.Single

'\n'          Text.NewLine

'      '      Text.Whitespace
'prevarg="$arg"' Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'-all-static)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$link_static_flag"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$link_static_flag"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$link_static_flag"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-allow-undefined)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# FIXME: remove this flag sometime in the future.\n' Comment.Single

'\t'          Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: \\`-allow-undefined\' is deprecated because it is the default"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-avoid-version)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'avoid_version=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-dlopen)'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=dlfiles' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-dlpreopen)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=dlprefiles' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-export-dynamic)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'export_dynamic=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-export-symbols' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'-export-symbols-regex)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$export_symbols"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$export_symbols_regex"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: more than one -exported-symbols argument is not allowed"' Literal.String.Double
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-export-symbols"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev=expsyms' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev=expsyms_regex' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-framework|-arch|-isysroot)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'" $CC "'     Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'${arg}'      Text
' '           Text.Whitespace
'${1}'        Text
' '           Text.Whitespace
'"* | *"'     Literal.String.Double
' '           Text.Whitespace
'${arg}'      Text
'\t'          Text.Whitespace
'${1}'        Text
' '           Text.Whitespace
'"*) \n\t\tprev=darwin_framework_skip ;;\n\t  *) compiler_flags="' Literal.String.Double
'$compiler_flags' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'prev=darwin_framework' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-inst-prefix-dir)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=inst_prefix' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n' Comment.Single

'      '      Text.Whitespace
'# so, if we see these flags be careful not to treat them like -L\n' Comment.Single

'      '      Text.Whitespace
'-L[A-Z][A-Z]*:*)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$with_gcc/$host' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'no/*-*-irix*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'/*-*-irix*)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-L*)'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'dir=`$echo'  Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-L//'"   Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# We need an absolute path.\n' Comment.Single

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$dir'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'[\\\\/]*'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'[A-Za-z]:[\\\\/]*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'absdir=`cd'  Text
' '           Text.Whitespace
'"$dir"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'pwd`'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$absdir"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot determine absolute directory name of \\`$dir\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'absdir="$dir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'notinst_path="$notinst_path' Text
' '           Text.Whitespace
'$dir"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'dir="$absdir"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$deplibs "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'-L$dir'      Text
' '           Text.Whitespace
'"*) ;;\n\t*)\n\t  deplibs="' Literal.String.Double
'$deplibs'    Text
' '           Text.Whitespace
'-L$dir"'     Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'lib_search_path="$lib_search_path' Text
' '           Text.Whitespace
'$dir"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*-*-cygwin*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-mingw*'  Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-pw32*'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-os2*)'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'testbindir=`$echo' Text
' '           Text.Whitespace
'"X$dir"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s*/lib$*/bin*'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
':$dllsearchpath:' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*":$dir:"*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'dllsearchpath="$dllsearchpath:$dir";;' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
':$dllsearchpath:' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*":$testbindir:"*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'dllsearchpath="$dllsearchpath:$testbindir";;' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-l*)'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-lc"'      Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-lm"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*-*-cygwin*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-mingw*'  Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-pw32*'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-beos*)'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"# These systems don't actually have a C or math library (as such)\n" Comment.Single

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*-*-os2*)'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"# These systems don't actually have a C library (as such)\n" Comment.Single

'\t    '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-lc"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*-*-openbsd*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-freebsd*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-dragonfly*)' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Do not include libc due to us having libc/libc_r.\n' Comment.Single

'\t    '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-lc"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*-*-rhapsody*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-darwin1.[012])' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Rhapsody C and math libraries are in the System framework\n' Comment.Single

'\t    '      Text.Whitespace
'deplibs="$deplibs' Text
' '           Text.Whitespace
'-framework'  Text
' '           Text.Whitespace
'System"'     Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*-*-sco3.2v5*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-sco5v6*)' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Causes problems with __ctype\n' Comment.Single

'\t    '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-lc"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*-*-sysv4.2uw2*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-sysv5*'  Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-unixware*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-OpenUNIX*)' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Compiler inserts libc in the correct place for threads to work\n' Comment.Single

'\t    '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-lc"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X-lc_r"'    Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t '         Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t '         Text.Whitespace
'*-*-openbsd*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-freebsd*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-dragonfly*)' Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
'# Do not include libc_r directly, use -pthread flag.\n' Comment.Single

'\t   '       Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t '         Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'deplibs="$deplibs' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Tru64 UNIX uses -model [arg] to determine the layout of C++\n' Comment.Single

'      '      Text.Whitespace
'# classes, name mangling, and exception handling.\n' Comment.Single

'      '      Text.Whitespace
'-model)'     Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=xcompiler' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'     '       Text.Whitespace
'-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-module)'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'module=yes'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# -64, -mips[0-9] enable 64-bit mode on the SGI compiler\n' Comment.Single

'      '      Text.Whitespace
'# -r[0-9][0-9]* specifies the processor on the SGI compiler\n' Comment.Single

'      '      Text.Whitespace
'# -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler\n' Comment.Single

'      '      Text.Whitespace
'# +DA*, +DD* enable 64-bit mode on the HP compiler\n' Comment.Single

'      '      Text.Whitespace
'# -q* pass through compiler args for the IBM compiler\n' Comment.Single

'      '      Text.Whitespace
'# -m* pass through architecture-specific compiler args for GCC\n' Comment.Single

'      '      Text.Whitespace
'# -m*, -t[45]*, -txscale* pass through architecture-specific\n' Comment.Single

'      '      Text.Whitespace
'# compiler args for GCC\n' Comment.Single

'      '      Text.Whitespace
'# -pg pass through profiling flag for GCC\n' Comment.Single

'      '      Text.Whitespace
'# @file GCC response files\n' Comment.Single

'      '      Text.Whitespace
'-64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*|-pg|' Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'-t[45]*|-txscale*|@*)' Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'# Unknown arguments in both finalize_command and compile_command need\n' Comment.Single

'\t'          Text.Whitespace
'# to be aesthetically quoted because they are evaled later.\n' Comment.Single

'\t'          Text.Whitespace
'arg=`$echo'  Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg="\\"$arg\\""' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'        '    Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'        '    Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'        '    Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'        '    Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'        '    Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-shrext)'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=shrext' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-no-fast-install)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fast_install=no' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-no-install)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*-*-cygwin*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-mingw*'  Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-pw32*'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-os2*)'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# The PATH hackery in wrapper scripts is required on Windows\n' Comment.Single

'\t  '        Text.Whitespace
'# in order for the loader to find any dlls it needs.\n' Comment.Single

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: \\`-no-install\' is ignored for $host"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: assuming \\`-no-fast-install\' instead"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fast_install=no' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'no_install=yes' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-no-undefined)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'allow_undefined=no' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-objectlist)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=objectlist' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-o)'         Text
' '           Text.Whitespace
'prev=output' Text
' '           Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-precious-files-regex)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=precious_regex' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-release)'   Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=release' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-rpath)'     Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=rpath'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-R)'         Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=xrpath' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-R*)'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'dir=`$echo'  Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-R//'"   Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# We need an absolute path.\n' Comment.Single

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$dir'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'[\\\\/]*'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'[A-Za-z]:[\\\\/]*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: only absolute run-paths are allowed"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$xrpath "'  Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$dir'        Text
' '           Text.Whitespace
'"*) ;;\n\t*) xrpath="' Literal.String.Double
'$xrpath'     Text
' '           Text.Whitespace
'$dir"'       Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-static)'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# The effects of -static are defined in a previous loop.\n' Comment.Single

'\t'          Text.Whitespace
'# We used to do the same as -all-static on platforms that\n' Comment.Single

'\t'          Text.Whitespace
"# didn't have a PIC flag, but the assumption that the effects\n" Comment.Single

'\t'          Text.Whitespace
'# would be equivalent was wrong.  It would break on at least\n' Comment.Single

'\t'          Text.Whitespace
'# Digital Unix and AIX.\n' Comment.Single

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-thread-safe)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'thread_safe=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-version-info)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=vinfo'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'-version-number)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=vinfo'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'vinfo_number=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-Wc,*)'      Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'args=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-Wc,//'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'arg='        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'save_ifs="$IFS";' Text
' '           Text.Whitespace
"IFS=','"     Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'for'         Text
' '           Text.Whitespace
'flag'        Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$args;'      Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$flag'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'flag="\\"$flag\\""' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg="$arg'   Text
' '           Text.Whitespace
'$wl$flag"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$flag"'      Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'arg=`$echo'  Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"s/^ //"'    Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-Wl,*)'      Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'args=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-Wl,//'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'arg='        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'save_ifs="$IFS";' Text
' '           Text.Whitespace
"IFS=','"     Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'for'         Text
' '           Text.Whitespace
'flag'        Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$args;'      Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$flag'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'flag="\\"$flag\\""' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg="$arg'   Text
' '           Text.Whitespace
'$wl$flag"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$wl$flag"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'linker_flags="$linker_flags' Text
' '           Text.Whitespace
'$flag"'      Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'arg=`$echo'  Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"s/^ //"'    Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-Xcompiler)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=xcompiler' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-Xlinker)'   Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=xlinker' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'-XCClinker)' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'prev=xcclinker' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Some other compiler flag.\n' Comment.Single

'      '      Text.Whitespace
'-*'          Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'+*)'         Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Unknown arguments in both finalize_command and compile_command need\n' Comment.Single

'\t'          Text.Whitespace
'# to be aesthetically quoted because they are evaled later.\n' Comment.Single

'\t'          Text.Whitespace
'arg=`$echo'  Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg="\\"$arg\\""' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'*.$objext)'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# A standard object.\n' Comment.Single

'\t'          Text.Whitespace
'objs="$objs' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'*.lo)'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# A libtool-controlled object.\n' Comment.Single

'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Check to see that this really is a libtool object.\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'(${SED}'     Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'2q'"        Literal.String.Single
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'grep'        Text
' '           Text.Whitespace
'"^# Generated by .*$PACKAGE"' Literal.String.Double
')'           Text
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
'2>&1;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'pic_object=' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'non_pic_object=' Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'# Read the .lo file\n' Comment.Single

'\t  '        Text.Whitespace
'# If there is no directory component, then add one.\n' Comment.Single

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*/*'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*\\\\*)'     Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'./$arg'      Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$non_pic_object"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'none'        Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$non_pic_object"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'none;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot find name of object for \\`$arg\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'# Extract subdirectory from the argument.\n' Comment.Single

'\t  '        Text.Whitespace
'xdir=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$xdir"'    Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'xdir='       Text
'\n'          Text.NewLine

' \t  '       Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'xdir="$xdir/"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'none;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Prepend the subdirectory the object is found in.\n' Comment.Single

'\t    '      Text.Whitespace
'pic_object="$xdir$pic_object"' Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlfiles;'    Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$dlopen_support"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'dlfiles="$dlfiles' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'# If libtool objects are unsupported, then we need to preload.\n' Comment.Single

'\t\t'        Text.Whitespace
'prev=dlprefiles' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# CHECK ME:  I think I busted this.  -Ossama\n' Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlprefiles;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# Preload the old-style object.\n' Comment.Single

'\t      '    Text.Whitespace
'dlprefiles="$dlprefiles' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# A PIC object.\n' Comment.Single

'\t    '      Text.Whitespace
'libobjs="$libobjs' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'arg="$pic_object"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'# Non-PIC object.\n' Comment.Single

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$non_pic_object"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'none;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Prepend the subdirectory the object is found in.\n' Comment.Single

'\t    '      Text.Whitespace
'non_pic_object="$xdir$non_pic_object"' Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# A standard non-PIC object\n' Comment.Single

'\t    '      Text.Whitespace
'non_pic_objects="$non_pic_objects' Text
' '           Text.Whitespace
'$non_pic_object"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pic_object"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'none'        Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'arg="$non_pic_object"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# If the PIC object exists, use it instead.\n' Comment.Single

'\t    '      Text.Whitespace
'# $xdir was prepended to $pic_object above.\n' Comment.Single

'\t    '      Text.Whitespace
'non_pic_object="$pic_object"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'non_pic_objects="$non_pic_objects' Text
' '           Text.Whitespace
'$non_pic_object"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Only an error if not doing a dry-run.\n' Comment.Single

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$run"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: \\`$arg\' is not a valid libtool object"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Dry-run case.\n' Comment.Single

'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Extract subdirectory from the argument.\n' Comment.Single

'\t    '      Text.Whitespace
'xdir=`$echo' Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$xdir"'    Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'xdir='       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'xdir="$xdir/"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'pic_object=`$echo' Text
' '           Text.Whitespace
'"X${xdir}${objdir}/${arg}"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$lo2o"'     Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'non_pic_object=`$echo' Text
' '           Text.Whitespace
'"X${xdir}${arg}"' Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$lo2o"'     Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'libobjs="$libobjs' Text
' '           Text.Whitespace
'$pic_object"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'non_pic_objects="$non_pic_objects' Text
' '           Text.Whitespace
'$non_pic_object"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'*.$libext)'  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# An archive.\n' Comment.Single

'\t'          Text.Whitespace
'deplibs="$deplibs' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'old_deplibs="$old_deplibs' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'*.la)'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# A libtool-controlled library.\n' Comment.Single

'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlfiles;'    Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# This library was specified with -dlopen.\n' Comment.Single

'\t  '        Text.Whitespace
'dlfiles="$dlfiles' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlprefiles;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# The library was specified with -dlpreopen.\n' Comment.Single

'\t  '        Text.Whitespace
'dlprefiles="$dlprefiles' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prev='       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'deplibs="$deplibs' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Some other compiler argument.\n' Comment.Single

'      '      Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Unknown arguments in both finalize_command and compile_command need\n' Comment.Single

'\t'          Text.Whitespace
'# to be aesthetically quoted because they are evaled later.\n' Comment.Single

'\t'          Text.Whitespace
'arg=`$echo'  Text
' '           Text.Whitespace
'"X$arg"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
'"$sed_quote_subst"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$arg'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
"*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\" Text
' '           Text.Whitespace
'\\'          Text
'\t'          Text.Whitespace
']*|*]*|"")'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'arg="\\"$arg\\""' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'esac'        Text
' '           Text.Whitespace
'# arg\n'     Comment.Single

'\n'          Text.NewLine

'      '      Text.Whitespace
'# Now actually substitute the argument into the commands.\n' Comment.Single

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$arg"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'done'        Text
' '           Text.Whitespace
'# argument parsing loop\n' Comment.Single

'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$prev"'     Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: the \\`$prevarg\' option requires an argument"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$help"'     Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$export_dynamic"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$export_dynamic_flag_spec"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'arg=\\"$export_dynamic_flag_spec\\"' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'compile_command="$compile_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'finalize_command="$finalize_command' Text
' '           Text.Whitespace
'$arg"'       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'oldlibs='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'# calculate the name of the file, without its directory\n' Comment.Single

'    '        Text.Whitespace
'outputname=`$echo' Text
' '           Text.Whitespace
'"X$output"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%^.*/%%'"  Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'libobjs_save="$libobjs"' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$shlibpath_var"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'# get the directories listed in $shlibpath_var\n' Comment.Single

'      '      Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'shlib_search_path=\\`\\$echo' Text
' '           Text.Whitespace
'\\"X\\${$shlibpath_var}\\"' Text
' '           Text.Whitespace
'\\|'         Text
' '           Text.Whitespace
'\\$Xsed'     Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"\\'s/:/"     Text
' '           Text.Whitespace
"/g\\'\\`"    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'shlib_search_path=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'sys_lib_search_path=\\"$sys_lib_search_path_spec\\"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'sys_lib_dlsearch_path=\\"$sys_lib_dlsearch_path_spec\\"' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'output_objdir=`$echo' Text
' '           Text.Whitespace
'"X$output"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$output_objdir"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$output"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'output_objdir="$objdir"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'output_objdir="$output_objdir/$objdir"' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'# Create the object directory.\n' Comment.Single

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"$output_objdir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$mkdir $output_objdir"' Literal.String.Double
'\n'          Text.NewLine

'      '      Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'$mkdir'      Text
' '           Text.Whitespace
'$output_objdir' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit_status=$?' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$exit_status"' Literal.String.Double
' '           Text.Whitespace
'-ne'         Text
' '           Text.Whitespace
'0'           Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-d'          Text
' '           Text.Whitespace
'"$output_objdir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$exit_status' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'# Determine the type of output\n' Comment.Single

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$output'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'""'          Literal.String.Double
')'           Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: you must specify an output file"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$help"'     Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.$libext)'  Text
' '           Text.Whitespace
'linkmode=oldlib' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.lo'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*.$objext)'  Text
' '           Text.Whitespace
'linkmode=obj' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*.la)'       Text
' '           Text.Whitespace
'linkmode=lib' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'linkmode=prog' Text
' '           Text.Whitespace
';;'          Text
' '           Text.Whitespace
'# Anything else should be a program.\n' Comment.Single

'    '        Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*cygwin*'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*mingw*'     Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*pw32*)'     Text
'\n'          Text.NewLine

'      '      Text.Whitespace
"# don't eliminate duplications in $postdeps and $predeps\n" Comment.Single

'      '      Text.Whitespace
'duplicate_compiler_generated_deps=yes' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'duplicate_compiler_generated_deps=$duplicate_deps' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'specialdeplibs=' Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'libs='       Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'# Find all interdependent deplibs by searching for libraries\n' Comment.Single

'    '        Text.Whitespace
'# that are linked more than once (e.g. -la -lb -la)\n' Comment.Single

'    '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'deplib'      Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$deplibs;'   Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$duplicate_deps"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"Xyes"'      Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$libs "'    Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$deplib'     Text
' '           Text.Whitespace
'"*) specialdeplibs="' Literal.String.Double
'$specialdeplibs' Text
' '           Text.Whitespace
'$deplib"'    Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'libs="$libs' Text
' '           Text.Whitespace
'$deplib"'    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'done'        Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'lib;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'libs="$predeps' Text
' '           Text.Whitespace
'$libs'       Text
' '           Text.Whitespace
'$compiler_lib_search_path' Text
' '           Text.Whitespace
'$postdeps"'  Text
'\n\n'        Text.NewLine

'      '      Text.Whitespace
'# Compute libraries that are listed more than once in $predeps\n' Comment.Single

'      '      Text.Whitespace
'# $postdeps and mark them as special (i.e., whose duplicates are\n' Comment.Single

'      '      Text.Whitespace
'# not to be eliminated).\n' Comment.Single

'      '      Text.Whitespace
'pre_post_deps=' Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$duplicate_compiler_generated_deps"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"Xyes"'      Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'for'         Text
' '           Text.Whitespace
'pre_post_dep' Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$predeps'    Text
' '           Text.Whitespace
'$postdeps;'  Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$pre_post_deps "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$pre_post_dep' Text
' '           Text.Whitespace
'"*) specialdeplibs="' Literal.String.Double
'$specialdeplibs' Text
' '           Text.Whitespace
'$pre_post_deps"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'pre_post_deps="$pre_post_deps' Text
' '           Text.Whitespace
'$pre_post_dep"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'pre_post_deps=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'    '        Text.Whitespace
'deplibs='    Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'newdependency_libs=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'newlib_search_path=' Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'need_relink=no' Text
' '           Text.Whitespace
"# whether we're linking any uninstalled libtool libraries\n" Comment.Single

'    '        Text.Whitespace
'notinst_deplibs=' Text
' '           Text.Whitespace
'# not-installed libtool libraries\n' Comment.Single

'    '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$linkmode'   Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'lib)'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'passes="conv' Text
' '           Text.Whitespace
'link"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'for'         Text
' '           Text.Whitespace
'file'        Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$dlfiles'    Text
' '           Text.Whitespace
'$dlprefiles;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$file'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*.la)'       Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: libraries can \\`-dlopen\' only libtool libraries: $file"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'prog)'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'compile_deplibs=' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'finalize_deplibs=' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'alldeplibs=no' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'newdlfiles=' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'newdlprefiles=' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'passes="conv' Text
' '           Text.Whitespace
'scan'        Text
' '           Text.Whitespace
'dlopen'      Text
' '           Text.Whitespace
'dlpreopen'   Text
' '           Text.Whitespace
'link"'       Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'*)'          Text
'  '          Text.Whitespace
'passes="conv"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'    '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'pass'        Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$passes;'    Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"lib,link"'  Literal.String.Double
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t '         Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"prog,scan"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'libs="$deplibs"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'deplibs='    Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$pass'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'dlopen)'     Text
' '           Text.Whitespace
'libs="$dlfiles"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'dlpreopen)'  Text
' '           Text.Whitespace
'libs="$dlprefiles"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'link)'       Text
' '           Text.Whitespace
'libs="$deplibs' Text
' '           Text.Whitespace
'%DEPLIBS%'   Text
' '           Text.Whitespace
'$dependency_libs"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlopen;'     Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# Collect dlpreopened libraries\n' Comment.Single

'\t'          Text.Whitespace
'save_deplibs="$deplibs"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'deplibs='    Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'      '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'deplib'      Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$libs;'      Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'lib='        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'found=no'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$deplib'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"prog,link"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'compile_deplibs="$deplib' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'finalize_deplibs="$deplib' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'compiler_flags="$compiler_flags' Text
' '           Text.Whitespace
'$deplib"'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'-l*)'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'lib'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'prog;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: \\`-l\' is ignored for archives/objects"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'name=`$echo' Text
' '           Text.Whitespace
'"X$deplib"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-l//'"   Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'searchdir'   Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$newlib_search_path' Text
' '           Text.Whitespace
'$lib_search_path' Text
' '           Text.Whitespace
'$sys_lib_search_path' Text
' '           Text.Whitespace
'$shlib_search_path;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'search_ext'  Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'.la'         Text
' '           Text.Whitespace
'$std_shrext' Text
' '           Text.Whitespace
'.so'         Text
' '           Text.Whitespace
'.a;'         Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# Search the libtool library\n' Comment.Single

'\t      '    Text.Whitespace
'lib="$searchdir/lib${name}${search_ext}"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$lib"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$search_ext"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'".la"'       Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'found=yes'   Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'found=no'    Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'break'       Text
' '           Text.Whitespace
'2'           Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$found"'    Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"# deplib doesn't seem to be a libtool library\n" Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"prog,link"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'compile_deplibs="$deplib' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'finalize_deplibs="$deplib' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'lib'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'newdependency_libs="$deplib' Text
' '           Text.Whitespace
'$newdependency_libs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
' '           Text.Whitespace
'# deplib is a libtool library\n' Comment.Single

'\t    '      Text.Whitespace
'# If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n' Comment.Single

'\t    '      Text.Whitespace
'# We need to do some special things here, and not later.\n' Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$allow_libtool_libs_with_static_runtimes"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"Xyes"'      Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'case'        Text
' '           Text.Whitespace
'" $predeps $postdeps "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$deplib'     Text
' '           Text.Whitespace
'"*)\n\t\tif (${SED} -e \'2q\' $lib |\n                    grep "' Literal.String.Double
'^#'          Text
' '           Text.Whitespace
'Generated'   Text
' '           Text.Whitespace
'by'          Text
' '           Text.Whitespace
'.*$PACKAGE")' Text
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
'2>&1;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'library_names=' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'old_library=' Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$lib'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'*/*'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*\\\\*)'     Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'$lib'        Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'./$lib'      Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'l'           Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$old_library' Text
' '           Text.Whitespace
'$library_names;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'll="$l"'     Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$ll"'      Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$old_library"' Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
'# only static version available\n' Comment.Single

'\t\t    '    Text.Whitespace
'found=no'    Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'ladir=`$echo' Text
' '           Text.Whitespace
'"X$lib"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$ladir"'   Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$lib"'     Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'ladir="."'   Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'lib=$ladir/$old_library' Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"prog,link"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'compile_deplibs="$deplib' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'finalize_deplibs="$deplib' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'lib'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'newdependency_libs="$deplib' Text
' '           Text.Whitespace
'$newdependency_libs"' Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t        '  Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*)'          Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
' '           Text.Whitespace
'# -l\n'      Comment.Single

'\t'          Text.Whitespace
'-L*)'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$linkmode'   Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'lib)'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'conv'        Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newdependency_libs="$deplib' Text
' '           Text.Whitespace
'$newdependency_libs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newlib_search_path="$newlib_search_path' Text
' '           Text.Whitespace
'"`$echo "'   Literal.String.Double
'X$deplib"'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-L//'"   Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prog)'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'conv;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'scan;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'compile_deplibs="$deplib' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'finalize_deplibs="$deplib' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newlib_search_path="$newlib_search_path' Text
' '           Text.Whitespace
'"`$echo "'   Literal.String.Double
'X$deplib"'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-L//'"   Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: \\`-L\' is ignored for archives/objects"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
' '           Text.Whitespace
'# linkmode\n' Comment.Single

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
' '           Text.Whitespace
'# -L\n'      Comment.Single

'\t'          Text.Whitespace
'-R*)'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'link;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'dir=`$echo'  Text
' '           Text.Whitespace
'"X$deplib"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-R//'"   Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Make sure the xrpath contains only unique directories.\n' Comment.Single

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$xrpath "'  Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$dir'        Text
' '           Text.Whitespace
'"*) ;;\n\t    *) xrpath="' Literal.String.Double
'$xrpath'     Text
' '           Text.Whitespace
'$dir"'       Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*.la)'       Text
' '           Text.Whitespace
'lib="$deplib"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*.$libext)'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'conv;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$linkmode'   Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'lib)'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'valid_a_lib=no' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$deplibs_check_method' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'match_pattern*)' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'set'         Text
' '           Text.Whitespace
'dummy'       Text
' '           Text.Whitespace
'$deplibs_check_method' Text
'\n'          Text.NewLine

'\t        '  Text.Whitespace
'match_pattern_regex=`expr' Text
' '           Text.Whitespace
'"$deplibs_check_method"' Literal.String.Double
' '           Text.Whitespace
':'           Text
' '           Text.Whitespace
'"$2 \\(.*\\)"' Literal.String.Double
'`'           Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'\\"$deplib\\"' Text
' '           Text.Whitespace
'2>/dev/null' Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$SED'        Text
' '           Text.Whitespace
'10q'         Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$EGREP'      Text
' '           Text.Whitespace
'"$match_pattern_regex"' Literal.String.Double
' '           Text.Whitespace
'>'           Text
' '           Text.Whitespace
'/dev/null;'  Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'valid_a_lib=yes' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'pass_all)'   Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'valid_a_lib=yes' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'            ' Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$valid_a_lib"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** Warning: Trying to link with static lib archive $deplib."' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** I have the capability to make that library automatically link in when"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** you link to this library.  But I can only do this if you have a"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** shared version of the library, which you do not appear to have"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** because the file extensions .$libext of this argument makes me believe"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** that it is just a static archive that I should not used here."' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** Warning: Linking the shared library $output against the"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** static library $deplib is not portable!"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'prog)'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'link;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'compile_deplibs="$deplib' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'finalize_deplibs="$deplib' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'esac'        Text
' '           Text.Whitespace
'# linkmode\n' Comment.Single

'\t  '        Text.Whitespace
';;'          Text
' '           Text.Whitespace
'# *.$libext\n' Comment.Single

'\t'          Text.Whitespace
'*.lo'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*.$objext)'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'conv;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlpreopen'   Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$dlopen_support"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
"# If there is no dlopen support or we're linking statically,\n" Comment.Single

'\t      '    Text.Whitespace
'# we need to preload.\n' Comment.Single

'\t      '    Text.Whitespace
'newdlprefiles="$newdlprefiles' Text
' '           Text.Whitespace
'$deplib"'    Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'compile_deplibs="$deplib' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'finalize_deplibs="$deplib' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'newdlfiles="$newdlfiles' Text
' '           Text.Whitespace
'$deplib"'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'%DEPLIBS%)'  Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'alldeplibs=yes' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
' '           Text.Whitespace
'# case $deplib\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$found"'    Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$lib"'      Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot find the library \\`$lib\' or unhandled argument \\`$deplib\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'# Check to see that this really is a libtool archive.\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'(${SED}'     Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'2q'"        Literal.String.Single
' '           Text.Whitespace
'$lib'        Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'grep'        Text
' '           Text.Whitespace
'"^# Generated by .*$PACKAGE"' Literal.String.Double
')'           Text
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
'2>&1;'       Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: \\`$lib\' is not a valid libtool archive"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'ladir=`$echo' Text
' '           Text.Whitespace
'"X$lib"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%/[^/]*$%%'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$ladir"'   Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"X$lib"'     Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'ladir="."'   Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'dlname='     Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'dlopen='     Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'dlpreopen='  Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'libdir='     Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'library_names=' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'old_library=' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'# If the library was installed with an old release of libtool,\n' Comment.Single

'\t'          Text.Whitespace
'# it will not redefine variables installed, or shouldnotlink\n' Comment.Single

'\t'          Text.Whitespace
'installed=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'shouldnotlink=no' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'avoidtemprpath=' Text
'\n\n\n'      Text.NewLine

'\t'          Text.Whitespace
'# Read the .la file\n' Comment.Single

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$lib'        Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*/*'         Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*\\\\*)'     Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'$lib'        Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'.'           Text
' '           Text.Whitespace
'./$lib'      Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"lib,link"'  Literal.String.Double
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"prog,scan"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
'{'           Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'prog'        Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'lib;'        Text
' '           Text.Whitespace
'};'          Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$dlopen"'   Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'dlfiles="$dlfiles' Text
' '           Text.Whitespace
'$dlopen"'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$dlpreopen"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'dlprefiles="$dlprefiles' Text
' '           Text.Whitespace
'$dlpreopen"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'conv;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Only check for convenience libraries\n' Comment.Single

'\t  '        Text.Whitespace
'deplibs="$lib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$libdir"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$old_library"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot find name of link library for \\`$lib\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# It is a libtool convenience library, so add in its objects.\n' Comment.Single

'\t    '      Text.Whitespace
'convenience="$convenience' Text
' '           Text.Whitespace
'$ladir/$objdir/$old_library"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'old_convenience="$old_convenience' Text
' '           Text.Whitespace
'$ladir/$objdir/$old_library"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'tmp_libs='   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'for'         Text
' '           Text.Whitespace
'deplib'      Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$dependency_libs;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'              ' Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$duplicate_deps"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"Xyes"'      Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t        '  Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$tmp_libs "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t        '  Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$deplib'     Text
' '           Text.Whitespace
'"*) specialdeplibs="' Literal.String.Double
'$specialdeplibs' Text
' '           Text.Whitespace
'$deplib"'    Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t        '  Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'              ' Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'tmp_libs="$tmp_libs' Text
' '           Text.Whitespace
'$deplib"'    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'prog'        Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'lib;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: \\`$lib\' is not a convenience library"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $pass = conv\n' Comment.Single

'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'# Get the name of the library we link against.\n' Comment.Single

'\t'          Text.Whitespace
'linklib='    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'for'         Text
' '           Text.Whitespace
'l'           Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$old_library' Text
' '           Text.Whitespace
'$library_names;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'linklib="$l"' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$linklib"'  Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot find name of link library for \\`$lib\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'# This library was specified with -dlopen.\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlopen;'     Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$libdir"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot -dlopen a convenience library: \\`$lib\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$dlname"'   Literal.String.Double
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$dlopen_support"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"# If there is no dlname, no dlopen support or we're linking\n" Comment.Single

'\t    '      Text.Whitespace
'# statically, we need to preload.  We also need to preload any\n' Comment.Single

'\t    '      Text.Whitespace
"# dependent libraries so libltdl's deplib preloader doesn't\n" Comment.Single

'\t    '      Text.Whitespace
'# bomb out in the load deplibs phase.\n' Comment.Single

'\t    '      Text.Whitespace
'dlprefiles="$dlprefiles' Text
' '           Text.Whitespace
'$lib'        Text
' '           Text.Whitespace
'$dependency_libs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newdlfiles="$newdlfiles' Text
' '           Text.Whitespace
'$lib"'       Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $pass = dlopen\n' Comment.Single

'\n'          Text.NewLine

'\t'          Text.Whitespace
'# We need an absolute path.\n' Comment.Single

'\t'          Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$ladir'      Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'[\\\\/]*'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'[A-Za-z]:[\\\\/]*)' Text
' '           Text.Whitespace
'abs_ladir="$ladir"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'*)'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'abs_ladir=`cd' Text
' '           Text.Whitespace
'"$ladir"'    Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'pwd`'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$abs_ladir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: cannot determine absolute directory name of \\`$ladir\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: passing it literally to the linker, although it might fail"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'abs_ladir="$ladir"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'laname=`$echo' Text
' '           Text.Whitespace
'"X$lib"'     Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s%^.*/%%'"  Literal.String.Single
'`'           Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'# Find the relevant object directory and library name.\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$installed"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'Xyes;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$libdir/$linklib"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$abs_ladir/$linklib"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: warning: library \\`$lib\' was moved."' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'dir="$ladir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'absdir="$abs_ladir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'libdir="$abs_ladir"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'dir="$libdir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'absdir="$libdir"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$hardcode_automatic"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'Xyes'        Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'avoidtemprpath=yes' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'!'           Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$ladir/$objdir/$linklib"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$abs_ladir/$linklib"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'dir="$ladir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'absdir="$abs_ladir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Remove this search path later\n' Comment.Single

'\t    '      Text.Whitespace
'notinst_path="$notinst_path' Text
' '           Text.Whitespace
'$abs_ladir"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'dir="$ladir/$objdir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'absdir="$abs_ladir/$objdir"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Remove this search path later\n' Comment.Single

'\t    '      Text.Whitespace
'notinst_path="$notinst_path' Text
' '           Text.Whitespace
'$abs_ladir"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $installed = yes\n' Comment.Single

'\t'          Text.Whitespace
'name=`$echo' Text
' '           Text.Whitespace
'"X$laname"'  Literal.String.Double
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/\\.la$//'" Literal.String.Single
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^lib//'"  Literal.String.Single
'`'           Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'# This library was specified with -dlpreopen.\n' Comment.Single

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'dlpreopen;'  Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$libdir"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: cannot -dlpreopen a convenience library: \\`$lib\'"' Literal.String.Double
' '           Text.Whitespace
'1>&2'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Prefer using a static library (so that no silly _DYNAMIC symbols\n' Comment.Single

'\t  '        Text.Whitespace
'# are required to link).\n' Comment.Single

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$old_library"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newdlprefiles="$newdlprefiles' Text
' '           Text.Whitespace
'$dir/$old_library"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Otherwise, use the dlname, so that lt_dlopen finds it.\n' Comment.Single

'\t  '        Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$dlname"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newdlprefiles="$newdlprefiles' Text
' '           Text.Whitespace
'$dir/$dlname"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newdlprefiles="$newdlprefiles' Text
' '           Text.Whitespace
'$dir/$linklib"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $pass = dlpreopen\n' Comment.Single

'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$libdir"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Link the convenience library\n' Comment.Single

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'lib;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'deplibs="$dir/$old_library' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"prog,link"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'compile_deplibs="$dir/$old_library' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'finalize_deplibs="$dir/$old_library' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'deplibs="$lib' Text
' '           Text.Whitespace
'$deplibs"'   Text
' '           Text.Whitespace
'# used for prog,scan pass\n' Comment.Single

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n\n\n'      Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog'        Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'link;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'newlib_search_path="$newlib_search_path' Text
' '           Text.Whitespace
'$ladir"'     Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'deplibs="$lib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'linkalldeplibs=no' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$link_all_deplibs"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'no'          Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$library_names"' Literal.String.Double
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'linkalldeplibs=yes' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'tmp_libs='   Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'for'         Text
' '           Text.Whitespace
'deplib'      Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$dependency_libs;' Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$deplib'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'-L*)'        Text
' '           Text.Whitespace
'newlib_search_path="$newlib_search_path' Text
' '           Text.Whitespace
'"`$echo "'   Literal.String.Double
'X$deplib"'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'$Xsed'       Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^-L//'"   Literal.String.Single
'`;;'         Text
' '           Text.Whitespace
'### testsuite: skip nested quoting test\n' Comment.Single

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Need to link against all dependency_libs?\n' Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkalldeplibs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'deplibs="$deplib' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# Need to hardcode shared library paths\n' Comment.Single

'\t      '    Text.Whitespace
'# or/and link against static libraries\n' Comment.Single

'\t      '    Text.Whitespace
'newdependency_libs="$deplib' Text
' '           Text.Whitespace
'$newdependency_libs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"X$duplicate_deps"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"Xyes"'      Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$tmp_libs "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$deplib'     Text
' '           Text.Whitespace
'"*) specialdeplibs="' Literal.String.Double
'$specialdeplibs' Text
' '           Text.Whitespace
'$deplib"'    Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'tmp_libs="$tmp_libs' Text
' '           Text.Whitespace
'$deplib"'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'done'        Text
' '           Text.Whitespace
'# for deplib\n' Comment.Single

'\t  '        Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $linkmode = prog...\n' Comment.Single

'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode,$pass"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'"prog,link"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$library_names"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'{'           Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$prefer_static_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no'          Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$old_library"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'};'          Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# We need to hardcode the library path\n' Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$shlibpath_var"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$avoidtemprpath"' Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# Make sure the rpath contains only unique directories.\n' Comment.Single

'\t      '    Text.Whitespace
'case'        Text
' '           Text.Whitespace
'"$temp_rpath "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$dir'        Text
' '           Text.Whitespace
'"*) ;;\n\t      *"' Literal.String.Double
' '           Text.Whitespace
'$absdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t      *) temp_rpath="' Literal.String.Double
'$temp_rpath' Text
' '           Text.Whitespace
'$absdir"'    Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# Hardcode the library path.\n' Comment.Single

'\t    '      Text.Whitespace
'# Skip directories that are in the system default run-time\n' Comment.Single

'\t    '      Text.Whitespace
'# search path.\n' Comment.Single

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'" $sys_lib_dlsearch_path "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$absdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t    *)\n\t      case "' Literal.String.Double
'$compile_rpath' Text
' '           Text.Whitespace
'" in\n\t      *"' Literal.String.Double
' '           Text.Whitespace
'$absdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t      *) compile_rpath="' Literal.String.Double
'$compile_rpath' Text
' '           Text.Whitespace
'$absdir"'    Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'" $sys_lib_dlsearch_path "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$libdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t    *)\n\t      case "' Literal.String.Double
'$finalize_rpath' Text
' '           Text.Whitespace
'" in\n\t      *"' Literal.String.Double
' '           Text.Whitespace
'$libdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t      *) finalize_rpath="' Literal.String.Double
'$finalize_rpath' Text
' '           Text.Whitespace
'$libdir"'    Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# $linkmode,$pass = prog,link...\n' Comment.Single

'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$alldeplibs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'{'           Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$deplibs_check_method"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'pass_all'    Text
' '           Text.Whitespace
'||'          Text
'\n'          Text.NewLine

'\t       '   Text.Whitespace
'{'           Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t\t '       Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$library_names"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'};'          Text
' '           Text.Whitespace
'};'          Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# We only need to search for static libraries\n' Comment.Single

'\t    '      Text.Whitespace
'continue'    Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t'          Text.Whitespace
'link_static=no' Text
' '           Text.Whitespace
'# Whether the deplib will be linked statically\n' Comment.Single

'\t'          Text.Whitespace
'use_static_libs=$prefer_static_libs' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$use_static_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'built'       Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$installed"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'use_static_libs=no' Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$library_names"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t   '       Text.Whitespace
'{'           Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$use_static_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no'          Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$old_library"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'};'          Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$installed"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'notinst_deplibs="$notinst_deplibs' Text
' '           Text.Whitespace
'$lib"'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'need_relink=yes' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# This is a shared library\n' Comment.Single

'\n'          Text.NewLine

'\t  '        Text.Whitespace
"# Warn about portability, can't link against -module's on\n" Comment.Single

'\t  '        Text.Whitespace
'# some systems (darwin)\n' Comment.Single

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$shouldnotlink"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$pass"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'link'        Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** Warning: Linking the executable $output against the loadable module"' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** Warning: Linking the shared library $output against the loadable module"' Literal.String.Double
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"*** $linklib is not portable!"' Literal.String.Double
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'lib'         Text
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t     '     Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_into_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Hardcode the library path.\n' Comment.Single

'\t    '      Text.Whitespace
'# Skip directories that are in the system default run-time\n' Comment.Single

'\t    '      Text.Whitespace
'# search path.\n' Comment.Single

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'" $sys_lib_dlsearch_path "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$absdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t    *)\n\t      case "' Literal.String.Double
'$compile_rpath' Text
' '           Text.Whitespace
'" in\n\t      *"' Literal.String.Double
' '           Text.Whitespace
'$absdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t      *) compile_rpath="' Literal.String.Double
'$compile_rpath' Text
' '           Text.Whitespace
'$absdir"'    Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'" $sys_lib_dlsearch_path "' Literal.String.Double
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*"'          Text
' '           Text.Whitespace
'$libdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t    *)\n\t      case "' Literal.String.Double
'$finalize_rpath' Text
' '           Text.Whitespace
'" in\n\t      *"' Literal.String.Double
' '           Text.Whitespace
'$libdir'     Text
' '           Text.Whitespace
'"*) ;;\n\t      *) finalize_rpath="' Literal.String.Double
'$finalize_rpath' Text
' '           Text.Whitespace
'$libdir"'    Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$old_archive_from_expsyms_cmds"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# figure out the soname\n' Comment.Single

'\t    '      Text.Whitespace
'set'         Text
' '           Text.Whitespace
'dummy'       Text
' '           Text.Whitespace
'$library_names' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'realname="$2"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'shift;'      Text
' '           Text.Whitespace
'shift'       Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'libname=`eval' Text
' '           Text.Whitespace
'\\\\$echo'   Text
' '           Text.Whitespace
'\\"$libname_spec\\"`' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"# use dlname if we got it. it's perfectly good, no?\n" Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$dlname"'   Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'soname="$dlname"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$soname_spec"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'# bleh windows\n' Comment.Single

'\t      '    Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*cygwin*'    Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'mingw*)'     Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'major=`expr' Text
' '           Text.Whitespace
'$current'    Text
' '           Text.Whitespace
'-'           Text
' '           Text.Whitespace
'$age`'       Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'versuffix="-$major"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'soname=\\"$soname_spec\\"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'soname="$realname"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# Make a new name for the extract_expsyms_cmds to use\n' Comment.Single

'\t    '      Text.Whitespace
'soroot="$soname"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'soname=`$echo' Text
' '           Text.Whitespace
'$soroot'     Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'${SED}'      Text
' '           Text.Whitespace
'-e'          Text
' '           Text.Whitespace
"'s/^.*\\///'" Literal.String.Single
'`'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'newlib="libimp-`$echo' Text
' '           Text.Whitespace
'$soname'     Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'${SED}'      Text
' '           Text.Whitespace
"'s/^lib//;s/\\.dll$//'" Literal.String.Single
'`.a"'        Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# If the library has no export list, then create one now\n' Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$output_objdir/$soname-def"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':'           Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"extracting exported symbol list from \\`$soname\'"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'save_ifs="$IFS";' Text
' '           Text.Whitespace
"IFS='~'"     Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'cmds=$extract_expsyms_cmds' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'for'         Text
' '           Text.Whitespace
'cmd'         Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$cmds;'      Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'cmd=\\"$cmd\\"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$cmd"'      Literal.String.Double
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"$cmd"'      Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$?'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'# Create $newlib\n' Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$output_objdir/$newlib"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
' '           Text.Whitespace
':;'          Text
' '           Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"generating import library for \\`$soname\'"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'save_ifs="$IFS";' Text
' '           Text.Whitespace
"IFS='~'"     Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'cmds=$old_archive_from_expsyms_cmds' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'for'         Text
' '           Text.Whitespace
'cmd'         Text
' '           Text.Whitespace
'in'          Text
' '           Text.Whitespace
'$cmds;'      Text
' '           Text.Whitespace
'do'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'cmd=\\"$cmd\\"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'$show'       Text
' '           Text.Whitespace
'"$cmd"'      Literal.String.Double
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'$run'        Text
' '           Text.Whitespace
'eval'        Text
' '           Text.Whitespace
'"$cmd"'      Literal.String.Double
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$?'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'done'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'IFS="$save_ifs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# make sure the library variables are pointing to the new library\n' Comment.Single

'\t    '      Text.Whitespace
'dir=$output_objdir' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'linklib=$newlib' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
' '           Text.Whitespace
'# test -n "$old_archive_from_expsyms_cmds"\n' Comment.Single

'\n'          Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog'        Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$mode"'     Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'relink;'     Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'add_shlibpath=' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'add_dir='    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'add='        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'lib_linked=yes' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$hardcode_action' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'immediate'   Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'unsupported)' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_direct"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add="$dir/$linklib"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'*-*-sco3.2v5.0.[024]*)' Text
' '           Text.Whitespace
'add_dir="-L$dir"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'*-*-sysv4*uw2*)' Text
' '           Text.Whitespace
'add_dir="-L$dir"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'*-*-sysv5OpenUNIX*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'*-*-sysv5UnixWare7.[01].[10]*' Text
' '           Text.Whitespace
'|'           Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'*-*-unixware7*)' Text
' '           Text.Whitespace
'add_dir="-L$dir"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'*-*-darwin*' Text
' '           Text.Whitespace
')'           Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'# if the lib is a module then we can not link against\n' Comment.Single

'\t\t    '    Text.Whitespace
'# it, someone is ignoring the new warnings I added\n' Comment.Single

'\t\t    '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'/usr/bin/file' Text
' '           Text.Whitespace
'-L'          Text
' '           Text.Whitespace
'$add'        Text
' '           Text.Whitespace
'2>'          Text
' '           Text.Whitespace
'/dev/null'   Text
' '           Text.Whitespace
'|'           Text
'\n'          Text.NewLine

'                      ' Text.Whitespace
'$EGREP'      Text
' '           Text.Whitespace
'": [^:]* bundle"' Literal.String.Double
' '           Text.Whitespace
'>/dev/null'  Text
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"** Warning, lib $linklib is a module, not a shared library"' Literal.String.Double
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-z'          Text
' '           Text.Whitespace
'"$old_library"' Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t        ' Text.Whitespace
'$echo'       Text
'\n'          Text.NewLine

'\t\t        ' Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"** And there doesn\'t seem to be a static archive available"' Literal.String.Double
'\n'          Text.NewLine

'\t\t        ' Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"** The link will probably fail, sorry"' Literal.String.Double
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t        ' Text.Whitespace
'add="$dir/$old_library"' Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_minus_L"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$host'       Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'*-*-sunos*)' Text
' '           Text.Whitespace
'add_shlibpath="$dir"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add_dir="-L$dir"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add="-l$name"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_shlibpath_var"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'no;'         Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add_shlibpath="$dir"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add="-l$name"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'lib_linked=no' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'relink)'     Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_direct"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add="$dir/$linklib"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_minus_L"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add_dir="-L$dir"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
"# Try looking first in the location we're being installed to.\n" Comment.Single

'\t\t'        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$inst_prefix_dir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$libdir'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'[\\\\/]*)'   Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
'add_dir="$add_dir' Text
' '           Text.Whitespace
'-L$inst_prefix_dir$libdir"' Text
'\n'          Text.NewLine

'\t\t      '  Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add="-l$name"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_shlibpath_var"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add_shlibpath="$dir"' Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'add="-l$name"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'lib_linked=no' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'lib_linked=no' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'esac'        Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$lib_linked"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'$echo'       Text
' '           Text.Whitespace
'"$modename: configuration error: unsupported hardcode properties"' Literal.String.Double
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'exit'        Text
' '           Text.Whitespace
'$EXIT_FAILURE' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add_shlibpath"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'case'        Text
' '           Text.Whitespace
':$compile_shlibpath:' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*":$add_shlibpath:"*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'compile_shlibpath="$compile_shlibpath$add_shlibpath:"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add_dir"'  Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'compile_deplibs="$add_dir' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'compile_deplibs="$add' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add_dir"'  Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'deplibs="$add_dir' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'deplibs="$add' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_direct"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t\t '       Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_minus_L"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'yes'         Text
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'\\'          Text
'\n'          Text.NewLine

'\t\t '       Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_shlibpath_var"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'case'        Text
' '           Text.Whitespace
':$finalize_shlibpath:' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'*":$libdir:"*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'finalize_shlibpath="$finalize_shlibpath$libdir:"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog'        Text
' '           Text.Whitespace
'||'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$mode"'     Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'relink;'     Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'add_shlibpath=' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'add_dir='    Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'add='        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'# Finalize command for both is simple: just hardcode it.\n' Comment.Single

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_direct"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'add="$libdir/$linklib"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_minus_L"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'add_dir="-L$libdir"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'add="-l$name"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_shlibpath_var"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'case'        Text
' '           Text.Whitespace
':$finalize_shlibpath:' Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*":$libdir:"*)' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'*)'          Text
' '           Text.Whitespace
'finalize_shlibpath="$finalize_shlibpath$libdir:"' Text
' '           Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'add="-l$name"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_automatic"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$inst_prefix_dir"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
'\n'          Text.NewLine

'\t\t '       Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-f'          Text
' '           Text.Whitespace
'"$inst_prefix_dir$libdir/$linklib"' Literal.String.Double
' '           Text.Whitespace
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t        '  Text.Whitespace
'add="$inst_prefix_dir$libdir/$linklib"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t        '  Text.Whitespace
'add="$libdir/$linklib"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
"# We cannot seem to hardcode it, guess we'll fake it.\n" Comment.Single

'\t      '    Text.Whitespace
'add_dir="-L$libdir"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
"# Try looking first in the location we're being installed to.\n" Comment.Single

'\t      '    Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$inst_prefix_dir"' Literal.String.Double
';'           Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'case'        Text
' '           Text.Whitespace
'$libdir'     Text
' '           Text.Whitespace
'in'          Text
'\n'          Text.NewLine

'\t\t  '      Text.Whitespace
'[\\\\/]*)'   Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
'add_dir="$add_dir' Text
' '           Text.Whitespace
'-L$inst_prefix_dir$libdir"' Text
'\n'          Text.NewLine

'\t\t    '    Text.Whitespace
';;'          Text
'\n'          Text.NewLine

'\t\t'        Text.Whitespace
'esac'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'add="-l$name"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n\n'        Text.NewLine

'\t    '      Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add_dir"'  Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'finalize_deplibs="$add_dir' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'finalize_deplibs="$add' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add_dir"'  Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'deplibs="$add_dir' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t      '    Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$add"'      Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'deplibs="$add' Text
' '           Text.Whitespace
'$deplibs"'   Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$linkmode"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'prog;'       Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Here we assume that one of hardcode_direct or hardcode_minus_L\n' Comment.Single

'\t  '        Text.Whitespace
'# is not unsupported.  This is valid on all known static and\n' Comment.Single

'\t  '        Text.Whitespace
'# shared platforms.\n' Comment.Single

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$hardcode_direct"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'unsupported;' Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'test'        Text
' '           Text.Whitespace
'-n'          Text
' '           Text.Whitespace
'"$old_library"' Literal.String.Double
' '           Text.Whitespace
'&&'          Text
' '           Text.Whitespace
'linklib="$old_library"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'compile_deplibs="$dir/$linklib' Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'finalize_deplibs="$dir/$linklib' Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'else'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'compile_deplibs="-l$name' Text
' '           Text.Whitespace
'-L$dir'      Text
' '           Text.Whitespace
'$compile_deplibs"' Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
'finalize_deplibs="-l$name' Text
' '           Text.Whitespace
'-L$dir'      Text
' '           Text.Whitespace
'$finalize_deplibs"' Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'fi'          Text
'\n'          Text.NewLine

'\t'          Text.Whitespace
'elif'        Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$build_libtool_libs"' Literal.String.Double
' '           Text.Whitespace
'='           Text
' '           Text.Whitespace
'yes;'        Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t  '        Text.Whitespace
'# Not a shared library\n' Comment.Single

'\t  '        Text.Whitespace
'if'          Text
' '           Text.Whitespace
'test'        Text
' '           Text.Whitespace
'"$deplibs_check_method"' Literal.String.Double
' '           Text.Whitespace
'!='          Text
' '           Text.Whitespace
'pass_all;'   Text
' '           Text.Whitespace
'then'        Text
'\n'          Text.NewLine

'\t    '      Text.Whitespace
"# We're trying link a shared library against a static one\n" Comment.Single

'\t    '      Text.Whitespace
"# but the system doesn't support it.\n" Comment.Single
